{"version":3,"file":"148.6cdc0179c68b63a9ae0f.js","mappings":"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","sources":["webpack://TelyAI/./src/components/common/gift/GiftMenuItems.tsx","webpack://TelyAI/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://TelyAI/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://TelyAI/./src/components/middle/message/actions/SuggestedPostApproval.tsx","webpack://TelyAI/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx","webpack://TelyAI/./src/components/middle/message/SimilarChannels.tsx","webpack://TelyAI/./src/components/middle/message/actions/Gift.tsx","webpack://TelyAI/./src/components/middle/message/actions/SuggestedPostRejected.tsx","webpack://TelyAI/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://TelyAI/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://TelyAI/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://TelyAI/./src/components/middle/message/ActionMessage.tsx","webpack://TelyAI/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://TelyAI/./src/components/common/gift/GiftRibbon.tsx","webpack://TelyAI/./src/hooks/useAverageColor.ts","webpack://TelyAI/./src/components/middle/message/actions/StarGift.tsx","webpack://TelyAI/./src/components/common/MiniTable.module.scss?145f","webpack://TelyAI/./src/components/common/MiniTable.tsx","webpack://TelyAI/./src/components/middle/message/actions/SuggestedPostBalanceTooLow.tsx"],"sourcesContent":["import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: 'XTR', amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiPeer, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  sender?: ApiPeer;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  currentUserId,\n  action,\n  sender,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  const peerLink = useMemo(() => {\n    const peer = channel || sender;\n    const peerTitle = peer && getPeerTitle(lang, peer);\n    const peerFallbackText = lang('ActionFallbackChat');\n\n    return renderPeerLink(peer?.id, peerTitle || peerFallbackText);\n  }, [channel, sender, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>\n          {lang(action.type !== 'giftCode' || action.isViaGiveaway\n            ? 'ActionGiveawayResultTitle' : 'GiftInfoTitle')}\n        </h3>\n        <div>\n          {action.type === 'giftCode' && (\n            action.isViaGiveaway ? lang(\n              'ActionGiveawayResultPremiumText',\n              { channel: channelLink, months: action.months },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              })\n              : translateWithYou(\n                lang,\n                'ActionGiftCodeSubscriptionText',\n                sender?.id === currentUserId,\n                { peer: peerLink, months: action.months },\n                {\n                  pluralValue: action.months,\n                  renderTextFilters: ['br'],\n                })\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = action.boostPeerId ? selectChat(global, action.boostPeerId) : undefined;\n\n    return {\n      currentUserId,\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import React from '@teact';\nimport { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'openSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { STARS_SUGGESTED_POST_AGE_MIN, TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\nimport { selectIsMonoforumAdmin, selectMonoforumChannel,\n  selectReplyMessage,\n  selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport renderText from '../../../common/helpers/renderText';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiPeer;\n  originalSender?: ApiPeer;\n  ageMinSeconds: number;\n  isAdmin: boolean;\n};\n\nconst SuggestedPostApproval = ({\n  message,\n  action,\n  sender,\n  chat,\n  originalSender,\n  ageMinSeconds,\n  isAdmin,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { scheduleDate, amount } = action;\n\n  const chatTitle = chat && getPeerFullTitle(lang, chat);\n  const renderChatLink = () => renderPeerLink(chat?.id, chatTitle || lang('ActionFallbackChat'));\n\n  const originalSenderTitle = originalSender && getPeerFullTitle(lang, originalSender);\n  const originalSenderLink = renderPeerLink(originalSender?.id, originalSenderTitle || lang('ActionFallbackUser'));\n\n  const publishDate = scheduleDate\n    ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n    : lang('SuggestMessageAnytime');\n\n  const isPostPublished = scheduleDate ? scheduleDate <= getServerTime() : false;\n\n  const currency = amount?.currency;\n  const amountValue = amount?.amount || 0;\n\n  const formattedAmount = amountValue > 0\n    ? (currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountValue))\n      : formatStarsAsText(lang, amountValue))\n    : undefined;\n\n  const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostApprovalTitle}>\n        {renderText(lang('SuggestedPostAgreementReached'))}\n      </div>\n\n      <div className={styles.suggestedPostApprovalSection}>\n        {translateWithYou(\n          lang,\n          isPostPublished ? 'SuggestedPostPublished' : 'SuggestedPostPublishSchedule',\n          !isAdmin,\n          { peer: renderChatLink(), date: publishDate },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {formattedAmount && (\n        <div className={styles.suggestedPostApprovalSection}>\n          {translateWithYou(lang,\n            'SuggestedPostCharged',\n            !isAdmin,\n            {\n              user: originalSenderLink,\n              amount: formattedAmount,\n            },\n            { withMarkdown: true },\n          )}\n        </div>\n      )}\n\n      {isPostPublished && formattedAmount && (\n        <>\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostReceiveAmount', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n              currency: currency === TON_CURRENCY_CODE ? lang('CurrencyTon') : lang('CurrencyStars'),\n            }, { withMarkdown: true })}\n          </div>\n\n          <div className={styles.suggestedPostApprovalSection}>\n            {translateWithYou(lang, 'SuggestedPostRefund', !isAdmin, {\n              peer: renderChatLink(),\n              duration,\n              currency: currency === TON_CURRENCY_CODE ? lang('CurrencyTon') : lang('CurrencyStars'),\n            }, { withMarkdown: true })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectMonoforumChannel(global, message.chatId);\n\n    const replyInfo = getMessageReplyInfo(message);\n    let originalSender: ApiPeer | undefined;\n\n    if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n      const replyMessage = selectReplyMessage(global, message);\n      if (replyMessage) {\n        originalSender = selectSender(global, replyMessage);\n      }\n    }\n\n    const { appConfig } = global;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const isAdmin = chat ? Boolean(selectIsMonoforumAdmin(global, message.chatId)) : false;\n\n    return {\n      sender,\n      chat,\n      originalSender,\n      ageMinSeconds,\n      isAdmin,\n    };\n  },\n)(SuggestedPostApproval));\n","import React from '@teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  const ref = useRef<HTMLDivElement>();\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n    && (isExpanded || isAnimating)\n    && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>\n          {formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): StateProps => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import React from '@teact';\nimport { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type {\n  ApiMessageActionGiftPremium,\n  ApiMessageActionGiftStars,\n  ApiMessageActionGiftTon } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n} from '../../../../global/selectors';\nimport { formatCurrency } from '../../../../util/formatCurrency';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars | ApiMessageActionGiftTon;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  const renderTonTitle = () => {\n    const { cryptoAmount, cryptoCurrency } = action;\n    const price = cryptoAmount\n      ? formatCurrency(lang, cryptoAmount, cryptoCurrency!, { asFontIcon: true })\n      : undefined;\n\n    return price;\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : action.type === 'giftStars' ? (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          ) : renderTonTitle()}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message\n            && (lang(action.type === 'giftTon' ? 'DescriptionAboutTon'\n              : action.type === 'giftPremium'\n                ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : action.type === 'giftStars'\n        ? selectGiftStickerForStars(global, action.stars)\n        : selectGiftStickerForTon(global, action.cryptoAmount);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n};\n\nconst SuggestedPostRejected = ({\n  message,\n  action,\n  sender,\n  onClick,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const { isOutgoing } = message;\n  const { rejectComment } = action;\n\n  const senderTitle = sender && getPeerTitle(lang, sender);\n  const senderLink = renderPeerLink(sender?.id, senderTitle || lang('ActionFallbackUser'));\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostRejectedContentBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostRejectedTitle}>\n        <Icon className={styles.rejectedIcon} name=\"close\" />\n        {translateWithYou(\n          lang,\n          rejectComment ? 'SuggestedPostRejectedWithReason' : 'SuggestedPostRejected',\n          isOutgoing,\n          { peer: senderLink },\n          { withMarkdown: true },\n        )}\n      </div>\n\n      {rejectComment && (\n        <div className={styles.suggestedPostRejectedComment}>\n          {lang('SuggestedPostRejectedComment', { comment: rejectComment })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return {\n      sender,\n    };\n  },\n)(SuggestedPostRejected));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n}: OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import React from '@teact';\nimport { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID, IS_ELECTRON, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport GiveawayPrize from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport SuggestedPostApproval from './actions/SuggestedPostApproval';\nimport SuggestedPostBalanceTooLow from './actions/SuggestedPostBalanceTooLow';\nimport SuggestedPostRejected from './actions/SuggestedPostRejected';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS = new Set<ApiMessageAction['type']>([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'todoCompletions',\n  'todoAppendTasks',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS = new Set<ApiMessageAction['type']>(['giftCode', 'prizeStars',\n  'suggestProfilePhoto', 'suggestedPostApproval']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n    focusMessage,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n  const isClickableText = action.type === 'suggestedPostSuccess';\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftTon':\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n\n      case 'suggestedPostApproval': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n\n      case 'suggestedPostSuccess': {\n        const replyInfo = getMessageReplyInfo(message);\n        if (replyInfo?.type === 'message' && replyInfo.replyToMsgId) {\n          focusMessage({\n            chatId: message.chatId,\n            threadId,\n            messageId: replyInfo.replyToMsgId,\n          });\n        }\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <GiveawayPrize\n            action={action}\n            sender={sender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftTon':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      case 'suggestedPostApproval':\n        if (action.isBalanceTooLow) {\n          return (\n            <SuggestedPostBalanceTooLow\n              message={message}\n              action={action}\n              onClick={handleClick}\n            />\n          );\n        }\n        return action.isRejected ? (\n          <SuggestedPostRejected\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        ) : (\n          <SuggestedPostApproval\n            message={message}\n            action={action}\n            onClick={handleClick}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, message, observeIntersectionForLoading, sender, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={buildClassName(styles.inlineWrapper, isClickableText && styles.hoverable)}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n  green: [['#52D553', '#4BB121'], ['#52D553', '#4BB121']],\n  orange: [['#D48F23', '#BE7E15'], ['#D48F23', '#BE7E15']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\ntype GradientColor = readonly [string, string];\n\ntype OwnProps = {\n  color: ColorKey | GradientColor | (string & {});\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor: GradientColor | undefined\n  = Array.isArray(color)\n    ? color as GradientColor\n    : colorKey\n      ? COLORS[colorKey][isDarkTheme ? 1 : 0]\n      : undefined;\n\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import React from '@teact';\nimport { memo, useMemo, useRef } from '@teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport useFlag from '../../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift', styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            shouldLoop={isHover}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {Boolean(action.gift.availabilityTotal) && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};","import React from '@teact';\nimport { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionSuggestedPostApproval } from '../../../../api/types/messageActions';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getPeerFullTitle } from '../../../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Sparkles from '../../../common/Sparkles';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestedPostApproval;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  replyMessageSender?: ApiPeer;\n  replyMessage?: ApiMessage;\n};\n\nconst SuggestedPostBalanceTooLow = ({\n  onClick,\n  message,\n  sender,\n  replyMessageSender,\n  replyMessage,\n}: OwnProps & StateProps) => {\n  const { openStarsBalanceModal } = getActions();\n  const lang = useLang();\n\n  const handleGetMoreStars = useLastCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openStarsBalanceModal({});\n  });\n\n  const targetPeer = replyMessageSender || sender;\n  const peerTitle = targetPeer && getPeerFullTitle(lang, targetPeer);\n  const peerLink = renderPeerLink(targetPeer?.id, peerTitle || lang('ActionFallbackUser'));\n\n  const currency = replyMessage?.suggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE;\n  const currencyName = currency === TON_CURRENCY_CODE ? lang('CurrencyTon') : lang('CurrencyStars');\n  const buyButtonText = currency === TON_CURRENCY_CODE ? lang('ButtonTopUpViaFragment') : lang('ButtonBuyStars');\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.suggestedPostBalanceTooLowBox)}\n      onClick={onClick}\n    >\n      <div className={styles.suggestedPostBalanceTooLowTitle}>\n        {lang('SuggestedPostBalanceTooLow', {\n          peer: peerLink,\n          currency: currencyName,\n        }, { withNodes: true, withMarkdown: true })}\n      </div>\n\n      {!message.isOutgoing && (\n        <div className={styles.actionButton} onClick={handleGetMoreStars}>\n          <Sparkles preset=\"button\" />\n          {buyButtonText}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    const replyMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n      ? selectChatMessage(global, message.chatId, message.replyInfo.replyToMsgId)\n      : undefined;\n\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage) : undefined;\n\n    return {\n      sender,\n      replyMessageSender,\n      replyMessage,\n    };\n  },\n)(SuggestedPostBalanceTooLow));\n"],"names":["GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","getActions","lang","useLang","oldLang","useOldLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPrice","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","canTransferAt","getServerTime","key","variables","date","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","currency","amount","nanos","icon","title","number","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","React","MenuItem","isPinned","onClick","Boolean","memo","STICKER_SIZE","GiveawayPrizeAction","currentUserId","action","sender","sticker","canPlayAnimatedEmojis","channel","observeIntersectionForLoading","observeIntersectionForPlaying","stickerRef","useRef","channelLink","channelTitle","getPeerTitle","channelFallbackText","renderPeerLink","id","peerLink","peer","peerTitle","peerFallbackText","className","styles","contentBox","tabIndex","role","ref","stickerWrapper","style","StickerView","containerRef","size","noLoad","isViaGiveaway","months","withNodes","withMarkdown","pluralValue","renderTextFilters","translateWithYou","stars","actionButton","Sparkles","preset","withGlobal","global","selectGiftStickerForDuration","selectGiftStickerForStars","selectCanPlayAnimatedEmojis","boostPeerId","selectChat","SuggestedPhotoAction","observeIntersection","openMediaViewer","uploadProfilePhoto","isOutgoing","photo","cropModalBlob","setCropModalBlob","useState","isVideoModalOpen","openVideoModal","closeVideoModal","useFlag","suggestedPhotoUrl","useMedia","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","user","showAvatarNotification","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","file","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","l","videoStartTs","chatId","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","Avatar","suggestedAvatar","loopIndefinitely","withVideo","suggestedText","CropModal","onClose","onChange","ConfirmDialog","isOpen","confirmHandler","selectPeer","SuggestedPostApproval","chat","originalSender","ageMinSeconds","isAdmin","scheduleDate","chatTitle","getPeerFullTitle","renderChatLink","originalSenderTitle","originalSenderLink","publishDate","formatScheduledDateTime","isPostPublished","amountValue","formattedAmount","TON_CURRENCY_CODE","formatTonAsText","convertTonFromNanos","formatStarsAsText","duration","formatShortDuration","buildClassName","suggestedPostContentBox","suggestedPostApprovalTitle","renderText","suggestedPostApprovalSection","selectSender","selectMonoforumChannel","replyInfo","getMessageReplyInfo","replyToMsgId","replyMessage","selectReplyMessage","appConfig","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","selectIsMonoforumAdmin","SVG_MAP","Map","SvgFluidBackgroundFilter","constructor","color","_defineProperty","this","filterId","slice","addSvgDefinition","xmlns","SVG_NAMESPACE","in","stdDeviation","result","mode","values","in2","operator","getFilterId","referenceCount","removeReference","removeSvgDefinition","isUsed","useFluidBackgroundFilter","asValue","useEffect","colorFilter","get","delete","has","prepareStyle","svg","set","DEFAULT_BADGE_COLOR","SHOW_CHANNELS_NUMBER","ANIMATION_DURATION","MIN_SKELETON_DELAY","MAX_SKELETON_DELAY","AUTO_EXPAND_TIME","SimilarChannels","similarChannelIds","isExpanded","count","isCurrentUserPremium","channelJoinInfo","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","map","filter","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","length","shouldRenderChannels","useHorizontalScroll","useTimeout","setTimeout","clearTimeout","current","scrollIntoView","behavior","handleToggle","joinedDate","root","Skeleton","skeleton","isAppearing","notch","width","height","viewBox","fill","notchPath","d","inner","header","Button","close","Icon","name","channelList","i","MoreChannels","channelsCount","SimilarChannel","openChat","useAverageColor","item","avatar","badge","membersCount","formatIntegerCompact","openPremiumModal","openChatWithInfo","lastItem","shouldReplaceHistory","profileTab","forceScrollProfileTab","fakeAvatar","fakeAvatarInner","lastFakeAvatar","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","joinInfo","GiftAction","info","renderTonTitle","cryptoAmount","cryptoCurrency","formatCurrency","asFontIcon","renderTextWithEntities","selectGiftStickerForTon","SuggestedPostRejected","rejectComment","senderTitle","senderLink","suggestedPostRejectedContentBox","suggestedPostRejectedTitle","rejectedIcon","suggestedPostRejectedComment","comment","AVATAR_SIZE","REM","ChannelPhotoAction","channelPhoto","StarGiftAction","recipient","isHover","markHover","unmarkHover","getStickerFromGift","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","tableData","shouldShowFrom","isUpgrade","fallbackPeerTitle","isSelf","starGift","uniqueGift","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","clearBottomSector","shouldLoop","GiftRibbon","subtitle","textColor","MiniTable","data","valueClassName","uniqueValue","buildStyle","currentUser","selectUser","messageSender","giftSender","fromId","messageRecipient","SINGLE_LINE_ACTIONS","Set","HIDDEN_TEXT_ACTIONS","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","isInsideTopic","isFocused","focusDirection","noFocusHighlight","isInSelectMode","hasUnreadReaction","isResizingContainer","scrollTargetPosition","onIntersectPinnedMessage","observeIntersectionForBottom","isAccountFrozen","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","focusMessage","content","isLocal","isLocalMessageId","isTextHidden","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","isClickableText","messageReplyInfo","replyToPeerId","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useAppLayout","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","IS_ELECTRON","IS_ANDROID","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","handleClick","ChannelAvatar","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","GiveawayPrize","Gift","StarGift","StarGiftUnique","isBalanceTooLow","SuggestedPostBalanceTooLow","isRejected","getMessageHtmlId","singleLine","fluidMultiline","hasFullContent","onMouseDown","e","preventMessageInputBlur","onContextMenu","inlineWrapper","hoverable","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","tabState","selectTabState","themes","settings","isForum","selectChatMessage","selectIsMessageFocused","direction","noHighlight","focusedMessage","unreadReactions","includes","selectIsCurrentUserFrozen","selectIsInSelectMode","selectTheme","COLORS","red","blue","purple","green","orange","COLOR_KEYS","Object","keys","theme","validSvgRandomId","useUniqueId","colorKey","isDarkTheme","gradientColor","Array","isArray","startColor","endColor","ribbon","x1","y1","x2","y2","gradientUnits","offset","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","averageColor","getAverageColor","rgb2hex","starGiftMaxConvertPeriod","isChannel","isApiPeerChat","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","giftDescription","starsAmount","starsToConvert","isUpgraded","alreadyPaidUpgradeStars","isConverted","total","keyClassName","value","replyMessageSender","openStarsBalanceModal","handleGetMoreStars","preventDefault","stopPropagation","targetPeer","suggestedPostInfo","STARS_CURRENCY_CODE","currencyName","buyButtonText","suggestedPostBalanceTooLowBox","suggestedPostBalanceTooLowTitle"],"sourceRoot":""}