{"version":3,"file":"2163.8d642c14ebdd5a937e33.js","mappings":"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","sources":["webpack://telegram-t/./src/components/chatAssistant/utils/ai-analyse-message.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-message-listener.ts"],"sourcesContent":["/* eslint-disable */\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ApiMessage } from \"../../../api/types\";\nimport eventEmitter, { Actions } from \"../lib/EventEmitter\";\nimport { ChataiStores } from \"../store\";\nimport { StoreMessage } from \"../store/messages-store\";\nimport {\n  audioAISummary,\n  documentAISummary,\n  imageAISummary,\n  mentionReply,\n  webPageAISummary,\n} from \"./chat-api\";\nimport { sleep } from \"../ai-chatfolders/util\";\nimport { getMediaHash } from \"../../../global/helpers\";\nimport * as mediaLoader from \"../../../util/mediaLoader\";\nimport { message as showMessage } from \"antd\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\nimport { getActions, getGlobal } from \"../../../global\";\nimport { selectChatMessage } from \"../../../global/selectors\";\n\npdfjsLib.GlobalWorkerOptions.workerSrc = \"pdf.worker.min.js\";\n\nconst mammoth = require(\"mammoth\");\n\nexport async function replyToMention(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  if (!message.isMentioned || !message.content?.text?.text) return;\n\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-reply-mention\" }],\n    content: JSON.stringify({\n      messageId: message.id,\n      content: message.content.text?.text,\n      isAuto,\n      status: \"loading\",\n    }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  mentionReply({\n    message: message.content.text?.text,\n    language: getAutoTransLang(),\n  })\n    .then((response: any) => {\n      if (response.text) {\n        newMessage = {\n          ...newMessage,\n          content: JSON.stringify({\n            messageId: message.id,\n            content: message.content.text?.text,\n            replys: response.text,\n            isAuto,\n            status: \"success\",\n          }),\n        };\n        sendMessageToAIRoom(newMessage);\n      } else {\n        sendErrorMessage(newMessage, message, isAuto);\n      }\n    })\n    .catch((err) => {\n      console.log(\"error\", err);\n      sendErrorMessage(newMessage, message, isAuto);\n    });\n}\n\nexport async function photoSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const photo = message.content?.photo;\n  if (!photo) return;\n  const mediaHash = getMediaHash(photo, \"download\");\n  if (!mediaHash) return;\n  const mimeType = \"image/jpeg\";\n\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  await handleImageToSummaryText({\n    mimeType,\n    mediaHash,\n    message,\n    newMessage,\n    isAuto,\n  });\n}\n\nexport async function webPageSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const webPage = message.content?.webPage;\n  const url = webPage ? webPage?.url : message.content?.text?.text;\n  if (!url || url === \"\") return;\n\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  webPageAISummary({\n    url,\n    text: message.content?.text?.text || \"\",\n    language: getAutoTransLang(),\n  })\n    .then((response: any) => {\n      if (response?.text) {\n        newMessage = {\n          ...newMessage,\n          content: JSON.stringify({\n            message,\n            summaryInfo: response?.text,\n            isAuto,\n            status: \"success\",\n          }),\n        };\n        sendMessageToAIRoom(newMessage);\n      } else {\n        sendErrorMessage(newMessage, message, isAuto);\n      }\n    })\n    .catch((err) => {\n      console.log(\"error\", err);\n      sendErrorMessage(newMessage, message, isAuto);\n    });\n}\n\nexport async function documentSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const document = message.content?.document;\n  if (!document) return;\n\n  const mediaHash = getMediaHash(document, \"download\");\n  if (!mediaHash) return;\n  if (checkIsImage(document.mimeType) && isAuto) return;\n\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  // image\n  if (checkIsImage(document.mimeType)) {\n    handleImageToSummaryText({\n      mimeType: document.mimeType,\n      mediaHash,\n      message,\n      newMessage,\n      isAuto,\n    });\n    return;\n  }\n  // video\n  if (checkIsVideo(document.mimeType)) {\n    await handleAudioToSummaryText({\n      mediaHash,\n      mimeType: document?.mimeType,\n      filename: document?.fileName,\n      size: document?.size,\n      newMessage,\n      message,\n      isAuto,\n    });\n    return;\n  }\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const arrayBuffer = await blob.arrayBuffer();\n  let text = \"\";\n  switch (document.mimeType) {\n    case \"text/plain\":\n      text = new TextDecoder().decode(arrayBuffer);\n      break;\n    case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n    case \"application/msword\":\n      const result = await mammoth.extractRawText({ arrayBuffer });\n      text = result.value;\n      break;\n    case \"application/pdf\":\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      let pdfText = \"\";\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const content = await page.getTextContent();\n        const pageText = content.items.map((item: any) => item.str).join(\" \");\n        pdfText += pageText + \"\\n\";\n      }\n      text = pdfText;\n      break;\n    default:\n      await sendErrorMessage(newMessage, message, isAuto);\n      return;\n  }\n  if (text === \"\") {\n    await sendErrorMessage(newMessage, message, isAuto);\n    return;\n  }\n\n  documentAISummary({\n    content: text,\n    language: getAutoTransLang(),\n  })\n    .then((response: any) => {\n      if (response?.text) {\n        newMessage = {\n          ...newMessage,\n          content: JSON.stringify({\n            message: message,\n            summaryInfo: response?.text,\n            isAuto,\n            status: \"success\",\n          }),\n        };\n        sendMessageToAIRoom(newMessage);\n      } else {\n        sendErrorMessage(newMessage, message, isAuto);\n      }\n    })\n    .catch((err) => {\n      console.log(\"error\", err);\n      sendErrorMessage(newMessage, message, isAuto);\n    });\n}\n\nexport async function voiceSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const voice = message.content?.voice;\n  if (!voice) return;\n\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  let text = \"\";\n  const global = getGlobal();\n  const { isTranscriptionError, transcriptionId } = message;\n  if (isTranscriptionError) {\n    sendErrorMessage(newMessage, message, isAuto);\n    return;\n  }\n  if (transcriptionId && transcriptionId !== \"\") {\n    text = global?.transcriptions?.[transcriptionId]?.text;\n  } else {\n    await getActions().transcribeAudio({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    await sleep(2000);\n    const newGlobal = getGlobal();\n    const currentMessage = selectChatMessage(\n      newGlobal,\n      message.chatId,\n      message.id\n    );\n    if (currentMessage?.isTranscriptionError) {\n      sendErrorMessage(newMessage, message, isAuto);\n      return;\n    }\n    if (\n      currentMessage?.transcriptionId &&\n      currentMessage?.transcriptionId !== \"\"\n    ) {\n      text = newGlobal.transcriptions?.[currentMessage?.transcriptionId]?.text;\n    }\n  }\n  if (text === \"\") {\n    await sendErrorMessage(newMessage, message, isAuto);\n    return;\n  }\n  documentAISummary({\n    content: text,\n    language: getAutoTransLang(),\n  })\n    .then((response: any) => {\n      if (response?.text) {\n        newMessage = {\n          ...newMessage,\n          content: JSON.stringify({\n            message: message,\n            summaryInfo: response?.text,\n            isAuto,\n            status: \"success\",\n          }),\n        };\n        sendMessageToAIRoom(newMessage);\n      } else {\n        sendErrorMessage(newMessage, message, isAuto);\n      }\n    })\n    .catch((err) => {\n      console.log(\"error\", err);\n      sendErrorMessage(newMessage, message, isAuto);\n    });\n}\n\nexport async function voiceToAudioSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const voice = message.content?.voice;\n  if (!voice) return;\n  const mediaHash = getMediaHash(voice, \"download\");\n  if (!mediaHash) return;\n  const maxBase64Length = Math.floor(4 * 1024 * 1024);\n  if (\n    message.content.audio?.size &&\n    message.content.audio?.size * (4 / 3) > maxBase64Length\n  ) {\n    showMessage.info(\"File size exceeds limit (4 MB)\");\n    return;\n  }\n  //\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  await handleAudioToSummaryText({\n    mediaHash,\n    mimeType: \"audio/ogg\",\n    filename: voice?.id + \".ogg\",\n    size: voice?.size,\n    newMessage,\n    message,\n    isAuto,\n  });\n}\n\nexport async function audioSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const audio = message.content?.audio;\n  if (!audio) return;\n  const mediaHash = getMediaHash(audio, \"download\");\n  if (!mediaHash) return;\n  //\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n\n  await handleAudioToSummaryText({\n    mediaHash,\n    mimeType: audio?.mimeType,\n    filename: audio?.fileName,\n    size: audio?.size,\n    newMessage,\n    message,\n    isAuto,\n  });\n}\n\nexport async function videoSummary(\n  message: ApiMessage,\n  isAuto: boolean = false\n) {\n  const video = message.content?.video;\n  if (!video) return;\n  const mediaHash = getMediaHash(video, \"download\");\n  if (!mediaHash) return;\n  //\n  let newMessage: StoreMessage = {\n    chatId: message.chatId,\n    timestamp: new Date().getTime(),\n    id: uuidv4(),\n    createdAt: new Date(),\n    role: \"assistant\",\n    annotations: [{ type: \"room-ai-media-summary\" }],\n    content: JSON.stringify({ message, isAuto, status: \"loading\" }),\n  };\n  await sendMessageToAIRoom(newMessage);\n  if (video?.mimeType !== \"video/mp4\") {\n    await sendErrorMessage(newMessage, message, isAuto);\n    return;\n  }\n\n  await handleAudioToSummaryText({\n    mediaHash,\n    mimeType: video?.mimeType,\n    filename: video?.fileName,\n    size: video?.size,\n    newMessage,\n    message,\n    isAuto,\n  });\n}\n\nasync function sendMessageToAIRoom(newMessage: StoreMessage) {\n  await ChataiStores.message?.storeMessage(newMessage);\n  await eventEmitter.emit(Actions.AddRoomAIMessage, newMessage);\n}\n\nasync function handleAudioToSummaryText({\n  mediaHash,\n  mimeType,\n  filename,\n  size,\n  newMessage,\n  message,\n  isAuto,\n}: {\n  mediaHash: string;\n  mimeType?: string;\n  filename?: string;\n  size?: number;\n  newMessage: StoreMessage;\n  message: ApiMessage;\n  isAuto: boolean;\n}) {\n  try {\n    // check size\n    if (size && size > 4.5 * 1024 * 1024) {\n      showMessage.info(\"File size exceeds limit (4.5 MB)\");\n      newMessage = {\n        ...newMessage,\n        content: JSON.stringify({\n          message,\n          errorMsg: \"File size exceeds limit (4.5 MB)\",\n          isAuto,\n          status: \"error\",\n        }),\n      };\n      await sendMessageToAIRoom(newMessage);\n      return;\n    }\n    // download\n    await mediaLoader.fetch(mediaHash, 0);\n    const blobUrl = mediaLoader.getFromMemory(mediaHash);\n    if (!blobUrl) {\n      sendErrorMessage(newMessage, message, isAuto);\n      return;\n    }\n\n    const response = await fetch(blobUrl);\n    const blob = await response.blob();\n    //\n    const formData = new FormData();\n    formData.append(\"file\", blob, filename || \"audio.ogg\");\n    formData.append(\"language\", getAutoTransLang());\n    if (mimeType) formData.append(\"mimeType\", mimeType);\n\n    const summaryResponse: any = await audioAISummary(formData);\n    if (summaryResponse?.text) {\n      newMessage = {\n        ...newMessage,\n        content: JSON.stringify({\n          message,\n          summaryInfo: summaryResponse?.text,\n          isAuto,\n          status: \"success\",\n        }),\n      };\n      sendMessageToAIRoom(newMessage);\n    } else {\n      sendErrorMessage(newMessage, message, isAuto);\n    }\n  } catch (err) {\n    console.log(\"error\", err);\n    sendErrorMessage(newMessage, message, isAuto);\n  }\n}\n\nasync function handleImageToSummaryText({\n  mimeType,\n  mediaHash,\n  message,\n  newMessage,\n  isAuto,\n}: {\n  mimeType: string;\n  mediaHash: string;\n  message: ApiMessage;\n  newMessage: StoreMessage;\n  isAuto: boolean;\n}) {\n  // download\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) {\n    sendErrorMessage(newMessage, message, isAuto);\n    return;\n  }\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const reader = new FileReader();\n  reader.onloadend = function () {\n    const base64Data = reader.result?.toString().split(\",\")[1] || \"\";\n    imageAISummary({\n      image: `data:${mimeType};base64,` + base64Data,\n      language: getAutoTransLang(),\n    })\n      .then((response: any) => {\n        if (response?.text) {\n          newMessage = {\n            ...newMessage,\n            content: JSON.stringify({\n              message,\n              summaryInfo: JSON.stringify({ text: response?.text }),\n              isAuto,\n              status: \"success\",\n            }),\n          };\n          sendMessageToAIRoom(newMessage);\n        } else {\n          sendErrorMessage(newMessage, message, isAuto);\n        }\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n        sendErrorMessage(newMessage, message, isAuto);\n      });\n  };\n  reader.readAsDataURL(blob);\n}\n\nexport function canSummarize(message: ApiMessage) {\n  const { photo, document, webPage, voice, audio, text, video } =\n    message?.content;\n  const isUrl = checkIsUrl(text?.text);\n  const hasText = text?.text && text.text.trim() !== \"\";\n\n  return photo || document || (webPage && !hasText) || voice || audio || isUrl || video;\n}\n\nexport function isHasUrl(text?: string) {\n  const urls = extractUrls(text);\n  const hasUrl = urls.length > 0;\n\n  return hasUrl;\n}\n\nexport function checkIsUrl(text?: string) {\n  return (\n    typeof text === \"string\" &&\n    /^https?:\\/\\/[\\w\\-._~:/?#[\\]@!$&'()*+,;=%]+$/i.test(text)\n  );\n}\n\nexport function checkIsImage(mimeType: string) {\n  return mimeType.startsWith(\"image/\");\n}\n\nasync function sendErrorMessage(\n  newMessage: StoreMessage,\n  message: ApiMessage,\n  isAuto: boolean\n) {\n  newMessage = {\n    ...newMessage,\n    content: JSON.stringify({\n      message,\n      isAuto,\n      status: \"error\",\n    }),\n  };\n  await sendMessageToAIRoom(newMessage);\n}\n\nexport function getAutoTransLang() {\n  const global = getGlobal();\n  const { autoTranslateLanguage = \"en\" } = global.settings.byKey;\n\n  return (\n    new Intl.DisplayNames([autoTranslateLanguage], { type: \"language\" }).of(\n      autoTranslateLanguage\n    ) || \"en\"\n  );\n}\n\nexport function extractUrls(text?: string): string[] {\n  if (typeof text !== \"string\") return [];\n\n  const urlRegex = /https?:\\/\\/[\\w\\-._~:/?#[\\]@!$&'()*+,;=%]+/gi;\n  return text.match(urlRegex) || [];\n}\n\nexport function checkIsVideo(mimeType: string) {\n  return ['video/mp4'].indexOf(mimeType) >= 0;\n}\n","import type { ApiMessage } from '../../../api/types';\n\n// eslint-disable-next-line import/no-cycle\nimport {\n  audioSummary, checkIsUrl, documentSummary, replyToMention, videoSummary, voiceToAudioSummary, webPageSummary,\n} from '../utils/ai-analyse-message';\n\nclass RoomAIMessageListener {\n  public static messageListener(message: ApiMessage) {\n    const {\n      webPage, photo, video, audio, voice, document, text,\n    } = message.content;\n    const isUrl = checkIsUrl(text?.text);\n\n    if (message.isMentioned) {\n      replyToMention(message, true);\n    } else if ((webPage && !text?.text) || isUrl) {\n      webPageSummary(message, true);\n    } else if (photo) {\n      // photoSummary(message, true);\n    } else if (voice) {\n      voiceToAudioSummary(message, true);\n    } else if (audio) {\n      audioSummary(message, true);\n    } else if (document) {\n      documentSummary(message, true);\n    } else if (video) {\n      videoSummary(message, true);\n    }\n  }\n}\n\nexport default RoomAIMessageListener;\n"],"names":["pdfjsLib","workerSrc","mammoth","require","async","replyToMention","message","isAuto","isMentioned","content","text","newMessage","chatId","timestamp","Date","getTime","id","uuidv4","createdAt","role","annotations","type","JSON","stringify","messageId","status","sendMessageToAIRoom","mentionReply","language","getAutoTransLang","then","response","replys","sendErrorMessage","catch","err","console","log","photoSummary","photo","mediaHash","getMediaHash","handleImageToSummaryText","mimeType","webPageSummary","webPage","url","webPageAISummary","summaryInfo","documentSummary","document","checkIsImage","indexOf","handleAudioToSummaryText","filename","fileName","size","mediaLoader","blobUrl","fetch","blob","arrayBuffer","TextDecoder","decode","extractRawText","value","pdf","data","promise","pdfText","i","numPages","page","getPage","getTextContent","items","map","item","str","join","documentAISummary","voiceToAudioSummary","voice","maxBase64Length","Math","floor","audio","showMessage","info","audioSummary","videoSummary","video","ChataiStores","storeMessage","eventEmitter","emit","Actions","AddRoomAIMessage","errorMsg","formData","FormData","append","summaryResponse","audioAISummary","reader","FileReader","onloadend","base64Data","result","toString","split","imageAISummary","image","readAsDataURL","canSummarize","isUrl","checkIsUrl","hasText","trim","test","startsWith","global","getGlobal","autoTranslateLanguage","settings","byKey","Intl","DisplayNames","of","messageListener"],"sourceRoot":""}