{"version":3,"file":"7768.b032fd1806cd9f7c1ed5.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://telegram-t/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/ai-chatfolders-tip.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-assistant.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-action-button.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/chatAssistant/multi-input.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-prompt.ts","webpack://telegram-t/./src/components/chatAssistant/rightPanel/selected-chats.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-header-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/urgent-notification.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.module.scss?0359","webpack://telegram-t/./src/components/chatAssistant/globalSummary/GlobalSummaryWrapper.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-utils.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.module.scss?b744","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  // add user to db\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  users.forEach((user) => {\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import React, { FC, memo, useState } from \"../../../lib/teact/teact\";\nimport AiChatFoldersBg from \"../../../assets/chat_ai_folder.png\";\nimport AiChatFoldersDarkBg from \"../../../assets/chat_ai_folder_dark.png\";\nimport AiChatFoldersBtnBg from \"../../../assets/chat_ai_folder_border.png\";\nimport Icon from \"../../common/icons/Icon\";\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from \"../store\";\nimport { getActions, withGlobal } from \"../../../global\";\nimport { aiChatFoldersTask } from \"../ai-task/ai-chatfolders-task\";\nimport { message } from \"antd\";\nimport { SVGProps } from \"react\";\nimport { selectTheme } from \"../../../global/selectors\";\nimport { ThemeKey } from \"../../../types\";\nimport Spinner from \"../../ui/Spinner\";\nimport \"./ai-chatfolders-tip.scss\";\nimport Button from \"../../ui/Button\";\n\ntype OwnProps = {\n  theme?: ThemeKey;\n  onClose?: () => void;\n};\nconst AIChatFoldersTip: FC<OwnProps> = ({ theme, onClose }: OwnProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  function onCloseClick() {\n    message.open({\n      content:\n        \"You can enable this feature later in the settings page if needed.\",\n      icon: null,\n      className: \"aichatfolders-tip-message\",\n    });\n    ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n    onClose?.();\n  }\n\n  async function onApply() {\n    if (loading) return;\n    const { setSharedSettingOption } = getActions();\n\n    setSharedSettingOption({ aiChatFolders: true });\n    setLoading(true);\n    await aiChatFoldersTask.classifyChatMessageByCount();\n    setLoading(false);\n\n    onCloseClick();\n  }\n\n  return (\n    <div\n      className=\"py-2 flex flex-row items-center relative px-3 gap-3\"\n      style={`background-image: url(${\n        theme === \"dark\" ? AiChatFoldersDarkBg : AiChatFoldersBg\n      }); background-size: 100% 100%;`}\n    >\n      <div className=\"text-[var(--color-aichatfolders-tag-text)]\">\n        <AIChatFolderIcon />\n      </div>\n      <div className=\"leading-[16px] text-[13px] text-[var(--color-aichatfolders-tag-text)]\">\n        Your chat has been intelligently tagged in folders by Serena AI\n      </div>\n      <Button\n        color=\"translucent\"\n        className=\"w-[46px] h-[24px] mr-3 rounded-[28px] cursor-pointer hover:opacity-80\"\n        style={`background-image: url(${AiChatFoldersBtnBg}); background-size: 100% 100%; text-transform: none; color: #000;`}\n        onClick={onApply}\n      >\n        {loading ? (\n          <Spinner\n            className=\"w-[12px] h-[12px]\"\n            color={theme === \"dark\" ? \"white\" : \"black\"}\n          />\n        ) : (\n          <div className=\"text-[var(--color-aichatfolders-tag-text)] text-[12px]\">\n            Apply\n          </div>\n        )}\n      </Button>\n      <div className=\"absolute right-2 top-1\">\n        {!loading && (\n          <Icon\n            name=\"close\"\n            className=\"text-[var(--color-aichatfolders-tag-close-color)] cursor-pointer hover:opacity-50\"\n            style=\"width:6px;height:6px\"\n            onClick={onCloseClick}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global) => {\n    return {\n      theme: selectTheme(global),\n    };\n  })(AIChatFoldersTip)\n);\n\nconst AIChatFolderIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={21}\n    height={21}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M13.375 7.625 9.54 6.187l3.834-1.439L14.812.917l1.44 3.831 3.831 1.44-3.832 1.437-1.439 3.833-1.437-3.833ZM5.708 15.29.917 13.375l4.791-1.917 1.917-4.792 1.916 4.792 4.792 1.917-4.792 1.916-1.916 4.792-1.917-4.791Z\"\n    />\n  </svg>\n);\n","import { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport Icon from \"../../common/icons/Icon\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID, PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal'\nimport useFlag from \"../../../hooks/useFlag\"\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG } from \"../../chatAssistant/store\"\nimport { filterAITag, filterPresetTag } from \"../../chatAssistant/ai-chatfolders/tag-filter\"\nimport AIChatFoldersTip from \"../../chatAssistant/ai-chatfolders/ai-chatfolders-tip\"\nimport ActiveTag from \"../../chatAssistant/ai-chatfolders/active-tag\"\nimport { selectSharedSettings } from \"../../../global/selectors/sharedState\"\nimport { filterAIFolder } from \"../../chatAssistant/ai-chatfolders/util\"\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([])\n  const [activeAITag, setActiveAITag] = useState<string[]>([])\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById)\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID &&\n          !chatFolders.find(o => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID &&\n          !chatFolders.find(o => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID &&\n          !chatFolders.find(o => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, JSON.stringify(orderedFolderIds), presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect, activePresetTag, filterPresetTag,\n    activeAITag, filterAITag\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal()\n    } else {\n      closeRenderPresetTagModal()\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(()=>{\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res)=>{\n      setActivePresetTag(res ?? [])\n    })\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res)=>{\n      setActiveAITag(res ?? [])\n    })\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res)=>{\n      res === false ? closeRenderAiChatFoldersTip() : openRenderAiChatFoldersTip()\n    })\n  }, [])\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)?.find(({ id }) => id === folderTabs?.[activeChatFolder]?.id);\n    const isFolder = activeFolder && !isInAllChatsFolder && !isInPresetFolder && !isInPresetFolder && !isInAIFolder;\n    const folderType = getFolderType();\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : folderType}\n        folderId={isFolder ? activeFolder?.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) :[]}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && <AIChatFoldersTip onClose={closeRenderAiChatFoldersTip} />}\n      {shouldRenderFolders && shouldRenderPresetTagModal && <PresetTagModal\n        activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n        setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        isOpen={shouldRenderPresetTagModal}\n        onClose={closeRenderPresetTagModal}\n        folderId={folderTabs![activeChatFolder].id}\n      />}\n      {shouldRenderFolders && <ActiveTag\n        folderType={getFolderType()}\n        tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n        setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n      />}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: account.emojiStatusId,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","/* eslint-disable max-len */\nimport { Modal } from 'antd';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { deleteAiChatFolders, sortChatFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSwitchAIChatFolders = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          // delete ai chat folders\n          await deleteAiChatFolders();\n          // await sortChatFolder();\n          setSharedSettingOption({ aiChatFolders: isOpen });\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      aiChatFoldersTask.classifyChatMessageByCount();\n    }\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('AI Knowledge Base')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className=\"Switcher no-animation\" title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent:GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?:boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setSharedSettingOption,\n    setGlobalSearchDate,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        {hasMenu ? (\n          <img src={AIMenuIcon} alt=\"ai-menu\" style={buildStyle('width: 24px;height: 24px;')} />\n        ) : (\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        )}\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <>\n            <SearchInput\n              inputId=\"telegram-search-input\"\n              resultsItemSelector=\".LeftSearch .ListItem-button\"\n              className={buildClassName(\n                (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n                shouldHideSearch && 'SearchInput--hidden',\n              )}\n              withAIIcon\n              value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n              focused={isSearchFocused}\n              isLoading={isLoading || connectionStatusPosition === 'minimized'}\n              spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n              spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n              placeholder={searchInputPlaceholder}\n              autoComplete=\"off\"\n              canClose={Boolean(globalSearchChatId || searchDate)}\n              onChange={onSearchQuery}\n              onReset={onReset}\n              onFocus={handleSearchFocus}\n              onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            >\n              {searchContent}\n              <StoryToggler\n                canShow={withStoryToggler}\n              />\n            </SearchInput>\n          </>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AIKonwledge);\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AITranslate);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport type { StoreMessage } from '../store/messages-store';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { selectChat, selectChatLastMessageId } from '../../../global/selectors';\nimport { ChataiStores } from '../store';\nimport { summaryMessage } from '../utils/chat-api';\nimport { fetchChatMessageByOffsetId, formateMessage2Summary } from '../utils/fetch-messages';\n\nclass RoomAIAssistant {\n  static get global() {\n    return getGlobal();\n  }\n\n  public static getRoomLastFocusTime(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)[chatId]?.lastFocusTime || 0 : 0;\n  }\n\n  public static getRoomLastSummaryId(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)[chatId]?.lastSummaryId || 0 : 0;\n  }\n\n  public static getRoomUnreadCount(chatId: string) {\n    const chat = selectChat(this.global, chatId);\n    return chat ? chat.unreadCount || 0 : 0;\n  }\n\n  public static getRoomAIUnreadCount(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)?.[chatId]?.unreadCount || 0 : 0;\n  }\n\n  public static updateRoomAIData(chatId: string, type:string, value:any) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    const parsedData = roomAIData ? JSON.parse(roomAIData) : {};\n    const currentData = parsedData[chatId] || {};\n    currentData[type] = value;\n    parsedData[chatId] = currentData;\n    localStorage.setItem('room-ai-data', JSON.stringify(parsedData));\n    if (type === 'unreadCount') {\n      eventEmitter.emit(Actions.UpdateRoomAIUnreadCount, { chatId, count: value });\n    }\n  }\n\n  public static increaseUnreadCount(chatId: string) {\n    const count = this.getRoomAIUnreadCount(chatId) + 1;\n    this.updateRoomAIData(chatId, 'unreadCount', count);\n    eventEmitter.emit(Actions.UpdateRoomAIUnreadCount, { chatId, count });\n  }\n\n  public static async summary(chatId: string) {\n    const { autoTranslateLanguage = 'en' } = this.global.settings.byKey;\n    const lastFocusTime = RoomAIAssistant.getRoomLastFocusTime(chatId);\n    const lastSummaryId = RoomAIAssistant.getRoomLastSummaryId(chatId);\n    const unreadCount = RoomAIAssistant.getRoomUnreadCount(chatId);\n    const lastMessageId = selectChatLastMessageId(this.global, chatId, 'all') || 0;\n    if (unreadCount > 5 && lastMessageId - lastSummaryId > 5 && lastFocusTime < Date.now() - 1000 * 60 * 5) {\n      // eslint-disable-next-line no-console\n      console.log('开始总结');\n      const chat = selectChat(this.global, chatId);\n      const summaryCount = Math.max(unreadCount, 20);\n      if (chat) {\n        const messages = await fetchChatMessageByOffsetId({\n          chat,\n          offsetId: lastMessageId,\n          addOffset: -1,\n          sliceSize: 20,\n          threadId: MAIN_THREAD_ID,\n          maxCount: summaryCount,\n        });\n        const formateMessages = formateMessage2Summary(messages);\n        if (!formateMessages.length) return;\n        const summaryInfo = {\n          summaryTime: new Date().getTime(),\n          messageCount: formateMessages.length,\n          userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n        };\n        summaryMessage({\n          messages: formateMessages,\n          language: new Intl.DisplayNames([autoTranslateLanguage], { type: 'language' }).of(autoTranslateLanguage),\n        }).then((res:any) => {\n          const content = {\n            ...res.data,\n            summaryInfo,\n          };\n          const newMessage = {\n            chatId,\n            timestamp: new Date().getTime(),\n            content: JSON.stringify(content),\n            id: uuidv4(),\n            createdAt: new Date(),\n            role: 'assistant',\n            annotations: [{\n              type: 'room-summary',\n            }],\n          };\n          ChataiStores.message?.storeMessage(newMessage as StoreMessage);\n          eventEmitter.emit(Actions.AddRoomAIMessage, newMessage);\n          this.increaseUnreadCount(chatId);\n        });\n      }\n    }\n    this.updateRoomAIData(chatId, 'lastFocusTime', new Date().getTime());\n  }\n}\n\nexport default RoomAIAssistant;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomAIAssistant from './room-ai-assistant';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport './room-ai.scss';\n\nimport SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIActionButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const onClick = useLastCallback(() => {\n    openChatAIWithInfo({ chatId });\n    RoomAIAssistant.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  });\n  const updateUnreadCount = useLastCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  });\n  useEffect(() => {\n    const count = RoomAIAssistant.getRoomAIUnreadCount(chatId);\n    setUnreadCount(count);\n    RoomAIAssistant.summary(chatId);\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    };\n  }, [chatId, updateUnreadCount]);\n  return (\n    <div className=\"room-ai-floating-button\">\n      <Button\n        color=\"translucent\"\n        round\n        onClick={onClick}\n      >\n        <img className=\"w-[60px] h-[60px]\" src={SerenaLogoPath} alt=\"\" />\n      </Button>\n      {unreadCount > 0 && (\n        <div className=\"room-ai-floating-button-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIActionButton;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { Button } from './component/button';\nimport { Textarea } from './component/textarea';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <Textarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { Form, Input, Switch } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport { ChataiStores } from '../store';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst { TextArea } = Input;\n\nconst AddTopicPanel = () => {\n  const [form] = Form.useForm();\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const initialValues:UrgentTopic = drawerParams || {\n    id: uuidv4(),\n    topicName: '',\n    topicDescription: '',\n    strongAlert: false,\n    phoneNumber: '',\n  };\n  const [strongAlert, setStrongAlert] = useState(drawerParams?.strongAlert || false);\n  const strongAlertChange = (checked:boolean) => {\n    setStrongAlert(checked);\n  };\n  const updateAllTopicPhoneNumber = async (phoneNumber:string) => {\n    const allTopics = await ChataiStores.urgentTopic?.getAllUrgentTopic();\n    allTopics?.map((topic) => {\n      if (topic.phoneNumber) {\n        topic.phoneNumber = phoneNumber;\n      }\n      return topic;\n    });\n    return ChataiStores.urgentTopic?.addUrgentTopics(allTopics || []);\n  };\n  const handleSave = useCallback(() => {\n    form.validateFields().then(async (values) => {\n      console.log('values', values);\n      const topicId = drawerParams?.id || uuidv4();\n      await ChataiStores.urgentTopic?.addUrgentTopic({ id: topicId, ...values });\n      if (values.phoneNumber) {\n        await updateAllTopicPhoneNumber(values.phoneNumber);\n        console.log(3333);\n      }\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: '2',\n      });\n    }).catch((errorInfo) => {\n      console.log('errorInfo', errorInfo);\n    });\n  }, [drawerParams?.id, form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: '2',\n    });\n  }, [openDrawer]);\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and content descriptions for which you need alerts. When a message contains these contents, an alert will be triggered.\n        </div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={initialValues}\n        >\n          <Form.Item label=\"Topic name\" name=\"topicName\" rules={[{ required: true, message: 'Please enter topic name' }]}>\n            <Input className=\"bg-[var(--color-chat-hover)]\" placeholder=\"Please enter the content topics\" />\n          </Form.Item>\n          <Form.Item label=\"Topic description\" name=\"topicDescription\" rules={[{ required: true, message: 'Please enter topic description' }]}>\n            <TextArea\n              className=\"bg-[var(--color-chat-hover)]\"\n              placeholder=\"Please describe the specific content or keywords that should trigger an alert. For example, if 'Vitalik' + 'ETH' + 'sell' appear, please notify me.\"\n            />\n          </Form.Item>\n          <div className=\"mb-[24px]\">\n            <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n              <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n              <Form.Item name=\"strongAlert\" valuePropName=\"checked\" noStyle>\n                <Switch onChange={strongAlertChange} />\n              </Form.Item>\n            </div>\n            <span className=\"text-[14px] text-[#767676]\">\n              Once enabled, these types of messages will trigger a phone alert.\n            </span>\n          </div>\n          {strongAlert && (\n            <Form.Item label=\"Phone number\" name=\"phoneNumber\" rules={[{ required: true, message: 'Please enter phone number' }]}>\n              <Input />\n            </Form.Item>\n          )}\n        </Form>\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const {\n    currentUserId,\n  } = global;\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n  const lang = useOldLang();\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <Checkbox value={id}>\n        <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n          <Avatar\n            peer={peer}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n          <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)]\">\n            <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n            <div>{subtitle}</div>\n          </div>\n        </div>\n      </Checkbox>\n    );\n  };\n  const onChange = useCallback((checkedValues: string[]) => {\n    console.log('checked = ', checkedValues);\n    setSelected(checkedValues);\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    drawerParams?.onCancel();\n  }, [drawerParams]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group onChange={onChange} value={selected}>\n          <div className=\"flex flex-col gap-[12px]\">\n            {ids.map((id) => renderChatItem(id))}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto pb-[24px] pt-[12px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { Form, Input } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ChataiStores } from '../store';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst { TextArea } = Input;\nconst CustomizationPromptPanel = () => {\n  const { openDrawer } = useDrawerStore();\n  const [form] = Form.useForm();\n  const handleSave = useCallback(() => {\n    form.validateFields().then(async (values) => {\n      await ChataiStores.summaryTemplate?.addSummaryTemplate({\n        id: uuidv4(),\n        ...values,\n      });\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: '1',\n      });\n    }).catch((errorInfo) => {\n      // eslint-disable-next-line no-console\n      console.log('errorInfo', errorInfo);\n    });\n  }, [form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: '1',\n    });\n  }, [openDrawer]);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">Please enter the specific topic you want to summarize accurately and add a detailed description. The message summary service will show the content as per your needs.</p>\n      <Form\n        form={form}\n        layout=\"vertical\"\n      >\n        <Form.Item label=\"Topic name\" name=\"title\" rules={[{ required: true, message: 'Please enter topic name' }]}>\n          <Input className=\"bg-[var(--color-chat-hover)]\" placeholder=\"Primary Subject\" />\n        </Form.Item>\n        <Form.Item label=\"Topic description\" name=\"prompt\" rules={[{ required: true, message: 'Please enter topic description' }]}>\n          <TextArea\n            className=\"bg-[var(--color-chat-hover)]\"\n            placeholder=\"Content description\"\n          />\n        </Form.Item>\n      </Form>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const name = peer ? (peer?.firstName || '') + (peer?.lastName || '') : '';\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          <ChatAvatar chatId={chatId} size={34} />\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {name}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Serena AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\nconst defaultSummaryPrompt = `\n            你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n            总结规则:\n            # 格式要求\n                ## 去除所有换行符,确保 JSON 结构紧凑\n                ## 代码块应使用 Markdown 代码块包裹\n                ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n                ## 严格遵从JSON规范,确保所有的JSON数据正确\n                ## 示例格式:\n                    \\`\\`\\`json\n                        <!-- json-start: {模板类型} -->\n                             {JSON数据}\n                        <!-- json-end -->\n                    \\`\\`\\`\n            # 分类插入 JSON 数据\n                ## main-topic:填充主要讨论的话题\n                ## pending-matters:填充待处理事项\n                ## garbage-message:填充无用或垃圾消息\n            # 数据字段解析\n                ## chatId:房间的唯一标识符\n                ## chatTitle:房间的标题\n                ## senderName:消息发送者的名字\n                ## messageId:消息的唯一标识符\n                ## content:消息的内容\n            # 数据格式\n                ## main-topic(主要话题模板)\n                    [\n                        {\n                            \"title\": \"主话题\",\n                            \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                            \"summaryItems\": [\n                                {\n                                    \"subtitle\": \"子话题/讨论点\",\n                                    \"relevantMessages\": [\n                                        {\n                                            \"chatId\": \"房间ID\",\n                                            \"messageIds\": [消息ID1, 消息ID2, ...]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                ## pending-matters(待处理事项模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"待处理内容摘要\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n                ## garbage-message(垃圾消息模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"垃圾信息摘要\",\n                            \"level\": \"high/low\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n            # main-topic(主要话题)总结标准\n                ## 总结的JSON是一个数组\n                ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n                ## topic 总结主要的话题\n                ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n                ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n                ## 校验总结的JSON数据结构是否正确,完整\n            # pending-matters(待处理事项)总结标准\n                ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n                ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n                ## 结合BERT模型进行意图识别,准确识别任务指派场景\n                ## 自动关联历史待办事项,避免重复记录\n            # garbage-message(垃圾消息)判定标准:\n                ## 仅处理 chatType=private 的消息\n                ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n                ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n           \n            # 总结消息偏好:\n                ## 过滤所有的无意义消息；\n                ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n                ## 为保证输出内容的完整性,尽量精简总结内容；\n                ## 主话题不超过5个,子话题总数不超过15个\n            # 总结语言风格\n                ## 使用英文进行总结\n        `;\nconst CustomizationDataTemplate = `\n    # customization-topic(自定义话题模板)\n         [\n            {\n                \"title\": \"一级标题\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"二级标题/讨论点\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst coinsPrompt = `\n    ## 指令要求\n        1. 按总提及量降序排列,仅展示前3种加密货币(不足3个则显示实际数量)\n        2. 每种货币需包含：\n            - 标准化货币符号（示例：$BTC / $ETH)\n            - 总提及次数统计\n            - 关联讨论主题分类\n            - 关键消息摘要(含消息ID溯源)\n        3. 对提及加密货币的消息内容进行总结,保留核心观点\n    ## 示例输出\n         [\n            {\n                \"title\": \"$BTC\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"分析师认为2024减半将推动价格突破7万美元\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst activeUserPrompt = `\n    ## 指令要求\n        - 提取发言次数最多的前3个人(不足3人则提取实际数量)\n        - 按发言次数排序\n        - title填充对应的senderName(发言次数)\n        - subtitle 发言的内容摘要。\n`;\nconst keyBusinessPrompt = `\n    ## 目标:从聊天消息中提取与业务或产品更新相关的内容，重点关注以下信息\n        - 重大项目成功：团队或公司取得的重要成果或目标达成。\n        - 产品发布：新产品的上线或推出。\n        - 产品更新：现有产品的功能改进、版本升级或其他更新内容。\n    ## 信息提取要求：\n        - 提取消息中与业务/产品相关的核心内容，去除无关细节。\n        - 确保总结内容完整，包含关键信息(如项目名称、产品名称、更新内容、时间等)。\n`;\nconst chainTrendingPrompt = `\n    ## 目标：请从提供的聊天信息中筛选并提炼出与链上相关的热门话题。\n        - 重点关注涉及区块链技术发展、加密货币市场动态、去中心化应用(DApps)创新以及链上重大事件等方面的内容。\n    ## 信息提取要求：\n        - 请以清晰、简洁的方式呈现总结结果，每个热点话题需简要描述其核心要点。\n        - 按讨论频率排序,提取讨论最多的前3个热点(不足3个则显示实际数量)。\n`;\nexport const CustomizationTemplates = [\n  {\n    id: '5b8f8976-e07e-4372-b34d-e3e6d8bbaf88',\n    title: 'Most Discussed Coins',\n    prompt: coinsPrompt,\n  },\n  {\n    id: '9552310a-d8ff-43ac-8f61-6233fe1a3bca',\n    title: 'Most Active Users',\n    prompt: activeUserPrompt,\n  },\n  {\n    id: 'b0f0e9a8-c5d4-4e0f-b9c6-f8a8d8b9a8c8',\n    title: 'Key business updates',\n    prompt: keyBusinessPrompt,\n  },\n  {\n    id: 'fa303579-1c78-4be6-8792-bdf539482608',\n    title: 'On-Chain Trending Topics',\n    prompt: chainTrendingPrompt,\n  },\n];\n\nexport const getGlobalSummaryPrompt = (language = 'en', definePrompt = '') => {\n  const template = `\n    你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n    总结规则:\n    # 格式要求\n        ## 去除所有换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 严格遵从JSON规范,确保所有的JSON数据正确\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start: {模板类型} -->\n                     {JSON数据}\n                <!-- json-end -->\n            \\`\\`\\`\n    # 分类插入 JSON 数据\n        ## customization-topic:自定义话题总结\n        ## main-topic:填充主要讨论的话题\n        ## pending-matters:填充待处理事项\n        ## garbage-message:填充无用或垃圾消息\n    # 数据字段解析\n        ## chatId:房间的唯一标识符\n        ## chatTitle:房间的标题\n        ## senderName:消息发送者的名字\n        ## messageId:消息的唯一标识符\n        ## content:消息的内容\n    # 数据格式\n        ${definePrompt ? CustomizationDataTemplate : ''}\n        ## main-topic(主要话题模板)\n            [\n                {\n                    \"title\": \"主话题\",\n                    \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                    \"summaryItems\": [\n                        {\n                            \"subtitle\": \"子话题/讨论点\",\n                            \"relevantMessages\": [\n                                {\n                                    \"chatId\": \"房间ID\",\n                                    \"messageIds\": [消息ID1, 消息ID2, ...]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        ## pending-matters(待处理事项模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"待处理内容摘要\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n        ## garbage-message(垃圾消息模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"垃圾信息摘要\",\n                    \"level\": \"high/low\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n    ${definePrompt ? `\n        # customization-topic(自定义话题模板)总结标准\n        ${definePrompt}\n        ` : ''}\n    # main-topic(主要话题)总结标准\n        ## 总结的JSON是一个数组\n        ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n        ## topic 总结主要的话题\n        ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n        ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n        ## 校验总结的JSON数据结构是否正确,完整\n    # pending-matters(待处理事项)总结标准\n        ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n        ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n        ## 结合BERT模型进行意图识别,准确识别任务指派场景\n        ## 自动关联历史待办事项,避免重复记录\n    # garbage-message(垃圾消息)判定标准:\n        ## 仅处理 chatType=private 的消息\n        ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n        ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n   \n    # 总结消息偏好:\n        ## 过滤所有的无意义消息；\n        ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n        ## 为保证输出内容的完整性,尽量精简总结内容；\n        ## 主话题不超过5个,子话题总数不超过15个\n    # 总结语言风格\n        ## 使用${language}语言进行总结\n`;\n  return template;\n};\nexport default defaultSummaryPrompt;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './selected-chats.scss';\n\ninterface Props {\n  selected: string[];\n  onOpenChatSelect:() => void;\n  onDelete: (id: string) => void;\n}\nexport const SelectedChats = (props: Props) => {\n  const { onOpenChatSelect, selected, onDelete } = props;\n  const lang = useOldLang();\n  const global = getGlobal();\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n        <Icon\n          name=\"delete\"\n          className=\"chat-picker-del ml-auto cursor-pointer text-[18px] text-[#FF4D4F]\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => { onDelete(id); }}\n        />\n      </div>\n    );\n  };\n  return (\n    <div className=\"mt-[40px]\">\n      <h3 className=\"text-[18px] font-semibold\">Which chats do you care about？</h3>\n      <div\n        className=\"chat-picker-item flex cursor-pointer items-center gap-[8px] py-[10px] rounded-[12px]\"\n        onClick={onOpenChatSelect}\n      >\n        <div\n          className=\"flex items-center justify-center w-[40px] h-[40px] rounded-full bg-[#8C42F0] text-white\"\n        >\n          <Icon name=\"add\" />\n        </div>\n        <span>Add Chats</span>\n      </div>\n      {selected.length > 0 && (\n        <>\n          {selected.map((id) => renderChatItem(id))}\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport cx from 'classnames';\n\nimport type { CustomSummaryTemplate } from '../store/chatai-summary-template-store';\n\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { CustomizationTemplates } from '../globalSummary/summary-prompt';\nimport { CloseIcon } from '../icons';\nimport { ChataiStores } from '../store';\nimport { SUMMARY_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './surmarize-tab.scss';\n\nconst SummarizeTab = () => {\n  const [userDefinedTemplate, setUserDefinedTemplate] = useState<CustomSummaryTemplate[]>([]);\n  const [lastTemplate, setLastTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [currentTemplate, setCurrentTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.summaryTemplate?.getAllSummaryTemplate().then((res) => {\n      setUserDefinedTemplate(res || []);\n    });\n    ChataiStores.general?.get('lastDefinedPrompt').then((res) => {\n      if (res) {\n        setLastTemplate(res);\n        setCurrentTemplate(res);\n      }\n    });\n    ChataiStores.general?.get(SUMMARY_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n  const actionsVisable = useMemo(() => {\n    // eslint-disable-next-line no-console\n    console.log('currentTemplate', currentTemplate);\n    // eslint-disable-next-line no-console\n    console.log('lastTemplate', lastTemplate);\n    return currentTemplate && currentTemplate?.id !== lastTemplate?.id;\n  }, [currentTemplate, lastTemplate]);\n  const handleCustomization = useCallback(() => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  }, [openDrawer]);\n  const handleTemplateSelect = useCallback((item: CustomSummaryTemplate) => {\n    setCurrentTemplate(item);\n  }, []);\n  const handleCancel = useCallback(() => {\n    setCurrentTemplate(lastTemplate);\n  }, [lastTemplate]);\n  const handleSave = useCallback(() => {\n    ChataiStores.general?.set('lastDefinedPrompt', currentTemplate);\n    setLastTemplate(currentTemplate);\n    globalSummaryTask.updateSummaryDefineTemplate(currentTemplate);\n  }, [currentTemplate]);\n  const handleDelete = useCallback((e: React.MouseEvent<HTMLDivElement>, id: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    ChataiStores.summaryTemplate?.deleteSummaryTemplate(id).then(() => {\n      setUserDefinedTemplate((prev) => {\n        return prev.filter((item) => item.id !== id);\n      });\n    });\n    if (id === lastTemplate?.id) {\n      ChataiStores.general?.delete('lastDefinedPrompt').then(() => {\n        setLastTemplate(undefined);\n      });\n    }\n    if (id === currentTemplate?.id) {\n      setCurrentTemplate(undefined);\n    }\n  }, [lastTemplate?.id, currentTemplate?.id]);\n  const handleOpenChatSelect = useCallback(async () => {\n    const selected = await ChataiStores.general?.get(SUMMARY_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats: selected,\n      onSave: (chats:string[]) => {\n        ChataiStores.general?.set(SUMMARY_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '1',\n        });\n        globalSummaryTask.updateSummaryChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '1',\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handleDeleteSummaryChat = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(SUMMARY_CHATS, newSelected);\n    globalSummaryTask.updateSummaryChats(newSelected);\n    setSelectedChats(newSelected);\n  }, [selectedChats]);\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text)\">What are you curious about?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {CustomizationTemplates.map((item) => {\n            return (\n              <div\n                key={item.title}\n                onClick={() => handleTemplateSelect(item)}\n                className={cx('w-fit px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[var(--color-text)]', {\n                  'bg-[#B297FF] text-white': currentTemplate?.id === item.id,\n                })}\n              >\n                {item.title}\n              </div>\n            );\n          })}\n          {userDefinedTemplate.length > 0 && (\n            userDefinedTemplate.map((item) => {\n              return (\n                <div\n                  key={item.title}\n                  onClick={() => handleTemplateSelect(item)}\n                  className={cx('prompt-template-item w-fit px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer flex items-center gap-[8px]', {\n                    'bg-[#B297FF]': currentTemplate?.title === item.title,\n                  })}\n                >\n                  <span>{item.title}</span>\n                  <div\n                    className=\"delete-icon w-[20px] h-[20px] cursor-pointer flex items-center justify-center\"\n                    onClick={(e) => handleDelete(e, item.id)}\n                  >\n                    <CloseIcon />\n                  </div>\n                </div>\n              );\n            })\n          )}\n          <div\n            className=\"w-[144px] whitespace-nowrap px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[#8C42F0] font-medium\"\n            onClick={handleCustomization}\n          >\n            + Customization\n          </div>\n        </div>\n        <SelectedChats\n          onOpenChatSelect={handleOpenChatSelect}\n          selected={selectedChats}\n          onDelete={handleDeleteSummaryChat}\n        />\n      </div>\n      {actionsVisable ? (\n        <div className=\"flex flex-row justify-center gap-[14px] py-[24px] w-full z-10 bg-white absolute bottom-0 left-0\">\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n            onClick={handleCancel}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n            onClick={handleSave}\n          >\n            Save\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { ChataiStores } from '../store';\nimport { URGENT_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: UrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topicName}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[#8C42F0] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>Add Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const [topics, setTopics] = useState<UrgentTopic[]>([]);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.urgentTopic?.getAllUrgentTopic().then((topics) => {\n      console.log('topics', topics);\n      setTopics(topics);\n    });\n    ChataiStores.general?.get(URGENT_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(URGENT_CHATS, newSelected);\n    setSelectedChats(newSelected);\n    urgentCheckTask.updateUrgentChats(newSelected);\n  }, [selectedChats]);\n\n  const handleOpenChatSelect = useCallback(async () => {\n    const selectedChats = await ChataiStores.general?.get(URGENT_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats,\n      onSave: (chats: string[]) => {\n        ChataiStores.general?.set(URGENT_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '2',\n        });\n        urgentCheckTask.updateUrgentChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '2',\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handeleDeleteTopic = (id:string) => {\n    ChataiStores.urgentTopic?.deleteUrgentTopic(id);\n    setTopics(topics.filter((t) => t.id !== id));\n  };\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          <AddTopic />\n        </div>\n      </div>\n      <SelectedChats\n        onOpenChatSelect={handleOpenChatSelect}\n        selected={selectedChats}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\nimport type { TabsProps } from 'antd';\nimport { Tabs } from 'antd';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [activeKey, setActiveKey] = useState(drawerParams?.activeKey || '1');\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'Summarize',\n      children: <SummarizeTab />,\n    },\n    {\n      key: '2',\n      label: 'Urgent Alert',\n      children: <UrgentAlertTab />,\n    },\n  ];\n  const onChange = (key: string) => {\n    console.log(key);\n    setActiveKey(key);\n  };\n  return (\n    <Tabs\n      className=\"personalized-settings-tab h-full\"\n      defaultActiveKey={activeKey}\n      items={items}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport { CloseIcon, LeftOutlined } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[44px] h-[44px] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: drawerKey === DrawerKey.CustomizationPrompt ? '1' : '2',\n    });\n  }, [drawerKey, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Customization');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<LeftOutlined size={24} />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<CloseIcon size={24} />} onClick={onClose} />\n      )}\n      <div className=\"text-[16px] font-semibold pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// import type { Dispatch, SetStateAction } from 'react';\nimport React, {\n  forwardRef,\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport { ChataiStores } from '../store';\nimport { parseMessage2SummaryStoreMessage, parseSummaryStoreMessage2Message, type SummaryStoreMessage } from '../store/summary-store';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = forwardRef(() => {\n  const { mutate } = useSWRConfig();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n    onFinish: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, setMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 10)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage, setMessages]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n\n  const handleInputSubmit = useCallback((value:string) => {\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n    mutate('messages:should-scroll', 'smooth');\n  }, [append, mutate]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 500);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={buildClassName(styles.globaSummaryBg, 'flex flex-col w-full h-full flex-1')}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Serena\" />\n            <span className=\"text-[15px] font-semibold\">Serena AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={messages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n});\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mJJD2lw1\"};","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { selectChat } from '../../../global/selectors';\nimport GlobalSummary from './global-summary';\n\nconst injectMessageAI = injectComponent(GlobalSummary);\nconst GlobalSummaryWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current, {});\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, []);\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global) => {\n    const memoSelectChat = (chatId: string) => {\n      return selectChat(global, chatId);\n    };\n    return {\n      memoSelectChat,\n    };\n  },\n)(GlobalSummaryWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIActionButton from '../chatAssistant/room-ai/room-ai-action-button';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/globalSummary/GlobalSummaryWrapper';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <RoomAIActionButton\n              chatId={renderingChatId!}\n            />\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      getActions().openChat({ id: GLOBAL_SUMMARY_CHATID });\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-console */\n/* eslint-disable no-null/no-null */\nimport type { Message } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { selectChat, selectChatLastMessageId, selectUser } from '../../../global/selectors';\nimport { getActionItems, summaryMessage } from '../utils/chat-api';\nimport { fetchChatMessageByOffsetId, formateMessage2Summary } from '../utils/fetch-messages';\nimport { checkGoogleAuthStatus } from '../utils/google-api';\n\nexport const createRoomDescriptionMessage = (chatId:string):Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: chatId,\n    annotations: [{\n      type: 'room-ai-description',\n    }],\n  };\n};\nexport const createGoogleLoginMessage = ():Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: 'Please login first',\n    annotations: [{\n      type: 'google-auth',\n    }],\n  };\n};\n\nexport const createGoogleMeetingMessage = ():Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: '',\n    annotations: [{\n      type: 'google-event-insert',\n    }],\n  };\n};\n\nexport const scheduleGoogleMeeting = async (insertMessage:(message:Message)=>void, callback?:()=>void) => {\n  const loginStatus = await checkGoogleAuthStatus();\n  if (loginStatus) {\n    insertMessage(createGoogleMeetingMessage());\n  } else {\n    insertMessage(createGoogleLoginMessage());\n  }\n  callback?.();\n};\n\nexport const summaryRoomMessage = async (\n  chatId:string,\n  insertMessage:(message:Message)=>void,\n  callback?:()=>void,\n) => {\n  const global = getGlobal();\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const chat = selectChat(global, chatId);\n  const lastMessageId = selectChatLastMessageId(global, chatId, 'all') || 0;\n  if (chat) {\n    const messages = await fetchChatMessageByOffsetId({\n      chat,\n      offsetId: lastMessageId,\n      addOffset: -1,\n      sliceSize: 20,\n      threadId: MAIN_THREAD_ID,\n      maxCount: 20,\n    });\n    const formateMessages = formateMessage2Summary(messages);\n    if (!formateMessages.length) return;\n    const summaryInfo = {\n      summaryTime: new Date().getTime(),\n      messageCount: formateMessages.length,\n      userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n    };\n    summaryMessage({\n      messages: formateMessages,\n      language: new Intl.DisplayNames([autoTranslateLanguage], { type: 'language' }).of(autoTranslateLanguage),\n    }).then((res:any) => {\n      const content = {\n        ...res.data,\n        summaryInfo,\n      };\n      const newMessage = {\n        timestamp: new Date().getTime(),\n        content: JSON.stringify(content),\n        id: uuidv4(),\n        createdAt: new Date(),\n        role: 'assistant',\n        annotations: [{\n          type: 'room-summary',\n        }],\n      };\n      insertMessage(newMessage as Message);\n      callback?.();\n    }).catch((err) => {\n      console.log(err);\n      callback?.();\n    });\n  }\n};\n\nexport const generateRoomActionItems = async (\n  chatId:string,\n  insertMessage:(message:Message)=>void,\n  callback?:()=>void,\n) => {\n  const global = getGlobal();\n  const { autoTranslateLanguage } = global.settings.byKey;\n  const chat = selectChat(global, chatId);\n  const lastMessageId = selectChatLastMessageId(global, chatId, 'all') || 0;\n  if (chat) {\n    const messages = await fetchChatMessageByOffsetId({\n      chat,\n      offsetId: lastMessageId,\n      addOffset: -1,\n      sliceSize: 20,\n      threadId: MAIN_THREAD_ID,\n      maxCount: 20,\n    });\n    const formateMessages = messages.map((message) => {\n      if (message.content.text?.text) {\n        const peer = message.senderId ? selectUser(global, message.senderId) : undefined;\n        return {\n          senderId: message?.senderId || message?.chatId,\n          senderName: peer ? `${peer.firstName || ''} ${peer.lastName || ''}` : '',\n          date: message.date,\n          messageId: Math.floor(message.id),\n          content: message.content.text?.text ?? '',\n        };\n      }\n      return null;\n    }).filter(Boolean);\n    if (!formateMessages.length) return;\n    const summaryInfo = {\n      summaryTime: new Date().getTime(),\n      messageCount: formateMessages.length,\n      userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n    };\n    getActionItems({\n      messages: formateMessages,\n      language: autoTranslateLanguage,\n    }).then((res:any) => {\n      const content = {\n        ...res.data,\n        summaryInfo,\n      };\n      const newMessage = {\n        timestamp: new Date().getTime(),\n        content: JSON.stringify(content),\n        id: uuidv4(),\n        createdAt: new Date(),\n        role: 'assistant',\n        annotations: [{\n          type: 'room-actions',\n        }],\n      };\n      insertMessage(newMessage as Message);\n      callback?.();\n    }).catch((err) => {\n      console.log(err);\n      callback?.();\n    });\n  }\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React from 'react';\nimport type { Message } from 'ai';\n\nimport { generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summarize\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Schedule meeting\n      </div>\n      <div className={actionItemClassName} onClick={handleActionItems}>\n        ✅ To-do list\n      </div>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { Button } from '../component/button';\nimport { Textarea } from '../component/textarea';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <Textarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { Messages } from '../messages';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getHitTools } from '../utils/chat-api';\nimport { checkGoogleAuthStatus } from '../utils/google-api';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport { createGoogleLoginMessage, createGoogleMeetingMessage, createRoomDescriptionMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const { mutate } = useSWRConfig();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: chatId,\n    sendExtraMessageFields: true,\n    onResponse: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message:Message) => {\n    setMessages((prev) => {\n    const index = prev.findIndex((item) => item.id === message.id);\n    if (index !== -1) {\n      const newMessages = [...prev];\n      newMessages[index] = message;\n      return newMessages;\n    }\n    return [...prev, message];\n  });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage as UIMessage[]);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  }, [insertMessage, messages, mutate, setMessages]);\n\n  const updateToken = useCallback((payload:{ message:Message;token:string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 100);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach(async (toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const loginStatus = await checkGoogleAuthStatus();\n            if (loginStatus) {\n              insertMessage(createGoogleMeetingMessage());\n            } else {\n              insertMessage(createGoogleLoginMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n            mutate('messages:should-scroll', 'smooth');\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    const newMessage:Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item:any) => item.score > 0.8);\n    if (matchs.length > 0) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","// extracted by mini-css-extract-plugin\nexport default {\"rightPanelBg\":\"ZfJHpS2Q\"};","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    const timer = setTimeout(() => {\n      if (containerRef.current && chatId && chatId !== GLOBAL_SUMMARY_CHATID) {\n        injected = injectMessageAI(containerRef.current, { ...props });\n      }\n    }, 500); // 等动画走完再注入\n\n    return () => {\n      clearTimeout(timer);\n      injected?.unmount();\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\nimport { AISettingIcon, RealTimeAIIcon } from \"../chatAssistant/utils/icons\"\nimport { selectSharedSettings } from \"../../global/selectors/sharedState\"\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistant?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistant\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>)=> {\n    e.stopPropagation();\n    setSharedSettingOption({ realTimeAssistant: !realTimeAssistant });\n  })\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=''\n      >\n        <AISettingIcon/>\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Serena AI\" />\n              <h3 className=\"title\">{oldLang('Serena AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={<div className=\"mr-[10px] mb-[40px]\">\n                    <RealTimeAIIcon/>\n                  </div>}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistant\"\n                          checked={realTimeAssistant === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br/> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistant } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistant\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","ChataiStores","addUser","name","firstName","lastName","phoneNumber","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","contact","addContact","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","isChatAIShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","PRESET_TAGS","PresetTagModal","activeTag","setActiveTag","tagList","PRESET_FOLDER_ID","getAITags","Modal","dialogStyle","currentTag","item","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onClickTag","withGlobal","selectTheme","AIChatFoldersTip","loading","setLoading","onCloseClick","GLOBAL_AICHATFOLDERS_TIP_SHOW","style","AiChatFoldersDarkBg","AiChatFoldersBg","AIChatFolderIcon","AiChatFoldersBtnBg","setSharedSettingOption","aiChatFoldersTask","classifyChatMessageByCount","Spinner","_extends","xmlns","height","fill","d","ActiveTag","folderType","onDelete","CloseIcon","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","res","placeholderRef","shouldRenderPlaceholder","noMountTransition","getFolderType","renderCurrentTab","activeFolder","isFolder","ChatList","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","account","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","handleSwitchAIChatFolders","confirm","onOk","deleteAiChatFolders","onCancel","IS_MULTIACCOUNT_SUPPORTED","src","AIKnowledgeIcon","alt","buildStyle","AITranslateIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","AIMenuIcon","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","withAIIcon","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","RoomAIAssistant","getRoomLastFocusTime","roomAIData","getItem","lastFocusTime","getRoomLastSummaryId","lastSummaryId","getRoomUnreadCount","getRoomAIUnreadCount","updateRoomAIData","parsedData","currentData","setItem","eventEmitter","emit","Actions","UpdateRoomAIUnreadCount","increaseUnreadCount","summary","autoTranslateLanguage","summaryCount","fetchChatMessageByOffsetId","formateMessages","formateMessage2Summary","summaryInfo","summaryTime","getTime","messageCount","summaryMessage","DisplayNames","of","uuidv4","createdAt","role","annotations","storeMessage","AddRoomAIMessage","openChatAIWithInfo","setUnreadCount","updateUnreadCount","on","off","SerenaLogoPath","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","stop","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","Textarea","target","cx","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","TextArea","Input","AddTopicPanel","Form","useForm","openDrawer","drawerParams","useDrawerStore","initialValues","topicName","topicDescription","strongAlert","setStrongAlert","handleSave","validateFields","urgentTopic","addUrgentTopic","allTopics","getAllUrgentTopic","addUrgentTopics","updateAllTopicPhoneNumber","DrawerKey","PersonalizeSettings","errorInfo","handleCancel","layout","Item","required","valuePropName","noStyle","Switch","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","checkedValues","onSave","Checkbox","Group","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","isSavedMessages","renderChatItem","CustomizationPromptPanel","summaryTemplate","addSummaryTemplate","Message","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","setIsLoading","useChat","api","sendExtraMessageFields","initialMessages","languagePrompt","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","CustomizationTemplates","prompt","SelectedChats","onOpenChatSelect","SummarizeTab","userDefinedTemplate","setUserDefinedTemplate","lastTemplate","setLastTemplate","currentTemplate","setCurrentTemplate","setSelectedChats","getAllSummaryTemplate","SUMMARY_CHATS","actionsVisable","handleCustomization","CustomizationPrompt","handleTemplateSelect","globalSummaryTask","updateSummaryDefineTemplate","handleDelete","deleteSummaryTemplate","prev","handleOpenChatSelect","ChatPicker","updateSummaryChats","handleDeleteSummaryChat","newSelected","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","setTopics","URGENT_CHATS","urgentCheckTask","updateUrgentChats","deleteUrgentTopic","t","setActiveKey","items","children","Tabs","defaultActiveKey","hasBackDrawer","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","LeftOutlined","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","DangerIcon","notificationUrgentMessage","GlobalSummary","forwardRef","mutate","useSWRConfig","notificationMessage","setNotificationMessage","pageInfo","setPageInfo","lastTime","GLOBAL_SUMMARY_CHATID","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","deleteMessage","delMessage","msgs","parseMessage2SummaryStoreMessage","storeMessages","timer","SerenaPath","Messages","loadMore","injectMessageAI","injectComponent","memoSelectChat","GlobalSummaryWrapper","containerRef","injected","unmount","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","handleAvatarClick","avatarRef","hiddenName","renderAvatar","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIActionButton","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","createGoogleLoginMessage","createGoogleMeetingMessage","actionItemClassName","RoomActions","insertMessage","handleSummarize","callback","summaryRoomMessage","handleScheduleMeeting","checkGoogleAuthStatus","scheduleGoogleMeeting","handleActionItems","getActionItems","generateRoomActionItems","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","mergeMesssage","parts","updateToken","handleGoogleAuthSuccess","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","parseMessage2StoreMessage","formMessage","toolsEmbeddingStore","getHitTools","toolResults","toolCall","toolName","loginStatus","sendGAEvent","RoomAI","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","play","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","realTimeAssistant","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","handleSwitchRealTimeAssistant","setShouldSkipTransition","contentKey","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}