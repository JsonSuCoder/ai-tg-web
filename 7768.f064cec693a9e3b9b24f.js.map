{"version":3,"file":"7768.f064cec693a9e3b9b24f.js","mappings":"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","sources":["webpack://TeleGPT/./src/global/helpers/meta.ts","webpack://TeleGPT/./src/util/PopupManager.ts","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://TeleGPT/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://TeleGPT/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://TeleGPT/./src/global/actions/ui/stars.ts","webpack://TeleGPT/./src/components/payment/PaymentModal.async.tsx","webpack://TeleGPT/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://TeleGPT/./src/global/actions/api/twoFaSettings.ts","webpack://TeleGPT/./src/global/actions/api/bots.ts","webpack://TeleGPT/./src/util/payments/stripe.ts","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://TeleGPT/./src/components/modals/ModalContainer.tsx","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://TeleGPT/./src/components/modals/boost/BoostModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://TeleGPT/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://TeleGPT/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/map/MapModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://TeleGPT/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://TeleGPT/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://TeleGPT/./src/global/actions/api/stars.ts","webpack://TeleGPT/./src/global/actions/ui/messages.ts","webpack://TeleGPT/./src/hooks/usePreventPinchZoomGesture.ts","webpack://TeleGPT/./src/components/main/HistoryCalendar.async.tsx","webpack://TeleGPT/./src/global/actions/ui/chats.ts","webpack://TeleGPT/./src/components/middle/helpers/groupMessages.ts","webpack://TeleGPT/./src/global/actions/api/symbols.ts","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://TeleGPT/./src/components/main/Main.tsx","webpack://TeleGPT/./src/components/middle/hooks/useContainerHeight.ts","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.tsx","webpack://TeleGPT/./src/components/main/SafeLinkModal.async.tsx","webpack://TeleGPT/./src/global/actions/ui/calls.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.async.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://TeleGPT/./src/util/updateIcon.ts","webpack://TeleGPT/./src/components/main/NewContactModal.async.tsx","webpack://TeleGPT/./src/global/reducers/reactions.ts","webpack://TeleGPT/./src/global/actions/ui/statistics.ts","webpack://TeleGPT/./src/components/payment/ReceiptModal.async.tsx","webpack://TeleGPT/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://TeleGPT/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.tsx","webpack://TeleGPT/./src/hooks/useResize.ts","webpack://TeleGPT/./src/components/left/search/LeftSearch.async.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://TeleGPT/./src/components/left/main/ContactList.async.tsx","webpack://TeleGPT/./src/components/left/main/AccountMenuItems.tsx","webpack://TeleGPT/./src/global/actions/ui/users.ts","webpack://TeleGPT/./src/components/right/CreateTopic.async.tsx","webpack://TeleGPT/./src/components/middle/hooks/usePinnedMessage.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.tsx","webpack://TeleGPT/./src/components/left/ConnectionStatusOverlay.tsx","webpack://TeleGPT/./src/components/main/GameModal.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://TeleGPT/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://TeleGPT/./src/components/calls/ActiveCallHeader.async.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/users.ts","webpack://TeleGPT/./src/hooks/useNativeCopySelectedMessages.ts","webpack://TeleGPT/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://TeleGPT/./src/global/actions/ui/misc.ts","webpack://TeleGPT/./src/global/reducers/bots.ts","webpack://TeleGPT/./src/global/actions/api/messages.ts","webpack://TeleGPT/./src/components/middle/ReactorListModal.async.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.async.tsx","webpack://TeleGPT/./src/components/right/PollResults.async.tsx","webpack://TeleGPT/./src/components/calls/phone/PhoneCall.async.tsx","webpack://TeleGPT/./src/global/actions/ui/passcode.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://TeleGPT/./src/hooks/useCacheBuster.ts","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/settings.ts","webpack://TeleGPT/./src/components/left/main/LeftMain.tsx","webpack://TeleGPT/./src/components/right/statistics/Statistics.async.tsx","webpack://TeleGPT/./src/global/actions/ui/account.ts","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/messages.ts","webpack://TeleGPT/./src/components/middle/MessageList.tsx","webpack://TeleGPT/./src/components/common/StickerSetModal.async.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/ContactGreeting.tsx","webpack://TeleGPT/./src/global/actions/api/stories.ts","webpack://TeleGPT/./src/components/middle/MiddleHeader.tsx","webpack://TeleGPT/./src/components/left/settings/Settings.async.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://TeleGPT/./src/global/actions/api/management.ts","webpack://TeleGPT/./src/components/main/BotTrustModal.async.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://TeleGPT/./src/global/actions/ui/middleSearch.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://TeleGPT/./src/util/requestQuery.ts","webpack://TeleGPT/./src/hooks/useMessageMediaMetadata.ts","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/multi-input.tsx","webpack://TeleGPT/./src/global/actions/api/accounts.ts","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://TeleGPT/./src/components/right/GifSearch.async.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://TeleGPT/./src/components/left/main/LeftMainHeader.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-attachments-modal.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredMessage.tsx","webpack://TeleGPT/./src/global/actions/api/payments.ts","webpack://TeleGPT/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://TeleGPT/./src/components/right/hooks/useProfileState.ts","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://TeleGPT/./src/components/common/UnreadCounter.tsx","webpack://TeleGPT/./src/components/middle/hooks/useScrollHooks.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://TeleGPT/./src/global/actions/api/users.ts","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://TeleGPT/./src/components/right/AddChatMembers.tsx","webpack://TeleGPT/./src/components/main/DeleteFolderDialog.async.tsx","webpack://TeleGPT/./src/global/actions/ui/globalSearch.ts","webpack://TeleGPT/./src/components/right/RightColumn.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://TeleGPT/./src/components/left/main/ChatFolders.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/calls.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://TeleGPT/./src/components/right/Profile.tsx","webpack://TeleGPT/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://TeleGPT/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://TeleGPT/./src/components/common/DeleteMessageModal.async.tsx","webpack://TeleGPT/./src/global/actions/ui/mediaViewer.ts","webpack://TeleGPT/./src/components/middle/panes/AudioPlayer.tsx","webpack://TeleGPT/./src/components/main/DownloadManager.tsx","webpack://TeleGPT/./src/components/right/hooks/useProfileViewportIds.ts","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.tsx","webpack://TeleGPT/./src/util/updatePageTitle.ts","webpack://TeleGPT/./src/components/middle/panes/ChatReportPane.tsx","webpack://TeleGPT/./src/components/common/gift/SavedGift.module.scss?4193","webpack://TeleGPT/./src/components/common/gift/SavedGift.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/symbols.ts","webpack://TeleGPT/./src/components/story/StoryViewer.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListContent.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://TeleGPT/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://TeleGPT/./src/global/actions/api/reactions.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/chats.ts","webpack://TeleGPT/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://TeleGPT/./src/components/common/PreviewMedia.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/misc.ts","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.tsx","webpack://TeleGPT/./src/global/actions/ui/bots.ts","webpack://TeleGPT/./src/global/actions/ui/reactions.ts","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://TeleGPT/./src/components/middle/NoMessages.tsx","webpack://TeleGPT/./src/global/actions/api/statistics.ts","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.tsx","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/right/hooks/useTransitionFixes.ts","webpack://TeleGPT/./src/components/main/DraftRecipientPicker.async.tsx","webpack://TeleGPT/./src/global/actions/ui/stickerSearch.ts","webpack://TeleGPT/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.tsx","webpack://TeleGPT/./src/util/getIsAppUpdateNeeded.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://TeleGPT/./src/hooks/useConnectionStatus.ts","webpack://TeleGPT/./src/hooks/window/useBrowserOnline.ts","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/rooms-tab.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://TeleGPT/./src/components/left/main/LeftSideMenuItems.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://TeleGPT/./src/global/actions/api/middleSearch.ts","webpack://TeleGPT/./src/components/left/ArchivedChats.async.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/prompt.ts","webpack://TeleGPT/./src/components/calls/group/GroupCall.async.tsx","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/Spinner.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://TeleGPT/./src/components/right/EditTopic.async.tsx","webpack://TeleGPT/./src/components/middle/hooks/useStickyDates.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://TeleGPT/./src/components/right/RightHeader.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://TeleGPT/./src/components/right/management/Management.async.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.tsx","webpack://TeleGPT/./src/components/main/LockScreen.tsx","webpack://TeleGPT/./src/components/left/NewChatButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://TeleGPT/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://TeleGPT/./src/components/left/main/StatusButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/TextArea.tsx","webpack://TeleGPT/./src/components/main/Dialogs.async.tsx","webpack://TeleGPT/./src/components/left/LeftColumn.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://TeleGPT/./src/global/actions/api/sync.ts","webpack://TeleGPT/./src/components/main/Notifications.async.tsx","webpack://TeleGPT/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/LockScreen.module.scss?8252","webpack://TeleGPT/./src/global/actions/apiUpdaters/payments.ts","webpack://TeleGPT/./src/global/actions/ui/stories.ts","webpack://TeleGPT/./src/components/middle/MessageListHistoryHandler.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.tsx","webpack://TeleGPT/./src/components/middle/hooks/useMessageObservers.ts","webpack://TeleGPT/./src/components/left/newChat/NewChat.async.tsx","webpack://TeleGPT/./src/components/right/StickerSearch.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/InputText.tsx","webpack://TeleGPT/./src/global/actions/api/globalSearch.ts","webpack://TeleGPT/./src/global/actions/ui/payments.ts","webpack://TeleGPT/./src/bundles/main.ts"],"sourcesContent":["import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import React from '@teact';\nimport { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Ask me about your chats...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-row items-center justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\n// import Button from '../../ui/Button';\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n// import SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(false);\n  const containerRef = useRef<HTMLDivElement>(undefined);\n  const onClick = useCallback((e: React.MouseEvent) => {\n    // 检查是否正在拖拽，如果是则阻止点击\n    const wrapper = e.currentTarget.closest('.room-ai-entry-wrapper');\n    if (wrapper && wrapper.getAttribute('data-dragging') === 'true') {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId, openChatAIWithInfo]);\n  const updateUnreadCount = useCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param:{ chatId:string; state:boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]); useEffect(() => {\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    RoomStorage.summary(chatId);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie:DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n  // 确保当 isSummary 为 true 时动画播放\n  useEffect(() => {\n    if (isSummary && dotLottie) {\n      dotLottie.play();\n    }\n  }, [isSummary, dotLottie]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"room-ai-entry-button\"\n\n    >\n      {isSummary ? (\n        <DotLottieReact\n          key=\"serenaWork\"\n          className=\"w-[62px] h-[62px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          key=\"serenaWait\"\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { Popover } from 'antd';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleMediaSummarize = () => {\n    const { openRoomAttachmentsModal } = getActions();\n    openRoomAttachmentsModal();\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload:any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  const popoverContent = (\n    <div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleSummarize}\n      >\n        🧠 Chat Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleMediaSummarize}\n      >\n        📁 Media/File Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleScheduleMeeting}\n      >\n        📅 Schedule meeting\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleActionItems}\n      >\n        ✅ Action Items\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summary\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Meeting\n      </div>\n      <Popover\n        content={popoverContent}\n        trigger=\"click\"\n        placement=\"bottomLeft\"\n        overlayClassName=\"room-actions-popover\"\n      >\n        <div className={actionItemClassName}>\n          🚀 All\n        </div>\n      </Popover>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React from '@teact';\nimport '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\nimport RoomAttachmentsModal from '../chatAssistant/room-ai/room-attachments-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isRoomAttachmentsModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isRoomAttachmentsModalOpen,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    closeRoomAttachmentsModal,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  const handleRoomAttachmentsModalClose = useLastCallback(() => {\n    closeRoomAttachmentsModal();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      {isRoomAttachmentsModalOpen && (\n        <RoomAttachmentsModal isOpen={Boolean(isRoomAttachmentsModalOpen)} onClose={handleRoomAttachmentsModalClose} />\n      )}\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isRoomAttachmentsModalOpen: selectTabState(global).isRoomAttachmentsModalOpen,\n    };\n  },\n)(Main));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import React from '@teact';\nimport { injectComponent } from '../injectComponent';\nimport GlobalSummary from './global-summary';\nconst GlobalSummaryWrapper = () => {\n  const containerRef = injectComponent({\n    component: GlobalSummary,\n  });\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default GlobalSummaryWrapper;\n\n","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic, ApiMessage } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_SAFARI,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIMEZONE, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }: { message: ApiMessage }) => {\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIMEZONE\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    if (ScheduleMeeting.get(chatId!)) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n      senderId: message.senderId,\n      messageText,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {\n        Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n          <>\n            <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n              <MiddleHeaderPanes\n                key={renderingChatId}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <MiddleHeader\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                isComments={isComments}\n                isMobile={isMobile}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <Transition\n                name={resolveTransitionName(\n                  'slide',\n                  animationLevel,\n                  shouldSkipHistoryAnimations || !withInterfaceAnimations,\n                )}\n                activeKey={currentTransitionKey}\n                shouldCleanup\n                cleanupExceptionKey={cleanupExceptionKey}\n                isBlockingAnimation\n                onStop={handleSlideTransitionStop}\n              >\n                <MessageList\n                  key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                  chatId={renderingChatId!}\n                  threadId={renderingThreadId!}\n                  type={renderingMessageListType!}\n                  isComments={isComments}\n                  canPost={renderingCanPost!}\n                  onScrollDownToggle={setIsScrollDownShown}\n                  onNotchToggle={setIsNotchShown}\n                  isReady={isReady}\n                  isContactRequirePremium={isContactRequirePremium}\n                  paidMessagesStars={paidMessagesStars}\n                  withBottomShift={withMessageListBottomShift}\n                  withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                  onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n                />\n                <div className={footerClassName}>\n                  {renderingCanPost && (\n                    <Composer\n                      type=\"messageList\"\n                      chatId={renderingChatId!}\n                      threadId={renderingThreadId!}\n                      messageListType={renderingMessageListType!}\n                      dropAreaState={dropAreaState}\n                      onDropHide={handleHideDropArea}\n                      isReady={isReady}\n                      isMobile={isMobile}\n                      editableInputId={EDITABLE_INPUT_ID}\n                      editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                      inputId=\"message-input-text\"\n                    />\n                  )}\n                  {isPinnedMessageList && canUnpin && (\n                    <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        color=\"secondary\"\n                        className=\"composer-button unpin-all-button\"\n                        onClick={handleOpenUnpinModal}\n                      >\n                        <Icon name=\"unpin\" />\n                        <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                      </Button >\n                    </div >\n                  )\n                  }\n                  {\n                    canShowOpenChatButton && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"composer-button open-chat-button\"\n                          onClick={handleOpenChatFromSaved}\n                        >\n                          <span>{oldLang('SavedOpenChat')}</span>\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {composerRestrictionMessage}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  }\n                  {\n                    (\n                      isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                    ) && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingShouldSendJoinRequest && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang('ChannelJoinRequest')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {oldLang('BotStart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {oldLang('BotRestart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanUnblock && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleUnblock}\n                        >\n                          {oldLang('Unblock')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  <MessageSelectToolbar\n                    messageListType={renderingMessageListType}\n                    isActive={isSelectModeActive}\n                    canPost={renderingCanPost}\n                  />\n                  <SeenByModal isOpen={isSeenByModalOpen} />\n                  <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                  <ReactorListModal isOpen={isReactorListModalOpen} />\n                  {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n                </div >\n              </Transition >\n              <RoomAIEntryWrapper chatId={chatId} />\n              <FloatingActionButtons\n                withScrollDown={renderingIsScrollDownShown}\n                canPost={renderingCanPost}\n                withExtraShift={withExtraShift}\n              />\n            </div >\n            <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n          </>\n        )\n      }\n      {\n        chatId && (\n          <UnpinAllMessagesModal\n            isOpen={isUnpinModalOpen}\n            chatId={chatId}\n            pinnedMessagesCount={pinnedMessagesCount}\n            onClose={closeUnpinModal}\n            onUnpin={handleUnpinAllMessages}\n          />\n        )\n      }\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div >\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">\n        Enter a topic you want AI to track and summarize. Add details so summaries are more accurate and relevant.\n      </p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  // replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const filterPhone = phone.replace(/^\\+\\d+\\s*/, \"\").replace(/\\s/g, \"\");\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(filterPhone);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        if (form.is_call && phoneNumber.length > 0) {\n          telegptSettings.setSettingOption({\n            phone: phoneNumber,\n          });\n        }\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n      setIsLoading(false);\n    });\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and descriptions for which you want alerts. When a message contains these keywords, you’ll be notified.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required: boolean;\n    force_update_current_version: string;\n    force_update_store_url: string;\n  }>();\n\n  const handleFireBaseUpdate = (payload: any) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { webFireBase } = payload;\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AIKonwledge });\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AITranslate });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    // window.location.reload();\n    if (webFireBase?.force_update_store_url!) {\n      window.location.href = webFireBase?.force_update_store_url!;\n    } else {\n      window.location.reload();\n    }\n\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate, getCurrentUserInfo } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { getBestKnowledgeMatch } from '../utils/knowledge-match';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  const { messages, append } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const bestMatch = await getBestKnowledgeMatch(message.content.text.text);\n      if (bestMatch && bestMatch.score > 0.8) {\n        setReplyResponse(bestMatch.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Tely AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  autoTranslate?:boolean;\n  autoTranslateLanguage?:string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  ContactGreeting,\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  // canTranslate,\n  // translationLanguage,\n  // shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!shouldAutoTranslate || !canTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  // }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n//   const { loading, userPortraitInfo } = usePortrait({ userId });\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    getActions().openUserPortrait({ userId });\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${\n                    portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                  } ${\n                    portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                  }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement|undefined>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","/* eslint-disable @typescript-eslint/require-await */\n/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { searchPortrait } from '../../../util/userPortrait';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { getCurrentUserInfo, getHitTools } from '../utils/chat-api';\nimport { getAuthState, isTokenValid } from '../utils/google-auth';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUserPortraitMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{\n    lastTime: number | undefined;\n    hasMore: boolean;\n  }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message: Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify({\n            chatId,\n            eventData: response,\n          }),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [chatId, insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload: { message: Message; token: string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const toolsHitCheck = async (formMessage: Message) => {\n    getHitTools(formMessage.content).then(async (toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach(async (toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const auth = getAuthState();\n            if (!auth || !(await isTokenValid(auth))) {\n              insertMessage(createGoogleLoginMessage());\n            } else {\n              insertMessage(createGoogleMeetingMessage());\n            }\n          } else if (toolCall.toolName === 'checkIsUserPortrait') {\n            const userName = toolCall.result?.keyword;\n            insertMessage(createUserPortraitMessage(userName));\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage: Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item: any) => item.score > 0.8);\n    if (matchs.length > 0 || searchPortrait(value)) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\nimport { UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent: GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          // footer={`${APP_NAME} ${versionString}`}\n          footer={`TeleGPT ${version || ''}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            onEnter={handleSearchEnter}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type {\n  ProfileTabType, SharedMediaType,\n} from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport {\n  getMessageDocument,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport {\n  checkIsUrl,\n  documentSummary, photoSummary, videoSummary, webPageSummary,\n} from '../utils/ai-analyse-message';\n\nimport useCacheBuster from '../../../hooks/useCacheBuster';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useTransitionFixes from '../../right/hooks/useTransitionFixes';\n\nimport Document from '../../common/Document';\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\n\nimport './room-attachments-modal.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chatId: string;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  isSavedDialog?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n];\n\nconst RoomAttachmentsModal: FC<OwnProps & StateProps> = ({\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  isChatProtected,\n  nextProfileTab,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    searchSharedMediaMessages,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    arr.push(...TABS);\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [lang]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  // 简化版的viewport管理，只处理media、documents、links\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  // 直接使用foundIds作为viewportIds\n  const viewportIds = foundIds;\n  const getMore = useLastCallback(() => {\n    if (searchSharedMediaMessages) {\n      searchSharedMediaMessages();\n    }\n  });\n  const isFirstTab = resultType === 'media';\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    const message = messagesById?.[messageId];\n    if (message) {\n      const {\n        photo, document, webPage, text, video,\n      } = message.content;\n      const isUrl = checkIsUrl(text?.text);\n      if (photo) {\n        photoSummary(message);\n      } else if (webPage || isUrl) {\n        webPageSummary(message);\n      } else if (document) {\n        documentSummary(message);\n      } else if (video) {\n        videoSummary(message);\n      }\n      onClose();\n    }\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  function renderContent() {\n    if (!viewportIds || !messagesById) {\n      const noSpinner = isFirstTab;\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              message={messagesById[id]}\n              observeIntersection={observeIntersectionForMedia}\n              canAutoLoad\n              autoLoadFileMaxSizeMb={SHARED_MEDIA_SLICE}\n              // eslint-disable-next-line react/jsx-no-bind\n              onSelect={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              onlyWebPage\n              observeIntersection={observeIntersectionForMedia}\n              // eslint-disable-next-line react/jsx-no-bind\n              onMessageClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  // 弹窗未打开时不渲染组件内容，避免执行内部逻辑\n  if (!isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"room-attachments-modal\"\n      title=\"Select a file\"\n      hasCloseButton\n    >\n      <div\n        ref={containerRef}\n        className=\"profile-container\"\n      >\n        <div className=\"shared-media\">\n          <div\n            className={buildClassName(\n              'profile-content-wrapper',\n              'no-selection',\n            )}\n          >\n            <div className=\"shared-media-wrapper\">\n              <div className=\"shared-media-header\">\n                {tabs.length > 1 && (\n                  <TabList\n                    tabs={tabs}\n                    activeTab={activeKey}\n                    onSwitchTab={handleSwitchTab}\n                  />\n                )}\n\n              </div>\n              <Transition\n                ref={transitionRef}\n                name=\"slide\"\n                activeKey={activeKey}\n                renderCount={tabs.length}\n                className=\"shared-media-transition\"\n                onStart={applyTransitionFix}\n                onStop={handleTransitionStop}\n              >\n                <InfiniteScroll\n                  className=\"shared-media-list\"\n                  items={viewportIds}\n                  onLoadMore={getMore}\n                  cacheBuster={cacheBuster}\n                  noScrollRestore={activeTab !== activeKey}\n                  noFastList\n                >\n                  {renderContent()}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = selectChat(global, chatId!);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messagesById = selectChatMessages(global, chatId!);\n    const { nextProfileTab } = selectTabState(global);\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    return {\n      chatId: chatId!,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      chatsById: global.chats.byId,\n      usersById: global.users.byId,\n      userStatusesById: global.users.statusesById,\n      isRightColumnShown,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n    };\n  },\n)(RoomAttachmentsModal));\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React from '@teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { FC } from '@teact';\nimport React from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = () => {\n  const { isOpen } = useDrawerStore();\n  const { userId, userName } = getCurrentUserInfo();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[]>([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item: Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    // 再次聚焦间隔6小时触发一次总结\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 60 * 6) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setMessages((prev) => prev.filter((message) => message.id !== messageId));\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value: string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Tely AI\" />\n            <span className=\"text-[15px] font-semibold\">Tely AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n};\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef ,useState ,useCallback} from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen\n  } = getActions();\n   // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>();\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  \n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip } : { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n    function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Chat Summary',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }:{ className:string;children?:React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }:{ handleClose:()=>void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step:number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","import React from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst GuidanceWrapper = ({ handleClose }: { handleClose: () => void }) => {\n  const containerRef = injectComponent({\n    component: GuidanceCarousel,\n    props: {\n      handleClose,\n    },\n  });\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n    const isSpinner = noContent && !noSpinner;\n\n    return (\n      <Transition activeKey={isSpinner ? 0 : 1} name=\"fade\">\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </Transition>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Add Topics');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n           <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  const triggerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\nimport React from '@teact'\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport buildStyle from '../../../util/buildStyle';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\n\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  // const containerRef = useRef<HTMLDivElement>();\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 224, // 14rem = 224px (14 * 16)\n  });\n  const dragStartRef = useRef({\n    x: 0,\n    y: 0,\n    startX: 0,\n    startY: 0,\n  });\n  const hasDraggedRef = useRef(false);\n  const isDraggingRef = useRef(false);\n  const positionRef = useRef(position);\n\n  // 同步position到ref\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  // 同步isDragging到ref\n  useEffect(() => {\n    isDraggingRef.current = isDragging;\n  }, [isDragging]);\n\n  // 从localStorage加载位置\n  const loadPosition = useCallback(() => {\n    const savedPosition = localStorage.getItem('room-ai-position');\n    if (savedPosition) {\n      const pos = JSON.parse(savedPosition);\n      setPosition(pos);\n    } else {\n      // 设置默认位置：右侧16px，底部224px\n      const defaultX = -16; // max(1rem, env(safe-area-inset-right)) ≈ 16px\n      setPosition({ x: defaultX, y: 224 });\n    }\n  }, []);\n\n  // 保存位置到localStorage\n  const savePosition = useCallback((pos: { x: number; y: number }) => {\n    localStorage.setItem('room-ai-position', JSON.stringify(pos));\n  }, []);\n\n  const longPressTimerRef = useRef<number | null>(null);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging) return;\n\n    hasDraggedRef.current = true;\n    const deltaX = e.clientX - dragStartRef.current.x;\n    const deltaY = e.clientY - dragStartRef.current.y;\n\n    const newPosition = {\n      x: dragStartRef.current.startX + deltaX,\n      y: dragStartRef.current.startY - deltaY, // 修正Y轴方向：鼠标向下移动时减少Y值\n    };\n\n    // 边界限制\n    const containerWidth = 62;\n    const containerHeight = 62;\n    const minX = -window.innerWidth + containerWidth; // 左边界\n    const maxX = 0; // 右边界\n    const minY = 0; // 距离底部最小距离（贴底）\n    const maxY = window.innerHeight - containerHeight; // 距离底部最大距离（贴顶）\n\n    newPosition.x = Math.max(minX, Math.min(maxX, newPosition.x));\n    newPosition.y = Math.max(minY, Math.min(maxY, newPosition.y));\n\n    setPosition(newPosition);\n  }, [isDragging]);\n\n  const handleMouseUp = useCallback(() => {\n    // 清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n\n    // 只有在真正拖拽时才保存位置\n    if (isDragging) {\n      if (hasDraggedRef.current) {\n        savePosition(positionRef.current);\n      }\n    }\n    setIsDragging(false);\n\n    // 延迟重置拖拽标记，防止立即触发点击事件\n    setTimeout(() => {\n      hasDraggedRef.current = false;\n    }, 100);\n  }, [isDragging, savePosition]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    hasDraggedRef.current = false;\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startX: position.x,\n      startY: position.y,\n    };\n\n    // 设置长按定时器，150ms后开始拖拽\n    longPressTimerRef.current = window.setTimeout(() => {\n      setIsDragging(true);\n    }, 150);\n  }, [position]);\n\n  const handleMouseLeave = useCallback(() => {\n    // 鼠标离开时清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    // 如果刚刚完成拖拽，阻止点击事件\n    if (hasDraggedRef.current || isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, [isDragging]);\n\n  // 添加全局鼠标事件监听\n  useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  useEffect(() => {\n    loadPosition();\n  }, [loadPosition]);\n  const containerRef = injectComponent({\n    component: RoomAIEntryButton,\n    props: {\n      chatId,\n    },\n  });\n\n  return (\n    <div\n      className=\"room-ai-entry-wrapper\"\n      ref={containerRef}\n      data-dragging={isDragging}\n      style={buildStyle(`right: ${-position.x}px; bottom: ${position.y}px; cursor: ${isDragging ? 'grabbing' : 'grab'}; userSelect: none`)}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle,\n  getGroupStatus,\n  getUserFullName,\n  getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport useOldLang from '../hook/useOldLang';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './rooms-tab.scss';\nimport './selected-chats.scss';\n\ninterface Props {\n  title: string;\n  ignoredIds: string[];\n  onIgnored: (id: string) => void;\n  onUnIgnored: (id: string) => void;\n}\n\nexport const RoomsTab = (props: Props) => {\n  const {\n    title,\n    ignoredIds,\n    onIgnored,\n    onUnIgnored,\n  } = props;\n  const orderedIds = React.useMemo(() => {\n    const ids = getOrderedIds(ALL_FOLDER_ID) || [];\n    return ids.filter((id) => id !== GLOBAL_SUMMARY_CHATID);\n  }, []);\n  const unIgnoreIds = orderedIds.filter((id) => !ignoredIds.includes(id));\n  const [activeTab, setActiveTab] = useState<'summary' | 'ignored'>('summary');\n  const lang = useOldLang();\n  const global = getGlobal();\n\n  const renderRoomItem = (\n    id: string,\n    isIgnored: boolean,\n  ) => {\n    const peer: ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">{specialTitle}</div>\n          <div className=\"text-[var(--color-text-secondary)] text-sm\">{subtitle}</div>\n        </div>\n        {isIgnored ? (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#5493F2] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onUnIgnored(id)}\n          >\n            Stop Ignoring\n          </div>\n        ) : (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#FF5757] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onIgnored(id)}\n          >\n            <Icon name=\"eye-crossed\" />\n            Ignore\n          </div>\n        )}\n\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"summary-rooms-tab mt-[20px]\">\n      <div className=\"tabs-container\">\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'summary'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('summary')}\n        >\n          {title}\n        </button>\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'ignored'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('ignored')}\n        >\n          Ignored Chats\n        </button>\n      </div>\n\n      {activeTab === 'summary' ? (\n        <div>\n          {unIgnoreIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {unIgnoreIds.map((id) => renderRoomItem(id, false))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {ignoredIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {ignoredIds.map((id) => renderRoomItem(id, true))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import React from '@teact';\nimport { Modal } from 'antd';\nimport { memo, useMemo ,useCallback ,useState ,useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal, getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('Quick Replies')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","/* eslint-disable max-len */\nexport const languagePrompt = `\n    [实时语言雷达]\n        1. 语言指纹扫描：自动检测输入文本的\n            - 主要语种(支持92种语言置信度识别)\n            - 方言特征(如粤语/川普/美式英语)\n            - 混合语言比例(中英混杂度>30%触发混合模式)\n    [语境翻译官]\n        2. 根据语言特征自动匹配：\n            - 正式场合 → 学术英语/商务日语\n            - 社交场景 → 网络韩语/缩略中文\n            - 创意表达 → 方言梗/谐音梗\n            - 情感交流 → 方言安慰语/俚语拥抱\n    [文化调色盘]\n        3. 语言风格增强模块：\n            - 中文：加入\"绝绝子\"/\"破防了\"等年度热词\n            - 日语：自动转换敬体/简体(根据用户资料)\n            - 英语：切换正式/俚语模式(识别slang词汇)\n            - 方言：加载地域特色表达库(如东北话\"忽悠\"→上海话\"捣糨糊\")\n    [混合语处理器]\n        4. 跨语言对话解决方案：\n            - 中英夹杂 → 智能补全(\"这个idea超酷\"→\"这个idea真的超有创意\")\n            - 方言转译 → 标准语+注释(\"侬晓得伐？→ 你知道吗？(上海话)\")\n            - 代码切换 → 无缝过渡(\"今天meeting讨论了KPI→今天开会讨论了KPI\")\n`;\n\nexport const UrgentMessageCheckPrompt = `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n    ## 总结重要或紧急消息的内容摘要(可包含发送者名称),非重要或者紧急消息直接过滤掉\n    ## 消息字段解释\n        - chatId: 房间ID\n        - messageId: 消息ID\n        - content: 消息内容\n        - senderName: 发送者名称\n    ## 输出格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式\n         \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            content: 内容摘要\"             \n                        }\n                    ]\n                <!-- json-end -->\n        \\`\\`\\`\n`;\n\nexport const DefaultUrgentTopic = {\n  id: 'default',\n  topicName: '默认紧急主题',\n  topicDescription: `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n  `,\n  strongAlert: false,\n};\n\nexport const getIntelligentReplyByKnowledgePrompt = (knowledge:string) => {\n  return `\n    ## 角色设定\n        你是一个专业的智能知识管家，负责基于知识库内容进行检索回答。请严格遵守以下规则：\n    ## 知识库内容\n        ${knowledge}\n    ## 知识检索\n        - 使用精确匹配模式(无模糊扩展)\n        - 当相似度>95%时才返回知识库内容,否则回复的内容为空\n    ## 格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            replyContent: \"回复的内容\"              \n                        }\n                    ]\n                <!-- json-end -->\n            \\`\\`\\`\n    ## 示例输出\n        \\`\\`\\`json\n            <!-- json-start -->\n                [\n                    {\n                        chatId: \"房间ID\",\n                        messageId: \"消息ID\",\n                        senderId: \"用户ID\",\n                        replyContent: \"Think of SendingNetwork as the swiss-army knife for decentralized and encrypted communications infrastructure. \"              \n                    }\n                ]\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n};\n\nexport const UserPortraitPrompt = `\n    你是一位金融行为分析师，擅长通过对话文本解析用户多维特征。请根据以下框架分析输入数据，输出包含基础信息、关系定位、资产行为及兴趣特征的结构化画像：\n    # 基础信息推断\n        ## 年龄定位\n            - 使用\"学生党/刚毕业\"→18-24岁\n            - 提及\"子女教育/房贷\"→35-50岁\n        ## 性别识别：\n            - 讨论\"母婴产品\"→女性\n            - 引用\"电竞/硬件参数\"→男性\n        ## 地域判断：\n            - 提到\"沪牌政策\"→上海用户\n            - 使用\"支付宝/微信支付\"→中国大陆用户\n    # 关系定位模型\n        ## 合作伙伴：\n            - 包含\"对赌协议/股权分配\"等关键词\n            - 对话中出现\"王总/李董\"等职称\n        ## 投资人：\n            - 讨论\"IRR/ROI\"等财务指标\n            - 提及\"LP/GP\"关系\n        ## 同事：\n            - 使用\"周报/OKR\"等业务术语\n            - 非正式称呼(\"老张/小李\")\n    # 资产行为分析\n        ## 加密货币特征\n            - 持有资产:识别BTC/ETH等代币提及次数\n            - 操作风格:\"短线操作\"→交易型,\"三年以上未动\"→囤积型\n        ## 风险偏好分级\n            - \"愿意承担波动\"→激进型(风险评分7-10)\n            - \"只要保本\"→保守型(风险评分1-3)\n    # 示例输出 \n         \\`\\`\\`json\n            <!-- json-start -->\n                 {\n                    \"basic_info\": {\n                      \"age_group\": \"25-34岁\",\n                      \"gender\": \"男\",\n                      \"region\": \"北美地区\",\n                      \"language\": \"中英双语\"\n                    },\n                    \"relationship\": {\n                      \"type\": \"战略合作伙伴\",\n                      \"engagement_level\": \"高价值(年合作超500万)\"\n                    },\n                    \"financial_behavior\": {\n                      \"assets\": {\n                        \"crypto_holdings\": [\"BTC\", \"LINK\"],\n                        \"investment_style\": \"波段交易(持仓周期7-30天)\",\n                        \"risk_profile\": \"进取型(历史最大回撤承受力25%)\"\n                      },\n                    },\n                  }\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from 'react';\nimport React from 'react';\nimport cx from 'classnames';\n\nimport './Spinner.scss';\n\nconst Spinner: FC<{\n  color?: 'blue' | 'white' | 'black' | 'green' | 'gray' | 'yellow';\n  backgroundColor?: 'light' | 'dark';\n  className?: string;\n}> = ({\n  color = 'blue',\n  backgroundColor,\n  className,\n}) => {\n  return (\n    <div className={cx(\n      'Spinner-GPT', className, color, backgroundColor && 'with-background', backgroundColor && `bg-${backgroundColor}`,\n    )}\n    >\n      <div className=\"Spinner__inner\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIWrapper = (props: StateProps) => {\n  const containerRef = injectComponent({\n    component: RoomAI,\n    props,\n  });\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI  : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Tely AI\" />\n              <h3 className=\"title\">{oldLang('Tely AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time Assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","/* eslint-disable no-console */\n\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic; onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, ignored_urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(ignored_urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(selectUrgentChatIds);\n\n  const handeleDeleteTopic = (id: string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res: any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...ignoredIds, id];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Urgent\" />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport Spinner from '../component/Spinner';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, ignored_summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const ignoredChatIds = getIdsFromEntityTypes(ignored_summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(ignoredChatIds);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    setIsLoading(true);\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    }, () => {\n      setIsLoading(false);\n      setOriginSelectedTemp(selectedTemp);\n    });\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...new Set([...ignoredIds, id])];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">Topic Preferences</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Summary\" />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  let textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import React from '@teact';\nimport type {\n  ElementRef\n} from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { debounce } from '../../util/schedulers';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  Settings,\n  Archived,\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            // isAppUpdateAvailable={isAppUpdateAvailable}\n            // isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import React, { useState } from '../../../../lib/teact/teact';\n\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<Boolean>(!telegptGuidance);\n  const handleClose = useLastCallback(() => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n  });\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["addTabStateResetterAction","name","key","addActionHandler","global","actions","payload","tabId","getCurrentTabId","updateTabState","undefined","SHOULD_PRE_OPEN","IS_IOS","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","window","open","blur","url","location","href","focus","popup","cancelPreOpen","close","FALLBACK_PANE_STATE","height","MiddleHeaderPanes","className","chatId","threadId","messageListType","chat","userFullInfo","getCurrentPinnedIndex","getLoadingPinnedId","isAudioPlayerRendered","isMiddleSearchOpen","withRightColumnAnimation","onFocusPinnedMessage","settings","isDesktop","useAppLayout","getAudioPlayerState","setAudioPlayerState","useSignal","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isPinnedMessagesFullWidth","isFirstRenderRef","useRef","shouldRender","ref","useShowTransition","isOpen","withShouldRender","noMountTransition","useEffectOnce","current","useSignalEffect","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","reduce","acc","state","middleColumn","document","getElementById","applyAnimationState","setExtraStyles","React","buildClassName","styles","root","root_withRightColumnAnimation","AudioPlayer","isFullWidth","onPaneStateChange","isHidden","MAIN_THREAD_ID","isForum","GroupCallTopPane","ChatReportPane","canAddContact","canBlockContact","canReportSpam","isAutoArchived","BotVerificationPane","peerId","PaidMessageChargePane","HeaderPinnedMessage","shouldHide","BotAdPane","memo","withGlobal","audioPlayer","selectTabState","selectChat","selectUserFullInfo","audioChatId","messageId","audioMessageId","audioMessage","selectChatMessage","Boolean","selectCurrentMiddleSearch","selectCanAnimateRightColumn","PureMultimodalInput","status","stop","setMessages","handleInputSubmit","textareaRef","width","useWindowSize","useEffect","adjustHeight","style","Math","min","max","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","useState","domValue","value","submitForm","useCallback","AITextarea","placeholder","onChange","event","target","cx","rows","autoFocus","onKeyDown","shiftKey","preventDefault","toast","error","StopButton","SendButton","input","RoomAIInput","prevProps","nextProps","PureStopButton","Button","onClick","messages","sanitizeUIMessages","StopIcon","size","PureSendButton","disabled","length","props","PrivacySettingsNoticeModal","useModuleLoader","Bundles","Extra","StoryStatistics","Loading","ForwardRecipientPicker","originData","originStarsPayment","originReaction","originGift","topup","closeStarsBalanceModal","starsPayment","sendPaidReaction","forcedAmount","amount","sendStarGift","selectIsCurrentUserFrozen","openFrozenAccountModal","isGiftRecipientPickerOpen","starsGiftingPickerModal","message","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","currency","STARS_CURRENCY_CODE","starBalance","stars","balance","balanceNeeded","clearStarPayment","loadStarStatus","starsBalanceModal","showNotification","langProvider","actionText","action","icon","selectStarsPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starsGiftModal","content","type","starGift","uniqueGift","giftReceiverId","isOutgoing","currentUserId","inputGift","savedId","fromId","gift","date","starsToConvert","isNameHidden","isUnsaved","isSaved","id","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","transferStars","openGiftInfoModal","recipientId","giftInfoModal","giftResalePriceComposerModal","giftWithdrawModal","emojiStatus","giftStatusInfoModal","tabState","errorKey","giftTransferModal","PaymentModal","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","async","result","callApi","getGlobal","replaceSettings","hasPassword","updateTwoFaSettings","hint","setGlobal","currentPassword","onSuccess","isLoading","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","GAMEE_URL","TOP_PEERS_REQUEST_COOLDOWN","runDebouncedForSearch","debounce","cb","botFatherId","gameePopups","isWepAppOpened","webApp","openedWebApps","webApps","getWebAppKey","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","activateWebAppIfOpen","loadAttachBots","hash","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","searchInlineBot","username","inlineBotData","query","offset","selectUser","shouldReplaceSettings","replaceInlineBotsIsLoading","replaceInlineBotSettings","results","newInlineBotData","inlineBots","byUsername","currentIds","Set","map","data","newResults","filter","has","help","cacheTime","Date","now","isGallery","switchPm","switchWebview","canLoadMore","nextOffset","concat","sendBotCommand","command","replyInfo","sendAs","lastMessageId","text","answerCallbackButton","isGame","showDialog","openUrl","openGame","accessHash","alert","isError","includes","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","oldTranslate","openPollModal","isQuiz","user","phoneNumber","firstName","lastName","userId","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectCurrentChat","currentMessageList","selectCurrentMessageList","resetDraftReplyInfo","clearWebPagePreview","selectChatLastMessageId","selectDraft","selectSendAs","selectBot","removeBlockedUser","lastRequestedAt","topInlineBots","getServerTime","ids","userIds","topBotApps","inlineBot","botSender","openChatWithDraft","getMainUsername","queryId","isSilent","scheduledAt","allowPaidStars","resultId","scheduleDate","draftReplyInfo","selectMessageReplyInfo","starsForOneMessage","getPeerStarsForMessage","params","sendInlineBotApiResult","localId","title","variables","count","options","pluralValue","formatStarsAsText","getTranslationFn","shouldUseCustomIcon","force","Object","keys","forEach","resetInlineBot","param","fullInfo","isBlocked","startParam","currentUser","contact","mediaType","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","newActiveApp","appName","addWebAppToOpenList","isFromBotMenu","isFullscreen","peer","selectPeer","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","users","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","openThread","botUser","actionPayload","description","about","langCode","selectSharedSettings","language","updateManagementProgress","ManagementProgress","InProgress","updateUser","updateUserFullInfo","bio","Complete","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","openChat","botUrl","appConfig","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","getStripeError","modal","AgeVerificationModal","MODALS","giftCodeModal","GiftCodeModal","boostModal","BoostModal","chatlistModal","ChatlistModal","UrlAuthModal","oneTimeMediaModal","OneTimeMediaModal","inviteViaLinkModal","InviteViaLinkModal","AttachBotInstallModal","reportAdModal","ReportAdModal","reportModal","ReportModal","WebAppModal","collectibleInfoModal","CollectibleInfoModal","mapModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","chatInviteModal","ChatInviteModal","paidReactionModal","PaidReactionModal","suggestMessageModal","SuggestMessageModal","suggestedPostApprovalModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","giftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","suggestedStatusModal","SuggestedStatusModal","emojiStatusAccessModal","EmojiStatusAccessModal","locationAccessModal","LocationAccessModal","aboutAdsModal","AboutAdsModal","giftUpgradeModal","GiftUpgradeModal","monetizationVerificationModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","preparedMessageModal","PreparedMessageModal","sharePreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","chatRefundModal","ChatRefundModal","priceConfirmModal","PriceConfirmModalAsync","PriceConfirmModal","isFrozenAccountModalOpen","FrozenAccountModal","deleteAccountModal","DeleteAccountModal","isAgeVerificationModalOpen","MODAL_KEYS","MODAL_ENTRIES","entries","pick","modalProps","ModalComponent","openChatAIWithInfo","getActions","unreadCount","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","containerRef","e","wrapper","currentTarget","closest","getAttribute","stopPropagation","RoomStorage","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","play","interval","setInterval","clearInterval","eventEmitter","on","Actions","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","summary","off","dotLottieRefCallback","handleMouseEnter","DotLottieReact","src","serenaWorkUrl","loop","autoplay","serenaWaitUrl","onMouseEnter","actionItemClassName","RoomActions","insertMessage","setIsLoading","scrollToBottom","useScrollToBottom","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","popoverContent","handleMediaSummarize","openRoomAttachmentsModal","Popover","trigger","placement","overlayClassName","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","Promise","all","isTon","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","TON_CURRENCY_CODE","ton","updateStarsBalance","isInbound","isOutbound","byId","buildCollectionByKey","gifts","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","values","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","push","starGifts","idsByCategory","resaleGifts","giftId","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","limit","RESALE_GIFTS_LIMIT","chats","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","updateUsers","updateChats","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","byTabId","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","shouldUnsave","requestInputGift","getRequestInputSavedStarGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","inputSavedGift","openStarsBalanceModal","samples","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","isPinned","newPinnedGifts","slug","inputSavedGifts","slice","price","requestSavedGift","reloadPeerSavedGifts","FOCUS_DURATION","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","POLL_RESULT_OPEN_DELAY_MS","VERSION_NOTIFICATION_DURATION","SERVICE_NOTIFICATIONS_MAX_AMOUNT","blurTimeout","copyTextForMessages","messageIds","lang","chatMessages","selectChatScheduledMessages","selectChatMessages","selectAllowedMessageActionsSlow","canCopy","sort","message1","message2","resultHtml","resultText","isChatChannel","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","join","scrollOffset","replaceThreadParam","replaceTabThreadParam","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","canEdit","targetIndexDelta","selectIsViewportNewest","replyToMsgId","chatMessageKeys","newIndex","indexOf","toString","Number","threadInfo","selectThreadInfo","updateDraftReplyInfo","replyToPeerId","quoteText","focusMessage","origin","volume","playbackRate","isMuted","timestamp","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","isSavedDialog","getIsSavedDialog","pinnedMessageIds","selectPinnedIds","String","noHighlight","noForumTopicPanel","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","shouldReplaceHistory","quote","quoteOffset","scrollTargetPosition","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","forceOnHeavyAnimation","direction","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","loadViewportMessages","shouldForceRender","onLoaded","shouldPreventComposerAnimation","fromChatId","replyingMessage","isShareMessageModalShown","storyId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","forwardMessages","toChatId","noAuthors","noCaptions","selectedMessages","forwardableMessageIds","selectCanForwardMessage","openForwardMenu","media","getMediaHash","cancelMessageMediaDownload","mediaHashes","originMessage","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","exitMessageSelectMode","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","split","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","parseHtmlAsFormattedText","versionNotification","createServiceNotification","maxId","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","sections","closeReportAdModal","closeReportModal","isSchedule","deleteMessageModal","isRoomAttachmentsModalOpen","randomId","additionalInfo","canReport","sponsorInfo","args","pendingSendArgs","starsForSendMessage","metaViewport","querySelector","defaultViewportContent","allowedZoomViewportContent","usePreventPinchZoomGesture","isDisabled","setAttribute","IS_PWA","addEventListener","preventEvent","removeEventListener","HistoryCalendar","shouldReplaceLast","premiumModal","promo","hideEffectInComposer","closeStoryViewer","closeStarsTransactionModal","closeGiftInfoModal","activeReactions","closeMiddleSearch","isStatisticsShown","monetizationStatistics","boostStatistics","contentToBeScheduled","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","currentChatId","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","orderedIds","position","nextId","deleteFolderDialogModal","toLanguageCode","updateRequestedChatTranslation","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","firstUnreadId","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","index","currentDateGroup","currentSenderGroup","isInAlbum","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","paidMedia","extendedMedia","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","senderId","paidMessageStars","suggestedPostInfo","postAuthorTitle","isActionMessage","inlineButtons","ADDED_SETS_THROTTLE","ADDED_SETS_THROTTLE_CHUNK","searchThrottled","throttle","loadRecentStickers","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","set","packs","currentEmoji","updateStickerSet","forEmoji","emoji","rebuildStickersForEmoji","searchGifs","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","customEmojis","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","i","pause","favorite","favoriteStickers","premium","greeting","sticker","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","documentId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","selectIsCurrentUserPremium","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","resultIds","searchWords","unshift","updateStickerSearch","config","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","APP_OUTDATED_TIMEOUT_MS","CALL_BUNDLE_LOADING_DELAY_MS","DEBUG_isLogged","Main","isMobile","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","isStoryViewerOpen","isForwardModalOpen","hasNotifications","hasDialogs","activeGroupCallId","safeLinkModalUrl","isHistoryCalendarOpen","shouldSkipHistoryAnimations","limitReached","openedCustomEmojiSetIds","isServiceChatReady","withInterfaceAnimations","wasTimeFormatSetManually","addedCustomEmojiIds","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","openedGame","gameTitle","isRatePhoneCallModalOpen","botTrustRequestBot","requestedAttachBotInChat","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","isPaymentModalOpen","isReceiptModalOpen","isReactionPickerOpen","isCurrentUserPremium","deleteFolderDialog","isMasterTab","noRightColumnAnimation","isSynced","isAccountFrozen","isAppConfigLoaded","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadStickerSets","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadFavoriteStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadConfig","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","toggleLeftColumn","loadRecentEmojiStatuses","loadUserCollectibleStatuses","loadTopReactions","loadRecentReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadAuthorizations","loadPeerColors","loadSavedReactionTags","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadPasswordInfo","loadBotFreezeAppeal","loadAllChats","loadAllStories","loadAllHiddenStories","closeRoomAttachmentsModal","loadContentSettings","DEBUG","console","log","useLang","useTimeout","loadBundle","Calls","leftColumnRef","useInterval","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","isAvailable","removeUpdateErrorListener","UPDATE_ERROR","isOnline","listType","BASE_EMOJI_KEYWORD_LANG","ignoreCache","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","link","parsedLocationHash","parseLocationHash","useLayoutEffect","container","parentNode","childElementCount","addExtraClass","noCloseTransition","prefix","willAnimateLeftColumnRef","forceUpdate","useForceUpdate","useSyncEffect","prevIsLeftColumnOpen","requestNextMutation","body","classList","toggle","endHeavyAnimation","beginHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","useFullscreenStatus","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","useLastCallback","isBlurred","handleFocus","INACTIVE_MARKER","updateIcon","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","handleRoomAttachmentsModalClose","useBackgroundMode","useBeforeUnload","LeftColumn","MiddleColumn","RightColumn","MediaViewer","StoryViewer","DraftRecipientPicker","Notifications","Dialogs","noUi","ModalContainer","SafeLinkModal","StickerSetModal","onClose","stickerSetShortName","CustomEmojiSetsModal","GroupCall","groupCallId","ActiveCallHeader","isActive","NewContactModal","isByPhoneNumber","GameModal","DownloadManager","ConfettiContainer","IS_WAVE_TRANSFORM_SUPPORTED","WaveContainer","SnapEffectContainer","PhoneCall","UnreadCount","isForAppBadge","RatePhoneCallModal","BotTrustModal","AttachBotRecipientPicker","MessageListHistoryHandler","PremiumMainModal","GiveawayModal","StarsGiftingPickerModal","PremiumLimitReachedModal","ReceiptModal","DeleteFolderDialog","folder","ReactionPicker","DeleteMessageModal","RoomAttachmentsModal","GuidanceModal","isLeftColumnShown","historyCalendarSelectedAt","notifications","dialogs","newContact","ratingPhoneCall","giveawayModal","payment","limitReachedModal","gameMessage","game","selectPerformanceSettingsValue","selectCanAnimateInterface","selectChatFolder","selectIsMediaViewerOpen","selectIsStoryViewerOpen","selectIsForwardModalOpen","selectIsReactionPickerOpen","selectIsServiceChatReady","groupCalls","phoneCall","receipt","useContainerHeight","isComposerVisible","getContainerHeight","setContainerHeight","handleResize","entry","contentRect","useResizeObserver","currentNormalHeight","dataset","normalHeight","containerHeight","prevContainerHeight","drawRect","x","y","radius","PinnedMessageNavigation","markupParams","useMemo","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","muted","then","currentTime","joinAudio","Audio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","groupCall","call","existingGroupCall","selectGroupCall","updateGroupCall","omit","isLoaded","participantsCount","requestGroupCallParticipants","isCallPanelVisible","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","inviteLink","selectChatFullInfo","canSelfUnmute","inviteHash","full","loadFullChat","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","toggleGroupCallPanel","createAudioElement","checkNavigatorUserMediaPermissions","selectChatGroupCall","leaveGroupCall","rejoin","safePlay","isVideo","participantId","adminId","silence","ctx","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","AudioContext","webkitAudioContext","srcObject","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","checkMicrophonePermission","catch","audio","RightPanel","drawerKey","drawerParams","closeDrawer","useDrawerStore","rightPanelContent","setRightPanelContent","DrawerKey","PersonalizeSettings","OriginalMessages","MessagePanel","relevantMessages","CustomizationPrompt","CustomizationPromptPanel","ChatPicker","ChatPickerPanel","AddTopicPanel","RightHeader","asUnread","querySelectorAll","replace","subtractXForEmojiInteraction","windowSize","get","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","currentReactions","reactions","areTags","currentSendAs","updateReactionCount","recentReactions","isOwn","reaction","addedDate","updateChatMessage","updateUnreadReactions","update","updateChat","updateVerifyMonetizationModal","PremiumRequiredPlaceholder","userName","useOldLang","openPremiumModal","handleOpenPremiumModal","Link","isPrimary","getUserFirstOrLastName","UnpinAllMessagesModal","FILTER_ID","waveInfo","wave","waves","setWaves","addWave","newWave","prevWaves","startX","startY","overlaySize","top","left","startTime","lastWaveTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","scale","xChannelSelector","yChannelSelector","removeSvgDefinition","teactFastList","buildStyle","onAnimationEnd","w","GlobalSummaryWrapper","injectComponent","component","GlobalSummary","isBot","sponsoredMessage","viewSponsored","clickSponsored","openAboutAdsModal","renderingSponsoredMessage","useCurrentOrPrev","useHeaderPane","withResizeObserver","onStateChange","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","shouldSkipModal","handleAboutClick","peerColor","photo","onMouseDown","onContextMenu","getApiPeerColorClass","info","BadgeButton","aboutAd","renderTextWithEntities","entities","Avatar","avatar","SponsoredMessageContextMenuContainer","anchor","triggerRef","onCloseAnimationEnd","selectSponsoredMessage","useResize","elementRef","onResize","onReset","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","requestMutation","widthPx","setProperty","handleMouseUp","remove","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","initResize","add","resetResize","LeftSearch","ContactList","NOTIFICATION_DURATION","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","duration","newAccountUrl","freeIndex","getAccountSlotUrl","slot","arr","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","color","emojiStatusId","hasSeparator","MenuItem","customIcon","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","updateUserSearch","globalUserIds","localUserIds","fetchingStatus","closeNewContactDialog","CreateTopic","viewportPinnedIds","lastFocusedId","usePinnedMessage","pinnedIds","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","useDerivedSignal","currentPinnedIndex","pinnedLength","clampIndex","handleIntersectPinnedMessage","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","shouldCancelWaiting","loadingPinnedId","newPinnedIndex","unique","focusedMessageId","selectFocusedMessageId","pinnedIndexAboveFocused","findIndex","maxViewportPinnedId","handleFocusPinnedMessage","listedIds","selectListedIds","isMessageLoaded","selectOutlyingListByMessageId","currentIndex","cycleRestrict","isImage","item","kind","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","LAYER_ANIMATION_DURATION_MS","isComments","isPrivate","isPinnedMessageList","currentUserBannedRights","defaultBannedRights","pinnedMessagesCount","customBackground","backgroundColor","patternColor","isRightColumnShown","isBackgroundBlurred","hasActiveMiddleSearch","isSelectModeActive","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","animationLevel","currentTransitionKey","isChannel","arePeerSettingsLoaded","canSubscribe","canStartBot","canRestartBot","activeEmojiInteractions","shouldJoinToSend","shouldSendJoinRequest","shouldLoadFullChat","canUnpin","canUnblock","canShowOpenChatButton","isContactRequirePremium","topics","paidMessagesStars","freezeAppealChat","isSerena","shouldBlockSendInMonoforum","openPreviousChat","unpinAllMessages","loadUser","loadPeerSettings","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isTablet","oldLang","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","prevTransitionKey","usePreviousDeprecated","cleanupExceptionKey","isReady","handleCssTransitionEnd","handleSlideTransitionStop","useIsReady","captureEscKeyListener","visualViewport","isFixNeeded","documentElement","clientHeight","requestMeasure","offsetTop","scrollTo","handleAnalyticsMessage","messageText","ASK_MEETING_TIMEZONE","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","ScheduleMeeting","meetingMentionMessage","createMeetingMentionMessage","ChataiStores","storeMessage","parseMessage2StoreMessage","emit","AddRoomAIMessage","IntentionToScheduleMeeting","n","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","Array","from","every","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","background","withTransition","customBgImage","customBgColor","blurred","withRightColumn","draggable","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","FrozenAccountPlaceholder","footerClassName","useHistoryBack","onBack","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","withExtraShift","onTransitionEnd","onMouseUp","onDoubleClick","onDragEnter","MiddleHeader","Transition","resolveTransitionName","activeKey","shouldCleanup","isBlockingAnimation","onStop","MessageList","onScrollDownToggle","onNotchToggle","withBottomShift","withDefaultBg","onIntersectPinnedMessage","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","EDITABLE_INPUT_CSS_SELECTOR","inputId","dir","isRtl","fluid","Icon","ripple","MessageSelectToolbar","SeenByModal","ReactorListModal","IS_TRANSLATION_SUPPORTED","ChatLanguageModal","RoomAIEntryWrapper","FloatingActionButtons","withScrollDown","MiddleSearch","onUnpin","activeEmojiInteraction","EmojiInteractionAnimation","teactOrderKey","selectTheme","selectThemeValues","messageLists","selectIsInSelectMode","isUserId","chatFullInfo","editingId","selectEditingId","isMessageThread","isCommentsInfo","fromChannelId","topic","selectTopic","getCanPostInChat","isBotNotStarted","selectIsChatBotNotStarted","isMainThread","isChatSuperGroup","isNotJoined","joinRequests","isMonoforum","isJoinToSend","isJoinRequest","isUserBlocked","selectIsUserBlocked","isChatGroup","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","selectIsMonoforumAdmin","selectTopics","ANONYMOUS_USER_ID","isCreator","isUserRightBanned","getHasAdminRight","userFull","selectPeerPaidMessagesStars","GLOBAL_SUMMARY_CHATID","withAnimations","setIsReady","willSwitchMessageList","propertyName","ScrollDownButton","ariaLabelLang","onReadAll","round","ariaLabel","formatIntegerCompact","Menu","autoClose","positionX","positionY","ConnectionStatusOverlay","connectionStatus","connectionStatusText","Spinner","PLAY_GAME_ACTION_INTERVAL","closeGame","sendMessageAction","useSendMessageAction","handleMessage","JSON","parse","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","openDrawer","titleError","setTitleError","promptError","setPromptError","initialValues","prompt","form","setForm","handleSave","trim","telegptSettings","updateSummarizeTemplate","res","showMessage","handleTopicNameChange","prev","handleTopicDescriptionChange","InputText","label","TextArea","noReplaceNewlines","FloatingActionButton","isShown","updateStatusesOnFullyIdle","throttleWithFullyIdle","replaceUserStatuses","statusesById","pendingStatusUpdates","deleteContact","translations","byChatId","localUser","areStoriesHidden","updatePeerStoriesHidden","loadFullUser","targetUserFullInfo","botInfo","menuButton","commands","copyMessagesByIds","handleCopy","getMessageIdsForSelectedText","useHotkeys","MessageStatistics","APP_VERSION_URL","FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION","MAX_STORED_EMOJIS","notificationInterval","management","screen","nextScreen","getIsTablet","statistics","currentMessageId","currentStoryId","currentMessage","currentStory","recentEmojis","newEmojis","newStickers","s","order","isCustomEmoji","notification","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","splice","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","existingErrorIndex","err","selectedAt","rest","confetti","lastConfettiTime","currentLastTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","byKey","shouldPaidMessageAutoApprove","emoticon","effect","availableEffectById","currentEffect","effectAnimationId","effectId","requestEffectInComposer","saveEffectInDraft","initialSection","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","point","fetch","response","getIsAppUpdateNeeded","isAppUpdateAvailable","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","NOTIFICATION_INTERVAL","prevIsScreenLocked","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","setPageTitleInstant","PAGE_TITLE","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","setPageTitle","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","ONLINE_TIMEOUT","addCallback","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","inlineBotSettings","updateWebApp","webAppUpdate","currentTabState","originalWebApp","updatedValue","updatedWebAppKey","webAppKey","isMoreAppsTabActive","activeWebAppKey","modalState","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isModalOpen","removeActiveWebAppFromOpenList","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","clearOpenedWebApps","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","hasOpenedWebApps","hasOpenedMoreThanOneWebApps","replaceWebAppModalState","replaceIsWebAppModalOpen","AUTOLOGIN_TOKEN_KEY","uploadProgressCallbacks","Map","runDebouncedForMarkRead","loadWithBudget","areAllLocal","isOutlying","isBudgetPreload","offsetId","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","isDeletedUser","newDraft","isLocal","draftDate","executeForwardMessages","sendParams","toThreadId","messagePriceInStars","isToMainThread","fromChat","toChat","a","b","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","messageSlices","maxForwardedCount","splitMessagesForForwarding","forwardParams","wasDrafted","forwardedLocalMessagesSlice","sendMessageOrReduceLocal","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","Forwards","realChatId","isDeleted","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","updateListedIds","outlyingList","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","updateThreadInfo","messagesCount","loadMessage","replyOriginForId","MESSAGE_DELETED","replyMessage","findClosestIndex","sourceIds","indexForDirection","to","areSomeLocal","isApiPeerChat","localMessage","sendMessage","currentMessageKey","rafPromise","progressCallback","attachment","progress","messageKey","updateUploadByMessageKey","delete","sendMessagesWithNotification","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","localForwards","firstMessage","firstSendParam","storySendMessage","isStoryReply","isReaction","titleKey","getMessageKey","fetchUnreadMentions","addUnreadMentions","checkIfVoiceMessagesAllowed","noVoiceMessages","moveReplyToNewDraft","currentDraft","onError","isRestricted","selectIsChatRestricted","isLocalMessageId","onTickEnd","selectRealLastReadId","threadUpdate","isDeleting","updateThreadUnreadFromForwardedMessage","storyPeerId","selectCurrentViewedStory","isForwarding","draftSuggestedPostInfo","storyReplyInfo","messageReplyInfo","suggestedPostPrice","suggestedPostCurrency","suggestedPostAmount","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isPending","isInvertedMedia","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userFullNames","userFullName","getUserFullName","selectEditingMessage","setEditingId","todo","cancelApiProgress","isMessageLocal","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","selectSavedDialogIdFromMessage","messageSuggestedPost","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","deleteMessages","dismissAction","isArray","dismissNotification","selectEditingScheduledId","activeChat","folders","chatFolders","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","option","MESSAGE_ID_REQUIRED_ERROR","oldSections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","minId","selectFirstUnreadId","lastReadInboxMessageId","readCount","countSortedIds","newTopicUnreadCount","updateTopic","shouldFetchUnreadReactions","fetchUnreadReactions","webPagePreview","webPagePreviewId","webPage","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","messageUpdate","updateWithLocalMedia","poll","selectPollFromMessage","shouldResetVoters","votes","vote","offsets","updateScheduledMessages","updatePeerFullInfo","hasScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","autoTranslateLanguage","voice","mediaHash","mediaLoader","blobUrl","blob","formData","FormData","append","audioToText","transcriptionText","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","updateSponsoredMessage","random","isMedia","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","urlAuthDomains","requestLinkUrlAuth","match","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","currentThreadId","newReplyInfo","replyToTopId","selectReplyCanBeSentToChat","closeMediaViewer","selectForwardsContainVoiceMessages","selectForwardsCanBeSentToChat","showAllowedMessageTypesNotification","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","SEND_VIEWS_TIMEOUT","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","updateQuickReplyMessages","updateQuickReplies","quickReplies","quickReplyId","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","getAttachmentType","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","cId","clear","sendWebAppEvent","eventData","supportedFilters","peerTypes","PollResultsAsync","PollResults","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","phone","filterPhone","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","is_call","is_open","topicName","topicDescription","handlePhoneNumberChange","updateUrgentTopic","setSettingOption","Switch","checked","useCacheBuster","cacheBuster","setCacheBuster","updateNotifyDefaults","peerType","addNotifyException","notifySettings","TRANSITION_RENDER_COUNT","LeftColumnContent","BUTTON_CLOSE_DELAY_MS","closeTimeout","LeftMain","searchQuery","searchDate","isClosingSearch","contactsFilter","shouldSkipTransition","foldersDispatch","isForumPanelOpen","onSearchQuery","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","getItem","UPDATE_DEFER_KEY","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","ChatList","isForumPanelVisible","isMouseInside","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","AITranslate","handleSelectContacts","Contacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","force_update_store_url","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseLeave","LeftMainHeader","shouldHideSearch","onSelectSettings","onSelectContacts","onSelectArchived","onSelectAIKnowledge","onSelectAITranslate","renderCount","shouldWrap","wrapExceptionKey","ChatFolders","shouldHideFolderTabs","GlobalSearch","badge","ForumPanel","onOpenAnimationStart","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","Statistics","days","selfDestructAccountDays","Message","getCurrentUserInfo","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","useChat","api","SERVER_API_URL","sendExtraMessageFields","initialMessages","role","languagePrompt","handleInput","handleReply","handleFocusMessage","Skeleton","active","paragraph","renderMessage","formatTimestamp","isUser","ChatAvatar","cn","bestMatch","getBestKnowledgeMatch","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","alt","ArrowRightIcon","SendIcon","CustomVirtualList","listData","ErrorBoundary","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","VIDEO_PROCESSING_NOTIFICATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","areDeepEqual","localPaidReaction","r","localAmount","localIsPrivate","localPeerId","addPaidReaction","startActiveReaction","containerId","hasUnreadReactionsForMessageInChat","unreadReactions","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","notifyAboutMessage","isScheduled","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","getMessageReplyInfo","selectThreadByMessage","updateListedAndViewportIds","savedDialogId","isUnreadChatNotLoaded","candidateGlobal","addViewportId","updateChatLastMessage","currentLastMessageId","selectTopicFromMessage","updateChatLastMessageId","findLastMessage","deleteParticipantHistory","deleteThread","threadIdsToUpdate","deleteTopic","deletePeerPhoto","requestChatUpdate","idsSet","newLastMessage","loadTopicById","isAnimatingAsSnap","selectCanAnimateSnapEffect","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","newLastSavedDialogMessage","requestSavedDialogUpdate","deleteScheduledMessages","deleteChatScheduledMessages","scheduledMessages","shouldForceReply","getStoryReplyInfo","isForumTopic","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyData","updatePoll","replaceWebPage","reportDeliveryUntilDate","reportMessageDelivery","selectIsChatListed","loadTopChats","lastMessage","addMessages","getMessageText","animatedEffect","selectScheduledIds","threadScheduledIds","isFromNew","clearMessageTranslation","updateQuickReplyMessage","deleteQuickReplyMessages","deleteQuickReply","newScheduledMessageId","fileUploads","byMessageKey","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","removeChatFromChatLists","channelId","pollId","pollUpdate","updatePollVote","isBought","invoice","paidMediaUpdate","transcriptions","sendingState","updateMessageTranslations","Content","MESSAGE_REACTIONS_POLLING_INTERVAL","MESSAGE_COMMENTS_POLLING_INTERVAL","MESSAGE_FACT_CHECK_UPDATE_INTERVAL","MESSAGE_STORY_POLLING_INTERVAL","BOTTOM_THRESHOLD","UNREAD_DIVIDER_TOP","SCROLL_DEBOUNCE","MESSAGE_ANIMATION_DURATION","BOTTOM_FOCUS_MARGIN","SELECT_MODE_ANIMATION_DURATION","UNREAD_DIVIDER_CLASS","runDebouncedForScroll","autoTranslate","isChatLoaded","isChannelChat","isGroupChat","isChannelWithAvatars","isChatMonoforum","isSystemBotChat","isAnonymousForwards","isNonContact","nameChangeDate","photoChangeDate","isViewportNewest","restrictionReasons","isEmptyThread","focusingId","hasLinkedChat","noMessageSendingAnimation","isServiceNotificationsChat","channelJoinInfo","isChatProtected","hasCustomGreeting","monoforumChannelId","setScrollOffset","loadSponsoredMessages","loadMessageReactions","loadPeerStoriesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoFirstUnreadIdRef","memoUnreadDividerBeforeIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","areMessagesLoaded","useNativeCopySelectedMessages","messageGroups","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","storyIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","useStickyDates","handleScroll","focusedMessage","parentElement","scrollTop","prevContainerHeightRef","offsetHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","element","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","lastItemElement","firstUnreadElement","getMessageHtmlId","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","contains","removeExtraClass","requestForcedReflow","bottomOffset","isAtBottom","isAlreadyFocusing","shouldScrollToBottom","isBackgroundModeActive","animateScroll","margin","forceDuration","isResized","unreadDivider","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","restartCurrentScrollAnimation","useEffectWithPrevDeps","prevIsSelectModeActive","noAvatars","shouldRenderGreeting","isGroupChatJustCreated","isEmptyTopic","hasMessages","Restricted","PremiumRequired","ContactGreeting","NoMessages","AccountInfo","StarsRequired","onScroll","preventMessageInputBlur","RequirementToContactMessage","MessageListAccountInfo","MessageListContent","canShowAds","shouldRenderAccountInfo","noAppearanceAnimation","selectCurrentMessageIds","selectActiveRestrictionReasons","selectChatLastMessage","withLastMessageWhenPreloading","chatBot","businessIntro","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","areProfilesShown","isSystemBot","isAnonymousForwardsChat","linkedChatId","joinInfo","selectIsChatProtected","defaultStickers","lastUnreadMessageId","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","explainer","INFINITE_LOOP_MARKER","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","expireDate","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","lastReadStoryId","isFullyLoaded","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","loadPeerStories","shouldAddToRecent","previousReaction","sentReaction","updateSentStoryReaction","stopActiveReaction","isForPast","isForFuture","BACK_BUTTON_INACTIVE_TIME","EMOJI_STATUS_SIZE","SEARCH_LONGTAP_THRESHOLD","typingStatus","isSyncing","isFetchingDifference","emojiStatusSticker","emojiStatusSlug","openThreadWithInfo","openStickerSet","updateMiddleSearch","openUniqueGiftBySlug","isBackButtonActive","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","handleLongPressMouseDown","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","threshold","setBackButtonActive","handleUserStatusClick","fromUserId","handleChannelStatusClick","handleBackClick","messageInput","isAudioPlayerActive","isAudioPlayerRendering","useConnectionStatus","renderBackButton","asClose","withUnreadCounter","UnreadCounter","useElectronDrag","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","selectThreadParam","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","openUserPortrait","usernames","langs","tags","tag","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","_extends","withPortal","noCompact","UserPortraitBasicCard","updateManagement","isUsernameAvailable","checkedUsername","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","isRevoked","admin","invites","revokedInvites","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","AIKnowledge","resetMiddleSearch","updateSharedMediaSearchType","PickerChatItem","isChecked","isSelf","customPeer","realPeer","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","clickOpenRoom","getOrderedIds","ALL_FOLDER_ID","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","buildQueryString","LOGO_DIMENSIONS","MINIMAL_SIZE","makeGoodArtwork","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","getCoverSize","thumbnailSizes","AVATAR_FULL_DIMENSIONS","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","useAsync","buildMediaMetadata","artwork","finalValue","MultiInput","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","GifSearchAsync","GifSearch","chargedPaidMessageStars","openChatRefundModal","handleRefund","formatStarsAsIcon","asFont","messageStarIcon","containerClassName","messageStars","withMarkdown","withNodes","isText","noForcedUpperCase","pill","peerFullInfo","RoomAIInner","pageInfo","setPageInfo","lastTime","tokenRef","scrollLocked","isScrollLock","CHATAI_IDB_STORE","token","handleAddSummaryMessage","newMessages","initDate","getMessages","localChatAiMessages","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleLoadMore","handleCreateCalendarSuccess","delMessage","createGoogleLoginMessage","mergeMesssage","uuidv4","createdAt","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","msgs","storeMessages","deleteMessage","rightPanelBg","Messages","loadMore","toolsEmbeddingStore","similaritySearch","similarItems","searchPortrait","getHitTools","formMessage","toolResults","toolCall","toolName","auth","getAuthState","isTokenValid","keyword","createUserPortraitMessage","toolsHitCheck","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","globalSearchChatId","currentContent","isMessageListOpen","isConnectionStatusMinimized","areChatsLoaded","canSetPasscode","setGlobalSearchDate","setSharedSettingOption","setGlobalSearchChatId","lockScreen","searchMessagesGlobal","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","hasMenu","selectedSearchDate","formatDateToString","connectionStatusPosition","handleLockScreenHotkey","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","shouldResetResultsByType","isSearchRelevant","isSearchFocused","searchInputPlaceholder","IS_BETA","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","footer","forceOpen","transformOriginX","IS_MAC_OS","LeftSideMenuItems","onBotMenuOpened","onBotMenuClosed","GlobalSearchContent","AI","SearchInput","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","autoComplete","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","minDate","globalSearch","listIds","selectCanSetPasscode","TABS","foundIds","mediaSearchType","setSharedMediaSearchType","searchSharedMediaMessages","transitionRef","tabs","tab","initialTab","activeTab","setActiveTab","handleSwitchTab","renderingActiveTab","tabType","resultType","getMore","isFirstTab","applyTransitionFix","releaseTransitionFix","useTransitionFixes","resetCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","handleTransitionStop","handleSelectMedia","isUrl","checkIsUrl","photoSummary","webPageSummary","documentSummary","videoSummary","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","TabList","onSwitchTab","InfiniteScroll","onLoadMore","noScrollRestore","noFastList","noSpinner","NothingFound","Media","isProtected","observeIntersection","getMessageDocument","withDate","smaller","canAutoLoad","autoLoadFileMaxSizeMb","SHARED_MEDIA_SLICE","onSelect","WebLink","onlyWebPage","onMessageClick","renderContent","currentType","resultsByType","selectCurrentSharedMediaSearch","chatsById","usersById","userStatusesById","INTERSECTION_DEBOUNCE_MS","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","isDownloading","canAutoLoadMedia","canAutoPlayMedia","hideSponsored","openMediaViewer","contentRef","shouldObserve","debounceMs","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","MediaViewerOrigin","isSponsoredMessage","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","PeerColorWrapper","Photo","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","isRectangular","MessageAppendix","SponsoredContextMenuContainer","activeDownloads","selectActiveDownloads","downloadableMedia","getIsDownloading","selectCanAutoLoadMedia","selectCanAutoPlayMedia","LOCAL_BOOST_COOLDOWN","sendStripeCredentials","publishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","credentials","headers","Authorization","json","setStripeCardInfo","setPaymentStep","PaymentStep","Checkout","sendSmartGlocalCredentials","publicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","descriptionKey","setSmartGlocalCardInfo","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","payInputStarInvoice","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","handlePaymentFormError","formPrice","totalAmount","openPriceConfirmModal","originalAmount","newAmount","directInfo","formId","sendStarPaymentForm","saveInfo","selectPaymentInputInvoice","updatePayment","isExtendedMedia","shouldHideName","shouldUpgrade","months","openStarsTransactionFromReceipt","setReceipt","nativeProvider","selectProviderPublishableKey","selectProviderPublicToken","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","forUserId","forPeerId","starsGiftOptions","closeBoostModal","boostStatus","myBoosts","boosts","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","cooldownUntil","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","closeGiftWithdrawModal","TRANSITION_DURATION","PROGRAMMATIC_SCROLL_TIMEOUT_MS","runThrottledForScroll","isScrollingProgrammatically","useProfileState","profileState","onProfileStateChange","allowAutoScrollToTabs","handleStopAutoScrollToTabs","prevTabType","tabsEl","getStateFromTabType","prevProfileState","ProfileState","Profile","tabListEl","maxDistance","determineProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","MAX_LENGTH","SHOW_LOADER_DELAY","EMOJI_SIZE","topMessageSender","clickBotInlineButton","pinMessage","loadPinnedMessages","useDerivedState","pinnedMessageId","pinnedMessage","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","useMessageMediaHash","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","shouldForceOpen","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","fullWidth","mini","loading","pinListIcon","pinListIconHidden","ConfirmDialog","confirmLabel","confirmHandler","noHover","pictogramTransition","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","pinnedThumb","pinnedThumbImage","playsInline","disablePictureInPicture","MediaSpoiler","isVisible","renderPictogram","withMedia","AnimatedCounter","renderText","messageTextTransition","MessageSummary","truncateLength","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","renderKeyboardButtonText","selectForwardedSender","firstPinnedMessage","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","FAB_THRESHOLD","NOTCH_THRESHOLD","CONTAINER_HEIGHT_DEBOUNCE","TOOLS_FREEZE_TIMEOUT","useScrollHooks","loadMoreBackwards","loadMoreForwards","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","fabTrigger","fabOffsetTop","scrollBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","withHistoryTriggers","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","PROFILE_PHOTOS_FIRST_LOAD_LIMIT","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","topPeers","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","addContact","addUser","commonChats","selectUserCommonChats","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","starsToRefund","shouldSharePhoneNumber","updateChatMutedState","isContact","isPreload","updatePeerPhotosIsLoading","photos","nextOffsetId","updatePeerPhotos","newPhotos","currentSearchQuery","userSearch","updateUserSearchFetchingStatus","accountResultIds","globalResultIds","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","AddChatMembers","members","onNextStep","localContactIds","isSearching","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","allowMultiple","withStatus","itemInputType","NewChatMembersProgress","BotApps","PublicPosts","checkSearchPostsFlood","globalResults","localResults","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","ManagementScreens","blurSearchInput","searchInput","isChatSelected","nextManagementScreen","toggleChatInfo","toggleChatAIInfo","toggleManagement","setStickerSearchQuery","setGifSearchQuery","closePollResults","addChatMembers","setNewChatMembersDialogState","setEditingExportedInvite","toggleStatistics","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","closeBoostStatistics","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","managementScreen","setManagementScreen","Initial","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isProfile","ChatInfo","isChatAI","ChatAI","isManagement","Management","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","BoostStatistics","isMonetizationStatistics","MonetizationStatistics","isStickerSearch","StickerSearch","isGifSearch","isPollResults","isAddingChatMembers","AddingMembers","isCreatingTopic","isEditingTopic","EditTopic","isUserPortrait","UserPortrait","isOverlaying","setShouldSkipTransition","renderingContentKey","useScrollNotch","selector","shouldScrollUp","Closed","forceSyncOnIOs","ChatPrivacyType","Discussion","GroupPermissions","GroupType","ChatAdministrators","ChannelSubscribers","GroupMembers","Invites","Reactions","JoinRequests","ChannelRemovedUsers","GroupUserPermissionsCreate","GroupRemovedUsers","GroupUserPermissions","NewDiscussionGroup","ChatAdminRights","ChatNewAdminRights","GroupAddAdmins","GroupRecentActions","EditInvite","InviteInfo","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","currentScreen","onScreenSelect","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","isColumnOpen","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","getTime","parseSummaryStoreMessage2Message","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","globalSummaryTask","initSummaryChats","parseMessage2SummaryStoreMessage","globaSummaryBg","SerenaPath","SummaryHeaderActions","UrgentNotification","SAVED_MESSAGES_HOTKEY","FIRST_FOLDER_INDEX","chatFoldersById","orderedFolderIds","activeChatFolder","maxFolders","maxChatLists","folderInvitesById","maxFolderInvites","hasArchivedChats","hasArchivedStories","isStoryRibbonShown","sessions","aiChatFolders","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","isStoryRibbonClosing","scrollToTop","activeList","behavior","allChatsFolder","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_ID","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","folderId","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","isNotInFirstFolderRef","handleKeyDown","ctrlKey","digit","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","isShowTip","tipShowRes","UpdateAIChatFoldersApplying","placeholderRef","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","folderType","isMainList","canDisplayArchive","activeTag","shouldRenderFolders","StoryRibbon","contextRootElementSelector","AIChatFoldersTip","PresetTagModal","setActiveTag","ActiveTag","archived","orderedPeerIds","archivedStories","storyViewer","isRibbonShown","filterAIFolder","PRESET_TAGS","tagList","getAITags","dialogStyle","currentTag","onClickTag","shouldRemove","removeGroupCall","isCallNotEmpty","participants","participant","updateGroupCallParticipant","playGroupCallSound","hangUp","needRating","selectPhoneCallUser","notifyAboutCall","selectedTabIndex","setSelectedTabIndex","SummarizeTab","UrgentAlertTab","CarouselItem","children","GuidanceCarousel","handleClose","carouselRef","handleNextClick","goTo","CloseIcon","Carousel","GuidanceWrapper","HIDDEN_RENDER_DELAY","INTERSECTION_THROTTLE","monoforumChannel","pinnedStoryIds","archiveStoryIds","storyByIds","hasCommonChatsTab","hasStoriesTab","hasMembersTab","hasPreviewMediaTab","hasGiftsTab","botPreviewMedia","areMembersHidden","canAddMembers","canDeleteMembers","commonChatIds","adminMembersById","shouldWarnAboutSvg","similarChannels","similarBots","limitSimilarPeers","isTopicInfo","loadMoreMembers","loadCommonChats","openAudioPlayer","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","noProfileInfo","useProfileViewportIds","searchMessages","loadStories","loadMoreGifts","groupChatMembers","usePeerStoriesPolling","throttleMs","handleNewMemberDialogOpen","handleSelectPreviewMedia","standaloneMedia","PreviewMedia","mediaIndex","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","MEMBERS_SLICE","noScrollRestoreOnTop","renderProfileInfo","shouldRestoreHeight","noContent","isSpinner","forceRenderHiddenMembers","isViewportIdsEmpty","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","nonInteractive","noLoop","MediaStory","isArchive","onDateClick","AudioOrigin","onPlay","getSenderName","ListItem","adminMember","forceShowSelf","avatarSize","SavedGift","renderSpinnerOrContent","DeleteMemberModal","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isGroup","isChatAdmin","isForbidden","canViewMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","commonChatsCount","hasPreviewMedia","hasPinnedStories","starGiftCount","peerGifts","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","hasBackDrawer","HeaderButton","setTitle","handleBack","isAvatarView","withDynamicLoading","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","Inline","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","REGULAR_PLAYBACK_RATE","DEFAULT_FAST_PLAYBACK_RATE","mediaDuration","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","renderingMessage","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RangeSlider","bold","onHide","onMouseEnterBackdrop","renderPlaybackRateMenuItem","currentRate","isSelected","selectMessageMediaDuration","GLOBAL_UPDATE_DEBOUNCE","processedHashes","downloadedHashes","cancelMediaHashDownloads","runDebounced","useRunDebounced","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","ApiMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","useInfiniteScrollForLoadableItems","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useInfiniteScroll","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","MESSAGE_SEARCH_SLICE","BOT_VERIFICATION_ICON_SIZE","DISPLAY_DURATION_MS","wasShown","botVerification","markBotVerificationInfoShown","markAsShowed","CustomEmoji","iconId","selectPeerFullInfo","nextTitle","setWindowTitle","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","onCheck","GIFT_STICKER_SIZE","fromPeer","hasAdminRights","currentUserEmojiStatus","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","getTriggerElement","getRootElement","getMenuElement","getLayout","avatarPeer","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","radialPattern","backgroundColors","patternIcon","topIcon","stickerWrapper","shouldPreloadPreview","hiddenGift","priceBadge","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","star","GiftRibbon","GiftMenuItems","StoryViewerAsync","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","areDatesClickable","observeIntersectionForReading","useMessageObservers","renderPaidMessageAction","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","tableData","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","MiniTable","messageCountToAnimate","messageGroup","flat","appearanceIndex","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withAvatar","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","firstMessageId","SenderGroupContainer","calculateSenderGroups","SCHEDULED_WHEN_ONLINE","formatHumanDate","buttonClassName","tabIndex","INTERACTION_RANDOM_OFFSET","interactionLocalId","availableReaction","aroundAnimation","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effectReactions","startSize","isReversed","interactions","timestamps","selectDefaultReaction","toggleReaction","isInSaved","isInDocumentGroup","documentGroupFirstMessageId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","paidReaction","resetLocalPaidReactions","currentActiveReactions","newActiveReactions","newMessageActiveReactions","defaultReaction","reactors","interaction","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","getReactionKey","newTag","TYPING_STATUS_CLEAR_DELAY","INVALIDATE_FULL_CHAT_FIELDS","localChat","prevIsForum","lastReadOutboxMessageId","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","currentTypingStatus","isFromScheduled","hasMention","hasUnreadMention","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","loadChatJoinRequests","replacePinnedTopicIds","loadTopics","isForumAsMessages","photoId","replacePeerPhotos","waitBlob","Blob","serenaWaiting","createObjectURL","workBlob","serenaWorking","idPrefix","useIsIntersecting","transitionClassNames","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","oldOrder","newOrder","reorderStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","receiver","canShowSender","originSender","isRepliesChat","updateInsertingPeerIdMention","messageSender","markShown","MESSAGE_APPEARANCE_DELAY","isAvatarPeerUser","handleMention","handleAvatarClick","avatarRef","contextMenu","canMention","shouldRenderContextMenu","avatarContainer","SenderGroupAvatar","ownProps","forceSenderName","isAnonymousOwnMessage","shouldSkipConfirmation","openWebAppsCloseConfirmationModal","miniAppsCachedPosition","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","callAttachBot","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","ICON_SIZE","renderScheduled","renderSavedMessages","renderGroup","renderTopic","TopicIcon","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","closeMonetizationVerificationModal","handleGetMoreStars","inner","iconsContainer","Unlock","animatedUnlock","commentsIcon","starIcon","starIconContainer","Sparkles","preset","AboutMonetizationModal","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","stickerSearch","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","setContextMenuAnchor","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","ResponsiveHoverButton","onActivate","senderAvatar","isDragging","setIsDragging","setPosition","dragStartRef","hasDraggedRef","isDraggingRef","positionRef","loadPosition","savedPosition","savePosition","setItem","longPressTimerRef","deltaX","deltaY","clientY","newPosition","minX","innerWidth","maxY","innerHeight","RoomAIEntryButton","isLoadingFullUser","phoneCodeList","phoneCountry","registrationMonth","getCountryCodeByIso","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","securityNameInfo","time","formatPastDatetime","securityPhotoInfo","chatDescription","isoToEmoji","iso2","defaultName","formatRegistrationMonth","linkInfo","AvatarList","chatInfo","botBackground","OptimizedVideo","canPlay","forceAspectRatio","botInfoDescription","botInfoTitle","chatBackground","chatInfoTitle","chatInfoSubtitle","textColor","keyClassName","isVerified","chatNotVerified","verifiedTitle","countryList","phoneCodes","APP_VERSION_REGEX","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","test","localeCompare","numeric","sensitivity","twoFaSettings","ConnectionStatus","hasMiddleHeader","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","StatusPickerMenu","handleShowRightPanel","getGptSettings","SettingIcon","onDelete","MediaViewerAsync","RoomsTab","ignoredIds","onIgnored","onUnIgnored","unIgnoreIds","renderRoomItem","isIgnored","canInstall","attachBots","accountsTotalLimit","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","AIKnowledgeIcon","AITranslateIcon","AIChatFolderIcon","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","noAnimation","Toggle","isCharIcon","WEB_VERSION_BASE","getPromptInstall","MEDIA_PRELOAD_OFFSET","searchSharedMedia","resultChatId","totalCount","newFoundIds","updateSharedMediaSearchResults","selectCurrentChatMediaSearchSegment","currentMediaMessageId","isInsideSortedArrayRange","currentSegment","segments","segment","calcChatMediaSearchAddOffset","calcChatMediaSearchOffsetId","calcLoadMoreDirection","currentSegmentFoundIdsCount","idIndexInSegment","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","halfMediaCount","preloadOffset","lastMediaIndex","calcLoadingState","newFoundIdsCount","searchChatMedia","chatMediaSearchParams","CHAT_MEDIA_SLICE","setChatMediaSearchLoading","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","currentSearch","savedTag","isHashtag","shouldReuseParams","offsetRate","nextOffsetRate","offsetPeerId","nextOffsetPeerId","offsetPeer","fetchingQuery","hashtag","getSearchResultKey","hasTagChanged","updateMiddleSearchResults","cleanQuery","requestedQuery","currentResults","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","ArchivedChats","lovelyChartPromise","LovelyChart","ensureLovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","section","StatisticsOverview","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","monetization","DEBOUNCE","STICKY_TOP","markIsScrolled","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","RoomAI","COLUMN_ANIMATION_DURATION","HeaderContent","stickerSearchQuery","gifSearchQuery","isEditingInvite","canViewStatistics","isInsideTopic","canEditTopic","canEditBot","giftProfileFilter","canUseGiftFilter","canUseGiftAdminFilter","realTimeAssistants","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimited","shouldIncludeUnlimitedGifts","shouldIncludeLimited","shouldIncludeLimitedGifts","shouldIncludeUnique","shouldIncludeUniqueGifts","shouldIncludeDisplayed","shouldIncludeDisplayedGifts","shouldIncludeHidden","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","handleDeleteInviteClick","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","selectCurrentStickerSearch","selectCurrentGifSearch","getCanManageTopic","getCanAddContact","selectCanManage","selectCanUseGiftProfileFilter","selectCanUseGiftProfileAdminFilter","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","urgent_info","ignored_urgent_chat_ids","selectUrgentChatIds","getIdsFromEntityTypes","setTopics","setIgnoredIds","deleteUrgentTopic","t","handleIgnored","newSelected","entityTypes","buildEntityTypeFromIds","urgentCheckTask","updateUrgentChats","handleUnIgnored","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","giveawayBoostsPerPremium","loadMoreBoosters","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","selectIsGiveawayGiftsPurchaseAvailable","LockScreen","isLocked","passcodeSettings","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","menuItems","SummaryItem","template","selectedTemp","handleSelect","user_id","AddSummaryTemplate","handleAdd","curious_info","ignored_summary_chat_ids","curious_id","ignoredChatIds","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","actionsVisable","isEqual","handleTemplateSelect","selectedId","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","EFFECT_DURATION_MS","collectibleStatuses","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","delay","until","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","success","readOnly","inputMode","maxLength","maxLengthIndicator","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","resizeHeight","textarea","previousSelectionEnd","selectionEnd","htmlFor","DialogsAsync","ContentType","RENDER_COUNT","RESET_TRANSITION_DELAY_MS","settingsScreen","isFirstChatFolderActive","nextFoldersAction","isChatOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","EditProfile","General","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","prevSettingsScreenRef","usePrevious","NewChat","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","withSwipeControl","leftColumn","isArchivedRibbonShown","selectIsForumPanelOpen","telegptGuidance","isFirstIn","setIsFirstIn","noBackdropClose","RELEASE_STATUS_TIMEOUT","releaseStatusTimeout","loadAndReplaceMessages","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","loadTopMessages","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","shouldCloseChatOnError","threads","updateThread","preloadTopChatMessages","initFolderManager","whenFirstBatchDone","authState","sync","NotificationsAsync","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","isSinglePeer","isSingleStory","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","lastViewedByPeerId","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","areStoriesBlocked","updatedViews","view","closeChat","MessageHistoryRecord","createLocationHash","FOCUS_MARGIN","mentionsCount","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","messageElements","lastMessageElement","revealed","hideScrollDown","noComposer","noExtraShift","transformDown","unread","shouldShowCount","INTERSECTION_THROTTLE_FOR_READING","INTERSECTION_THROTTLE_FOR_MEDIA","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freezeForReading","unfreezeForReading","mentionIds","reactionIds","scheduledToUpdateViews","shouldUpdateViews","albumMainId","hasUnreadReaction","StickerSearchAsync","teactExperimentControlled","context","maxDate","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","localTopics","totalTopicsCount","tryParseDeepLink","getMessageByPublicLink","getMessageByPrivateLink","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","selectChatByUsername","getChatGroupOrChannelMessage","internalChannelId","toChannelId","searchResult","sponsoredResult","timestampPlusDay","shouldCheckFetchingMessagesStatus","popularBotApps","botApps","searchFlood","processOriginStarsPayment","clearPayment","prevFilter","updatedFilter","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen"],"sourceRoot":""}