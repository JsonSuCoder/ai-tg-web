{"version":3,"file":"2859.bdd0d1f1f410fa3a5cd8.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n  ApiTopic,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  AI_FOLDER_ID,\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  MAX_INT_32,\n  PRESET_FOLDER_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  UNREAD_FOLDER_ID,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addNotifyExceptions,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceNotifyExceptions,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { GLOBAL_SUMMARY_CHATID } from '../../../components/chatAssistant/variables';\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../../../components/chatAssistant/store\"\nimport { selectSharedSettings } from \"../../selectors/sharedState\"\nimport { filterAIFolder } from \"../../../components/chatAssistant/ai-chatfolders/util\"\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.markChatRead({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = selectIsCurrentUserFrozen(global) ? undefined\n    : await callApi('fetchDiscussionMessage', {\n      chat: selectChat(global, loadingChatId)!,\n      messageId: Number(loadingThreadId),\n    });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  let { mutedUntil } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if (isMuted && !mutedUntil) {\n    mutedUntil = MAX_INT_32;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { mutedUntil } });\n});\n\naddActionHandler('updateChatSilentPosting', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { isSilentPosting: isEnabled } });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isMuted, mutedUntil,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, mutedUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n  if (chatFolders) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n  // load folder to db\n  if (chatFolders?.byId && Object.keys(chatFolders?.byId).length > 0) {\n    const allFolderDb = await ChataiStores.folder?.getAllFolders();\n    allFolderDb?.forEach(async (item) => {\n      if (Object.keys(chatFolders?.byId).indexOf(item?.id + '') < 0) {\n        await ChataiStores.folder?.deleteFolder(item?.title);\n      }\n    })\n    Object.keys(chatFolders?.byId)?.forEach(async (folderId) => {\n      const folderInfo = chatFolders?.byId[Number(folderId)];\n      const exist = allFolderDb?.findIndex(o=>o?.title === folderInfo.title?.text)\n      if (exist && exist < 0) {\n        await ChataiStores.folder?.addFolder({\n          id: Number(folderId),\n          title: folderInfo?.title?.text,\n          includedChatIds: folderInfo?.includedChatIds,\n          excludedChatIds: folderInfo?.excludedChatIds,\n          from: 'user'\n        });\n      }\n    });\n  }\n  const { aiChatFolders } = selectSharedSettings(global);\n  if (aiChatFolders === true) {\n    const allAiChatFolders = await ChataiStores.aIChatFolders?.getAllAIChatFolders()\n    const activePresetTag = await ChataiStores.general?.get(GLOBAL_PRESET_TAG)\n    const activeAITag = await ChataiStores.general?.get(GLOBAL_AI_TAG)\n    if (allAiChatFolders && allAiChatFolders?.length > 0) {\n      global = getGlobal();\n      let orderedIds = (chatFolders?.orderedIds ?? []);\n      if (global.chatFolders.aiChatFolders?.list &&\n        global.chatFolders.aiChatFolders?.list?.length > 0\n      ) {\n        orderedIds.splice(3, 0, UNREAD_FOLDER_ID)\n        orderedIds.push(PRESET_FOLDER_ID)\n        orderedIds.push(AI_FOLDER_ID)\n      }\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n          aiChatFolders: {\n            activePresetTag,\n            activeAITag,\n            list: allAiChatFolders\n          },\n        },\n      };\n      setGlobal(global);\n    }\n  } else {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: filterAIFolder(chatFolders?.orderedIds ?? []),\n        aiChatFolders: {\n          activePresetTag: [],\n          activeAITag: [],\n          list: []\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate, from = 'user' } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      }\n    });\n\n    ChataiStores.folder?.addFolder({\n      id,\n      title: folderUpdate?.title?.text,\n      includedChatIds: folderUpdate?.includedChatIds,\n      excludedChatIds: folderUpdate?.excludedChatIds,\n      from\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId(), from = 'user' } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  await ChataiStores.folder?.addFolder({\n    id: newId,\n    title: folderUpdate?.title?.text,\n    includedChatIds: folderUpdate?.includedChatIds,\n    excludedChatIds: folderUpdate?.excludedChatIds,\n    from\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n    await ChataiStores.folder?.deleteFolder(folder.title.text)\n  }\n});\n\naddActionHandler('markChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  void callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markChatMessagesRead', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  if (!chat.isForum) {\n    await callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    actions.readAllMentions({ chatId: id });\n    actions.readAllReactions({ chatId: id });\n    if (chat.hasUnreadMark) {\n      actions.markChatRead({ id });\n    }\n    return;\n  }\n\n  let hasMoreTopics = true;\n  let lastTopic: ApiTopic | undefined;\n  let processedCount = 0;\n\n  while (hasMoreTopics) {\n    const result = await callApi('fetchTopics', {\n      chat, offsetDate: lastTopic?.date, offsetTopicId: lastTopic?.id, offsetId: lastTopic?.lastMessageId, limit: 100,\n    });\n\n    if (!result?.topics?.length) return;\n\n    result.topics.forEach((topic) => {\n      if (!topic.unreadCount && !topic.unreadMentionsCount && !topic.unreadReactionsCount) return;\n      actions.markTopicRead({ chatId: id, topicId: topic.id });\n    });\n\n    lastTopic = result.topics[result.topics.length - 1];\n    processedCount += result.topics.length;\n    if (result.count <= processedCount) {\n      hasMoreTopics = false;\n    }\n  }\n});\n\naddActionHandler('markChatRead', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n\n  callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n  actions.readAllMentions({ chatId, threadId: topicId });\n  actions.readAllReactions({ chatId, threadId: topicId });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, force } = payload;\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePaidMessagesPrice', async (global, actions, payload): Promise<void> => {\n  const { chatId, paidMessagesStars, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('updatePaidMessagesPrice', {\n    chat,\n    paidMessagesStars,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = updateChat(global, chatId, { paidMessagesStars });\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n  const shouldReplaceStaleState = listType === 'active' && isFirstBatch;\n  const isAccountFreeze = selectIsCurrentUserFrozen(global);\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch && !isAccountFreeze,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch && !isAccountFreeze,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n  }\n\n  if (shouldReplaceStaleState) {\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceNotifyExceptions(global, result.notifyExceptionById);\n  } else {\n    global = addUserStatuses(global, result.userStatusesById);\n    global = addNotifyExceptions(global, result.notifyExceptionById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","async","fetchGroupCall","global","groupCall","selectIsCurrentUserFrozen","result","callApi","call","getGlobal","existingGroupCall","selectGroupCall","id","updateGroupCall","omit","undefined","isLoaded","participantsCount","setGlobal","requestGroupCallParticipants","nextOffset","offset","addActionHandler","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","subscribed","chatId","chat","selectChat","peer","requestMasterAndJoinGroupCall","accessHash","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","length","getTracks","forEach","track","stop","checkMicrophonePermission","catch","audio","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","threadId","abortChatRequestsForCurrentChat","newChatId","newThreadId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","loadChats","listType","isFullDraftSync","shouldIgnorePagination","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","shouldReplaceStaleState","isAccountFreeze","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","addChatListIds","replaceUserStatuses","userStatusesById","replaceNotifyExceptions","notifyExceptionById","addUserStatuses","addNotifyExceptions","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","fullInfo","membersCount","isForumAsMessages","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","isUserBot","bot","openChatWithParams","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","callAttachBot","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","currentChatIds","filter","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","markChatRead","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","loadingThread","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","isMuted","mutedUntil","openFrozenAccountModal","MAX_INT_32","settings","isEnabled","isSilentPosting","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","byId","allFolderDb","ChataiStores","getAllFolders","indexOf","item","deleteFolder","folderInfo","exist","findIndex","o","addFolder","excludedChatIds","from","aiChatFolders","selectSharedSettings","allAiChatFolders","aIChatFolders","getAllAIChatFolders","activePresetTag","general","get","GLOBAL_PRESET_TAG","activeAITag","GLOBAL_AI_TAG","orderedIds","list","splice","UNREAD_FOLDER_ID","push","PRESET_FOLDER_ID","AI_FOLDER_ID","filterAIFolder","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","readAllMentions","readAllReactions","lastTopic","hasMoreTopics","processedCount","date","offsetTopicId","lastMessageId","topics","unreadCount","unreadMentionsCount","unreadReactionsCount","markTopicRead","count","selectTopic","lastTopicMessageId","updateTopic","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","voicechat","livestream","substring","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","usernameChat","requestAppWebView","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","paidMessagesStars","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}