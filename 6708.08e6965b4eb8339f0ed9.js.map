{"version":3,"file":"6708.08e6965b4eb8339f0ed9.js","mappings":"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","sources":["webpack://TeleGPT/./src/util/PostMessageConnector.ts","webpack://TeleGPT/./src/util/launchMediaWorkers.ts","webpack://TeleGPT/./src/lib/rlottie/RLottie.ts","webpack://TeleGPT/./src/util/cycleRestrict.ts"],"sourcesContent":["import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n","import { animate } from '../../util/animation';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/browser/windowEnvironment';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst CANVAS_CLASS = 'rlottie-canvas';\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords!.x, containerInfo.coords!.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.classList.add(CANVAS_CLASS);\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["ConnectorClass","constructor","target","onUpdate","channel","_defineProperty","Map","throttleWithTickEnd","this","payloads","pendingPayloads","transferables","pendingTransferables","postMessage","destroy","init","args","postMessageOnTickEnd","type","request","messageData","requestStates","requestStatesByCallback","restMessageData","messageId","generateUniqueId","payload","requestState","promise","Promise","resolve","reject","Object","assign","length","withCallback","callback","pop","set","catch","finally","delete","cancelCallback","progressCallback","isCanceled","get","onMessage","data","forEach","update","error","response","callbackArgs","Error","message","push","postMessagesOnTickEnd","createConnector","worker","connector","handleMessage","addEventListener","removeEventListener","MAX_WORKERS","Math","min","navigator","hardwareConcurrency","instances","launchMediaWorkers","IS_TEST","Array","fill","undefined","map","Worker","URL","requestMediaWorker","index","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","instancesByRenderId","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","canvas","renderId","params","viewId","onLoad","instance","addView","coords","tgsUrl","container","customColor","onEnded","onLoop","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","size","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","floor","stopFrameIndex","direction","doPlay","pause","lastRenderAt","from","values","every","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","startFrameIndex","frameIndex","round","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","imageData","ImageData","requestMutation","document","createElement","getContext","classList","add","style","appendChild","isConnected","isRendererInited","quality","max","window","devicePixelRatio","isDestroyed","clearCache","destroyRenderer","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","animate","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred"],"sourceRoot":""}