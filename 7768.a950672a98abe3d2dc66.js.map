{"version":3,"file":"7768.a950672a98abe3d2dc66.js","mappings":"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","sources":["webpack://TeleGPT/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://TeleGPT/./src/global/reducers/reactions.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/messages.ts","webpack://TeleGPT/./src/global/actions/api/messages.ts","webpack://TeleGPT/./src/global/actions/api/symbols.ts","webpack://TeleGPT/./src/global/actions/api/globalSearch.ts","webpack://TeleGPT/./src/global/actions/api/middleSearch.ts","webpack://TeleGPT/./src/global/actions/api/management.ts","webpack://TeleGPT/./src/global/actions/api/sync.ts","webpack://TeleGPT/./src/global/actions/api/accounts.ts","webpack://TeleGPT/./src/global/actions/api/users.ts","webpack://TeleGPT/./src/util/PopupManager.ts","webpack://TeleGPT/./src/global/reducers/bots.ts","webpack://TeleGPT/./src/global/actions/api/bots.ts","webpack://TeleGPT/./src/global/actions/api/twoFaSettings.ts","webpack://TeleGPT/./src/util/payments/stripe.ts","webpack://TeleGPT/./src/global/actions/api/payments.ts","webpack://TeleGPT/./src/util/requestQuery.ts","webpack://TeleGPT/./src/global/actions/api/stars.ts","webpack://TeleGPT/./src/global/actions/api/reactions.ts","webpack://TeleGPT/./src/global/actions/api/statistics.ts","webpack://TeleGPT/./src/global/actions/api/stories.ts","webpack://TeleGPT/./src/global/actions/ui/chats.ts","webpack://TeleGPT/./src/global/actions/ui/bots.ts","webpack://TeleGPT/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://TeleGPT/./src/global/actions/ui/messages.ts","webpack://TeleGPT/./src/global/helpers/meta.ts","webpack://TeleGPT/./src/global/actions/ui/globalSearch.ts","webpack://TeleGPT/./src/global/actions/ui/middleSearch.ts","webpack://TeleGPT/./src/global/actions/ui/stickerSearch.ts","webpack://TeleGPT/./src/global/actions/ui/account.ts","webpack://TeleGPT/./src/global/actions/ui/users.ts","webpack://TeleGPT/./src/util/getIsAppUpdateNeeded.ts","webpack://TeleGPT/./src/util/updateIcon.ts","webpack://TeleGPT/./src/util/updatePageTitle.ts","webpack://TeleGPT/./src/global/actions/ui/misc.ts","webpack://TeleGPT/./src/global/actions/ui/payments.ts","webpack://TeleGPT/./src/global/actions/ui/mediaViewer.ts","webpack://TeleGPT/./src/global/actions/ui/passcode.ts","webpack://TeleGPT/./src/global/actions/ui/stars.ts","webpack://TeleGPT/./src/global/actions/ui/reactions.ts","webpack://TeleGPT/./src/global/actions/ui/stories.ts","webpack://TeleGPT/./src/global/actions/ui/statistics.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/chats.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/users.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/symbols.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/misc.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/settings.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/calls.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/payments.ts","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://TeleGPT/./src/hooks/usePreventPinchZoomGesture.ts","webpack://TeleGPT/./src/components/calls/ActiveCallHeader.async.tsx","webpack://TeleGPT/./src/components/calls/group/GroupCall.async.tsx","webpack://TeleGPT/./src/components/calls/phone/PhoneCall.async.tsx","webpack://TeleGPT/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://TeleGPT/./src/components/common/DeleteMessageModal.async.tsx","webpack://TeleGPT/./src/components/common/StickerSetModal.async.tsx","webpack://TeleGPT/./src/components/common/UnreadCounter.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://TeleGPT/./src/components/left/ArchivedChats.async.tsx","webpack://TeleGPT/./src/components/left/NewChatButton.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearch.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://TeleGPT/./src/components/left/main/ChatFolders.tsx","webpack://TeleGPT/./src/components/left/main/ContactList.async.tsx","webpack://TeleGPT/./src/hooks/useConnectionStatus.ts","webpack://TeleGPT/./src/hooks/window/useBrowserOnline.ts","webpack://TeleGPT/./src/components/left/ConnectionStatusOverlay.tsx","webpack://TeleGPT/./src/components/left/main/AccountMenuItems.tsx","webpack://TeleGPT/./src/components/left/main/LeftSideMenuItems.tsx","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://TeleGPT/./src/components/left/main/StatusButton.tsx","webpack://TeleGPT/./src/components/left/main/LeftMainHeader.tsx","webpack://TeleGPT/./src/components/left/main/LeftMain.tsx","webpack://TeleGPT/./src/components/left/newChat/NewChat.async.tsx","webpack://TeleGPT/./src/components/left/settings/Settings.async.tsx","webpack://TeleGPT/./src/components/left/LeftColumn.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListHistoryHandler.tsx","webpack://TeleGPT/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://TeleGPT/./src/components/middle/hooks/usePinnedMessage.ts","webpack://TeleGPT/./src/components/chatAssistant/multi-input.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/InputText.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/TextArea.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/prompt.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/rooms-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://TeleGPT/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.async.tsx","webpack://TeleGPT/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.async.tsx","webpack://TeleGPT/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://TeleGPT/./src/components/middle/ScrollDownButton.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://TeleGPT/./src/components/middle/helpers/groupMessages.ts","webpack://TeleGPT/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://TeleGPT/./src/components/middle/ContactGreeting.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.tsx","webpack://TeleGPT/./src/components/middle/hooks/useMessageObservers.ts","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://TeleGPT/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredMessage.tsx","webpack://TeleGPT/./src/components/middle/MessageListContent.tsx","webpack://TeleGPT/./src/components/middle/hooks/useScrollHooks.ts","webpack://TeleGPT/./src/components/middle/NoMessages.tsx","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.tsx","webpack://TeleGPT/./src/components/middle/MessageList.tsx","webpack://TeleGPT/./src/hooks/useNativeCopySelectedMessages.ts","webpack://TeleGPT/./src/components/middle/hooks/useStickyDates.ts","webpack://TeleGPT/./src/components/middle/hooks/useContainerHeight.ts","webpack://TeleGPT/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://TeleGPT/./src/hooks/useMessageMediaMetadata.ts","webpack://TeleGPT/./src/components/middle/panes/AudioPlayer.tsx","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.tsx","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeader.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://TeleGPT/./src/components/middle/panes/ChatReportPane.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://TeleGPT/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/ReactorListModal.async.tsx","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.async.tsx","webpack://TeleGPT/./src/components/middle/MiddleColumn.tsx","webpack://TeleGPT/./src/hooks/useResize.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://TeleGPT/./src/components/modals/ModalContainer.tsx","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://TeleGPT/./src/components/modals/boost/BoostModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://TeleGPT/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://TeleGPT/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/map/MapModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://TeleGPT/./src/components/payment/PaymentModal.async.tsx","webpack://TeleGPT/./src/components/payment/ReceiptModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://TeleGPT/./src/components/right/AddChatMembers.tsx","webpack://TeleGPT/./src/components/right/CreateTopic.async.tsx","webpack://TeleGPT/./src/components/right/EditTopic.async.tsx","webpack://TeleGPT/./src/components/right/GifSearch.async.tsx","webpack://TeleGPT/./src/components/right/management/Management.async.tsx","webpack://TeleGPT/./src/components/right/PollResults.async.tsx","webpack://TeleGPT/./src/hooks/useCacheBuster.ts","webpack://TeleGPT/./src/components/right/hooks/useProfileState.ts","webpack://TeleGPT/./src/components/right/hooks/useProfileViewportIds.ts","webpack://TeleGPT/./src/components/common/gift/SavedGift.module.scss?4193","webpack://TeleGPT/./src/components/common/gift/SavedGift.tsx","webpack://TeleGPT/./src/components/common/PreviewMedia.tsx","webpack://TeleGPT/./src/components/right/Profile.tsx","webpack://TeleGPT/./src/components/right/hooks/useTransitionFixes.ts","webpack://TeleGPT/./src/components/right/RightHeader.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.tsx","webpack://TeleGPT/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://TeleGPT/./src/components/right/statistics/Statistics.async.tsx","webpack://TeleGPT/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://TeleGPT/./src/components/right/StickerSearch.async.tsx","webpack://TeleGPT/./src/components/right/RightColumn.tsx","webpack://TeleGPT/./src/components/story/StoryViewer.async.tsx","webpack://TeleGPT/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/BotTrustModal.async.tsx","webpack://TeleGPT/./src/components/main/DeleteFolderDialog.async.tsx","webpack://TeleGPT/./src/components/main/Dialogs.async.tsx","webpack://TeleGPT/./src/components/main/DownloadManager.tsx","webpack://TeleGPT/./src/components/main/DraftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/GameModal.tsx","webpack://TeleGPT/./src/components/main/HistoryCalendar.async.tsx","webpack://TeleGPT/./src/components/main/NewContactModal.async.tsx","webpack://TeleGPT/./src/components/main/Notifications.async.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://TeleGPT/./src/components/main/SafeLinkModal.async.tsx","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.tsx","webpack://TeleGPT/./src/components/main/Main.tsx","webpack://TeleGPT/./src/components/main/LockScreen.tsx","webpack://TeleGPT/./src/components/main/LockScreen.module.scss?8252","webpack://TeleGPT/./src/bundles/main.ts","webpack://TeleGPT/./src/global/actions/ui/calls.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  // add user to db\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  users.forEach((user) => {\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }:{ className:string;children?:React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }:{ handleClose:()=>void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step:number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  useEffect,\n  useRef,\n} from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../../../lib/injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst injectMessageAI = injectComponent(GuidanceCarousel);\nconst GuidanceWrapper = ({ handleClose }:{ handleClose:()=>void }) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (containerRef.current) {\n      injectMessageAI(containerRef.current, { handleClose });\n    }\n  }, [handleClose]);\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React, { useState } from '../../../../lib/teact/teact';\n\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<Boolean>(!telegptGuidance);\n  const handleClose = useLastCallback(() => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n  });\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect,\n    // activePresetTag, filterPresetTag,\n    // activeAITag, filterAITag,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip } : { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)?.find(({ id }) => id === folderTabs?.[activeChatFolder]?.id);\n    const isFolder = activeFolder && !isInAllChatsFolder && !isInPresetFolder && !isInPresetFolder && !isInAIFolder;\n    const folderType = getFolderType();\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : folderType}\n        folderId={isFolder ? activeFolder?.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: account.emojiStatusId,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","/* eslint-disable max-len */\nimport { Modal } from 'antd';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('AI Knowledge Base')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent:GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?:boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setSharedSettingOption,\n    setGlobalSearchDate,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        {hasMenu ? (\n          <img src={AIMenuIcon} alt=\"ai-menu\" style={buildStyle('width: 24px;height: 24px;')} />\n        ) : (\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        )}\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\n// import { PRODUCTION_URL } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n// import buildClassName from '../../../util/buildClassName';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required:boolean;\n    force_update_current_version:string;\n    force_update_store_url:string;\n  }>();\n\n  const handleFireBaseUpdate = (payload:any) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { webFireBase } = payload;\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AIKonwledge);\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AITranslate);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    // window.location.reload();\n    if (webFireBase?.force_update_store_url!) {\n      window.location.href = webFireBase?.force_update_store_url!;\n    } else {\n      window.location.reload();\n    }\n\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            // isAppUpdateAvailable={isAppUpdateAvailable}\n            // isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      // isAppUpdateAvailable,\n      // isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      // isAppUpdateAvailable,\n      // isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\nconst injectMessageAI = injectComponent(RoomAIEntryButton);\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (containerRef.current && chatId) {\n      injectMessageAI(containerRef.current, { chatId });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"room-ai-entry-wrapper\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\n// import Button from '../../ui/Button';\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n// import SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(false);\n  const onClick = useCallback(() => {\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId]);\n  const updateUnreadCount = useCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param:{ chatId:string; state:boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    RoomStorage.summary(chatId);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie:DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n\n  // 确保当 isSummary 为 true 时动画播放\n  useEffect(() => {\n    if (isSummary && dotLottie) {\n      dotLottie.play();\n    }\n  }, [isSummary, dotLottie]);\n\n  return (\n    <div className=\"room-ai-entry-button\">\n      {isSummary ? (\n        <DotLottieReact\n          key=\"serenaWork\"\n          className=\"w-[62px] h-[62px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          key=\"serenaWait\"\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(phone);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n    if (form.is_call && phoneNumber.length > 0) {\n      telegptSettings.setSettingOption({\n        phone: phoneNumber,\n      });\n    }\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and content descriptions for which you need alerts. When a message contains these contents, an alert will be triggered.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">Please enter the specific topic you want to summarize accurately and add a detailed description. The message summary service will show the content as per your needs.</p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate, getCurrentUserInfo } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Tely</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\nexport const languagePrompt = `\n    [实时语言雷达]\n        1. 语言指纹扫描：自动检测输入文本的\n            - 主要语种(支持92种语言置信度识别)\n            - 方言特征(如粤语/川普/美式英语)\n            - 混合语言比例(中英混杂度>30%触发混合模式)\n    [语境翻译官]\n        2. 根据语言特征自动匹配：\n            - 正式场合 → 学术英语/商务日语\n            - 社交场景 → 网络韩语/缩略中文\n            - 创意表达 → 方言梗/谐音梗\n            - 情感交流 → 方言安慰语/俚语拥抱\n    [文化调色盘]\n        3. 语言风格增强模块：\n            - 中文：加入\"绝绝子\"/\"破防了\"等年度热词\n            - 日语：自动转换敬体/简体(根据用户资料)\n            - 英语：切换正式/俚语模式(识别slang词汇)\n            - 方言：加载地域特色表达库(如东北话\"忽悠\"→上海话\"捣糨糊\")\n    [混合语处理器]\n        4. 跨语言对话解决方案：\n            - 中英夹杂 → 智能补全(\"这个idea超酷\"→\"这个idea真的超有创意\")\n            - 方言转译 → 标准语+注释(\"侬晓得伐？→ 你知道吗？(上海话)\")\n            - 代码切换 → 无缝过渡(\"今天meeting讨论了KPI→今天开会讨论了KPI\")\n`;\n\nexport const UrgentMessageCheckPrompt = `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n    ## 总结重要或紧急消息的内容摘要(可包含发送者名称),非重要或者紧急消息直接过滤掉\n    ## 消息字段解释\n        - chatId: 房间ID\n        - messageId: 消息ID\n        - content: 消息内容\n        - senderName: 发送者名称\n    ## 输出格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式\n         \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            content: 内容摘要\"             \n                        }\n                    ]\n                <!-- json-end -->\n        \\`\\`\\`\n`;\n\nexport const DefaultUrgentTopic = {\n  id: 'default',\n  topicName: '默认紧急主题',\n  topicDescription: `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n  `,\n  strongAlert: false,\n};\n\nexport const getIntelligentReplyByKnowledgePrompt = (knowledge:string) => {\n  return `\n    ## 角色设定\n        你是一个专业的智能知识管家，负责基于知识库内容进行检索回答。请严格遵守以下规则：\n    ## 知识库内容\n        ${knowledge}\n    ## 知识检索\n        - 使用精确匹配模式(无模糊扩展)\n        - 当相似度>95%时才返回知识库内容,否则回复的内容为空\n    ## 格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            replyContent: \"回复的内容\"              \n                        }\n                    ]\n                <!-- json-end -->\n            \\`\\`\\`\n    ## 示例输出\n        \\`\\`\\`json\n            <!-- json-start -->\n                [\n                    {\n                        chatId: \"房间ID\",\n                        messageId: \"消息ID\",\n                        senderId: \"用户ID\",\n                        replyContent: \"Think of SendingNetwork as the swiss-army knife for decentralized and encrypted communications infrastructure. \"              \n                    }\n                ]\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n};\n\nexport const UserPortraitPrompt = `\n    你是一位金融行为分析师，擅长通过对话文本解析用户多维特征。请根据以下框架分析输入数据，输出包含基础信息、关系定位、资产行为及兴趣特征的结构化画像：\n    # 基础信息推断\n        ## 年龄定位\n            - 使用\"学生党/刚毕业\"→18-24岁\n            - 提及\"子女教育/房贷\"→35-50岁\n        ## 性别识别：\n            - 讨论\"母婴产品\"→女性\n            - 引用\"电竞/硬件参数\"→男性\n        ## 地域判断：\n            - 提到\"沪牌政策\"→上海用户\n            - 使用\"支付宝/微信支付\"→中国大陆用户\n    # 关系定位模型\n        ## 合作伙伴：\n            - 包含\"对赌协议/股权分配\"等关键词\n            - 对话中出现\"王总/李董\"等职称\n        ## 投资人：\n            - 讨论\"IRR/ROI\"等财务指标\n            - 提及\"LP/GP\"关系\n        ## 同事：\n            - 使用\"周报/OKR\"等业务术语\n            - 非正式称呼(\"老张/小李\")\n    # 资产行为分析\n        ## 加密货币特征\n            - 持有资产:识别BTC/ETH等代币提及次数\n            - 操作风格:\"短线操作\"→交易型,\"三年以上未动\"→囤积型\n        ## 风险偏好分级\n            - \"愿意承担波动\"→激进型(风险评分7-10)\n            - \"只要保本\"→保守型(风险评分1-3)\n    # 示例输出 \n         \\`\\`\\`json\n            <!-- json-start -->\n                 {\n                    \"basic_info\": {\n                      \"age_group\": \"25-34岁\",\n                      \"gender\": \"男\",\n                      \"region\": \"北美地区\",\n                      \"language\": \"中英双语\"\n                    },\n                    \"relationship\": {\n                      \"type\": \"战略合作伙伴\",\n                      \"engagement_level\": \"高价值(年合作超500万)\"\n                    },\n                    \"financial_behavior\": {\n                      \"assets\": {\n                        \"crypto_holdings\": [\"BTC\", \"LINK\"],\n                        \"investment_style\": \"波段交易(持仓周期7-30天)\",\n                        \"risk_profile\": \"进取型(历史最大回撤承受力25%)\"\n                      },\n                    },\n                  }\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle,\n  getGroupStatus,\n  getUserFullName,\n  getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport useOldLang from '../hook/useOldLang';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './rooms-tab.scss';\nimport './selected-chats.scss';\n\ninterface Props {\n  title: string;\n  ignoredIds: string[];\n  onIgnored: (id: string) => void;\n  onUnIgnored: (id: string) => void;\n}\n\nexport const RoomsTab = (props: Props) => {\n  const {\n    title,\n    ignoredIds,\n    onIgnored,\n    onUnIgnored,\n  } = props;\n  const orderedIds = React.useMemo(() => {\n    const ids = getOrderedIds(ALL_FOLDER_ID) || [];\n    return ids.filter((id) => id !== GLOBAL_SUMMARY_CHATID);\n  }, []);\n  const unIgnoreIds = orderedIds.filter((id) => !ignoredIds.includes(id));\n  const [activeTab, setActiveTab] = useState<'summary' | 'ignored'>('summary');\n  const lang = useOldLang();\n  const global = getGlobal();\n\n  const renderRoomItem = (\n    id: string,\n    isIgnored: boolean,\n  ) => {\n    const peer: ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">{specialTitle}</div>\n          <div className=\"text-[var(--color-text-secondary)] text-sm\">{subtitle}</div>\n        </div>\n        {isIgnored ? (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#5493F2] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onUnIgnored(id)}\n          >\n            Stop Ignoring\n          </div>\n        ) : (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#FF5757] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onIgnored(id)}\n          >\n            <Icon name=\"eye-crossed\" />\n            Ignore\n          </div>\n        )}\n\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"summary-rooms-tab mt-[20px]\">\n      <div className=\"tabs-container\">\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'summary'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('summary')}\n        >\n          {title}\n        </button>\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'ignored'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('ignored')}\n        >\n          Ignored Chats\n        </button>\n      </div>\n\n      {activeTab === 'summary' ? (\n        <div>\n          {unIgnoreIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {unIgnoreIds.map((id) => renderRoomItem(id, false))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {ignoredIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {ignoredIds.map((id) => renderRoomItem(id, true))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>Customization</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, ignored_summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const ignoredChatIds = getIdsFromEntityTypes(ignored_summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(ignoredChatIds);\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    });\n    setOriginSelectedTemp(selectedTemp);\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...new Set([...ignoredIds, id])];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">What are you curious about?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Summary\" />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>Add Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, ignored_urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(ignored_urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(selectUrgentChatIds);\n\n  const handeleDeleteTopic = (id:string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res:any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...ignoredIds, id];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Urgent\" />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Chat Summary',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Customization');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\nimport React, {\n  forwardRef,\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = forwardRef(() => {\n  const { isOpen } = useDrawerStore();\n  const { userId, userName } = getCurrentUserInfo();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[] >([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item:Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    // 再次聚焦间隔20分钟触发一次总结\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 20) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setMessages((prev) => prev.filter((message) => message.id !== messageId));\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value:string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Tely\" />\n            <span className=\"text-[15px] font-semibold\">Tely</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n});\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { selectChat } from '../../../global/selectors';\nimport GlobalSummary from './global-summary';\n\nconst injectMessageAI = injectComponent(GlobalSummary);\nconst GlobalSummaryWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current, {});\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, []);\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global) => {\n    const memoSelectChat = (chatId: string) => {\n      return selectChat(global, chatId);\n    };\n    return {\n      memoSelectChat,\n    };\n  },\n)(GlobalSummaryWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n//   const { loading, userPortraitInfo } = usePortrait({ userId });\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    getActions().openUserPortrait({ userId });\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${\n                    portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                  } ${\n                    portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                  }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  // eslint-disable-next-line no-null/no-null\n  const triggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\n// import Avatar from '../../common/Avatar';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  // function renderAvatar() {\n  //   const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n  //   return (\n  //     <Avatar\n  //       size=\"small\"\n  //       className={styles.senderAvatar}\n  //       peer={avatarPeer}\n  //       text={hiddenName}\n  //       onClick={avatarPeer ? handleAvatarClick : undefined}\n  //     />\n  //   );\n  // }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n          <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  autoTranslate?:boolean;\n  autoTranslateLanguage?:string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!autoTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: autoTranslateLanguage });\n  // }, [autoTranslate, autoTranslateLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiMessage, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIME_AND_EMAIL, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }:{ message: ApiMessage }) => {\n    const isMeetingInitiator = message.isOutgoing;\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIME_AND_EMAIL\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    // 会议发起成功，清除会议事务\n    if (messageText?.includes('Event details') && messageText.includes('Meeting Invitation')) {\n      const existingMeetTask = ScheduleMeeting.get(chatId!);\n      if (existingMeetTask) {\n        existingMeetTask.cleanup();\n      }\n      return;\n    }\n    const scheduleMeeting = ScheduleMeeting.create({ chatId: message.chatId, isMeetingInitiator });\n    if (scheduleMeeting.timeout || message.isOutgoing || scheduleMeeting.isMeetingInitiator) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <RoomAIEntryWrapper\n              chatId={renderingChatId!}\n            />\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      getActions().openChat({ id: GLOBAL_SUMMARY_CHATID });\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload:any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summarize\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Schedule meeting\n      </div>\n      <div className={actionItemClassName} onClick={handleActionItems}>\n        ✅ To-do list\n      </div>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { searchPortrait } from '../../../util/userPortrait';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getCurrentUserInfo, getHitTools } from '../utils/chat-api';\nimport { getAuthState, isTokenValid } from '../utils/google-auth';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUserPortraitMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message:Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage as UIMessage[]);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload:{ message:Message;token:string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach((toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const auth = getAuthState();\n            if (!auth || !isTokenValid(auth)) {\n              insertMessage(createGoogleLoginMessage());\n            } else {\n              insertMessage(createGoogleMeetingMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'checkIsUserPortrait') {\n            const userName = toolCall.result?.keyword;\n            insertMessage(createUserPortraitMessage(userName));\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage:Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item:any) => item.score > 0.8);\n    if (matchs.length > 0 || searchPortrait(value)) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    const timer = setTimeout(() => {\n      if (containerRef.current && chatId && chatId !== GLOBAL_SUMMARY_CHATID) {\n        injected = injectMessageAI(containerRef.current, { ...props });\n      }\n    }, 500); // 等动画走完再注入\n\n    return () => {\n      clearTimeout(timer);\n      injected?.unmount();\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Tely\" />\n              <h3 className=\"title\">{oldLang('Tely')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","autoTranslateLanguage","settings","byKey","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","userName","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","ChataiStores","addUser","name","firstName","lastName","phoneNumber","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","contact","addContact","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","CarouselItem","children","React","cx","injectMessageAI","injectComponent","GuidanceCarousel","handleClose","carouselRef","useRef","handleNextClick","goTo","onClick","CloseIcon","Carousel","ref","GuidanceWrapper","containerRef","useEffect","createElement","GuidanceModal","telegptGuidance","getItem","isFirstIn","setIsFirstIn","useState","useLastCallback","setItem","Modal","noBackdropClose","onClose","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","menuItems","useMemo","Fragment","MenuItem","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","LeftSearch","ActiveTag","folderType","setActiveTag","item","currentTag","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onDelete","xmlns","height","fill","d","PRESET_TAGS","PresetTagModal","activeTag","tagList","PRESET_FOLDER_ID","getAITags","dialogStyle","onClickTag","withGlobal","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","res","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","loading","isShowTip","tipShowRes","eventEmitter","on","Actions","UpdateAIChatFoldersApplying","off","placeholderRef","shouldRenderPlaceholder","noMountTransition","getFolderType","shouldRenderFolders","renderCurrentTab","activeFolder","isFolder","ChatList","canDisplayArchive","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","AIChatFoldersTip","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","account","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","emit","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","src","AIKnowledgeIcon","alt","style","buildStyle","AITranslateIcon","AIChatFolderIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","AIMenuIcon","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","UPDATE_DEFER_KEY","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","force_update_store_url","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","waitBlob","Blob","serenaWaiting","serenaWaitUrl","createObjectURL","workBlob","serenaWorking","serenaWorkUrl","openChatAIWithInfo","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","RoomStorage","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","play","interval","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","summary","dotLottieRefCallback","DotLottieReact","loop","autoplay","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","stop","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","AITextarea","target","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","FloatingActionButton","handleClick","buttonClassName","InputText","success","readOnly","inputMode","maxLength","teactExperimentControlled","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","htmlFor","TextArea","maxLengthIndicator","noReplaceNewlines","resizeHeight","element","requestMutation","requestForcedReflow","newHeight","useLayoutEffect","textarea","currentTarget","previousSelectionEnd","selectionEnd","AddTopicPanel","telegptSettings","openDrawer","drawerParams","useDrawerStore","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","initialValues","prompt","is_call","is_open","setForm","handleTopicNameChange","topicName","prev","handleTopicDescriptionChange","topicDescription","handlePhoneNumberChange","handleSave","updateUrgentTopic","DrawerKey","PersonalizeSettings","showMessage","setSettingOption","Switch","PickerChatItem","isChecked","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","isSavedMessages","clickOpenRoom","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","CustomizationPromptPanel","titleError","setTitleError","promptError","setPromptError","updateSummarizeTemplate","Message","getCurrentUserInfo","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","setIsLoading","useChat","api","SERVER_API_URL","sendExtraMessageFields","initialMessages","role","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","RoomsTab","ignoredIds","onIgnored","onUnIgnored","unIgnoreIds","GLOBAL_SUMMARY_CHATID","setActiveTab","renderRoomItem","isIgnored","SummaryItem","template","selectedTemp","handleSelect","user_id","CustomizationPrompt","AddSummaryTemplate","handleAdd","SummarizeTab","curious_info","ignored_summary_chat_ids","curious_id","ignoredChatIds","getIdsFromEntityTypes","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","setIgnoredIds","actionsVisable","isEqual","handleTemplateSelect","selectedId","newSelected","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","handleIgnored","entityTypes","buildEntityTypeFromIds","handleUnIgnored","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","urgent_info","ignored_urgent_chat_ids","selectUrgentChatIds","setTopics","deleteUrgentTopic","t","urgentCheckTask","updateUrgentChats","selectedTabIndex","setSelectedTabIndex","hasBackDrawer","ChatPicker","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","getGptSettings","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","GlobalSummary","forwardRef","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","pageInfo","setPageInfo","lastTime","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","orderBy","createdAt","getTime","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","globalSummaryTask","initSummaryChats","deleteMessage","delMessage","uuidv4","msgs","parseMessage2SummaryStoreMessage","storeMessages","SerenaPath","Messages","loadMore","memoSelectChat","GlobalSummaryWrapper","injected","unmount","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","disablePictureInPicture","muted","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","openUserPortrait","langs","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","withPortal","noCompact","UserPortraitBasicCard","SenderGroupAvatar","avatarPeer","handleAvatarClick","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","contextMenuAnchor","setContextMenuAnchor","triggerRef","getTriggerElement","getMenuElement","getRootElement","closest","getLayout","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","getBoundingClientRect","ResponsiveHoverButton","onActivate","anchor","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarRef","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","autoTranslate","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","handleAnalyticsMessage","isMeetingInitiator","messageText","ASK_MEETING_TIME_AND_EMAIL","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","existingMeetTask","ScheduleMeeting","cleanup","scheduleMeeting","create","timeout","meetingMentionMessage","createMeetingMentionMessage","storeMessage","parseMessage2StoreMessage","AddRoomAIMessage","IntentionToScheduleMeeting","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIEntryWrapper","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","actionItemClassName","RoomActions","insertMessage","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","createGoogleLoginMessage","mergeMesssage","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","rightPanelBg","formMessage","toolsEmbeddingStore","searchPortrait","getHitTools","toolResults","toolCall","toolName","auth","getAuthState","isTokenValid","sendGAEvent","keyword","createUserPortraitMessage","RoomAI","timer","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","transitionClassNames","useMediaTransitionDeprecated","decoding","formatMediaDuration","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","realTimeAssistants","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","isUserPortrait","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","setShouldSkipTransition","contentKey","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","UserPortrait","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","prevSrc","currentTime","joinAudio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","existingGroupCall","requestGroupCallParticipants","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","canSelfUnmute","inviteHash","full","requestMasterAndCallAction","toggleGroupCallPanel","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","selectChatGroupCall","rejoin","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","mediaDevices","getUserMedia","getVideoTracks","getTracks","track","checkMicrophonePermission"],"sourceRoot":""}