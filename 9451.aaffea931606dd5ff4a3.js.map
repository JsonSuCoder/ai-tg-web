{"version":3,"file":"9451.aaffea931606dd5ff4a3.js","mappings":"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","sources":["webpack://TeleGPT/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://TeleGPT/./src/components/right/management/ManageChatAdministrators.tsx","webpack://TeleGPT/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledgeContent.tsx","webpack://TeleGPT/./src/components/story/StoryCaption.tsx","webpack://TeleGPT/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://TeleGPT/./src/components/left/search/FileResults.tsx","webpack://TeleGPT/./src/components/common/CountryPickerModal.tsx","webpack://TeleGPT/./src/components/common/PasswordMonkey.tsx","webpack://TeleGPT/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://TeleGPT/./src/components/left/MuteChatModal.tsx","webpack://TeleGPT/./src/components/common/ManageUsernames.module.scss?3086","webpack://TeleGPT/./src/components/common/UnpinAllMessagesModal.tsx","webpack://TeleGPT/./src/components/right/StickerSearch.tsx","webpack://TeleGPT/./src/components/middle/composer/SymbolMenu.tsx","webpack://TeleGPT/./src/components/middle/ReactorListModal.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://TeleGPT/./src/components/mediaViewer/SeekLine.tsx","webpack://TeleGPT/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://TeleGPT/./src/components/left/settings/SettingsMain.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://TeleGPT/./src/components/middle/composer/ChatCommand.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://TeleGPT/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://TeleGPT/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://TeleGPT/./src/components/payment/ExpiryInput.tsx","webpack://TeleGPT/./src/components/right/PollResults.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-search/AISearch.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearch.tsx","webpack://TeleGPT/./src/components/left/search/ChatResults.tsx","webpack://TeleGPT/./src/util/getClosestEntry.ts","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://TeleGPT/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.module.scss?1d45","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsNotifications.tsx","webpack://TeleGPT/./src/components/left/search/AudioResults.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://TeleGPT/./src/components/right/management/JoinRequest.tsx","webpack://TeleGPT/./src/components/left/search/LinkResults.tsx","webpack://TeleGPT/./src/components/common/reactions/ReactionEmoji.tsx","webpack://TeleGPT/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://TeleGPT/./src/components/left/settings/BlockUserModal.tsx","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://TeleGPT/./src/components/right/statistics/MessageStatistics.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsActiveSession.tsx","webpack://TeleGPT/./src/components/middle/composer/GifPicker.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://TeleGPT/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledge.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://TeleGPT/./src/hooks/usePictureInPicture.ts","webpack://TeleGPT/./src/components/middle/search/MiddleSearchResult.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://TeleGPT/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://TeleGPT/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://TeleGPT/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://TeleGPT/./src/components/main/PermissionCheckboxList.tsx","webpack://TeleGPT/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://TeleGPT/./src/components/mediaViewer/SenderInfo.tsx","webpack://TeleGPT/./src/components/story/StoryViewModal.module.scss?06b1","webpack://TeleGPT/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://TeleGPT/./src/components/modals/map/MapModal.module.scss?0842","webpack://TeleGPT/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://TeleGPT/./src/components/middle/composer/EmojiButton.tsx","webpack://TeleGPT/./src/components/modals/credits/CreditsModal.module.scss?9595","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.tsx","webpack://TeleGPT/./src/components/main/ForwardRecipientPicker.tsx","webpack://TeleGPT/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://TeleGPT/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://TeleGPT/./src/components/story/hooks/useSlideSizes.ts","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://TeleGPT/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://TeleGPT/./src/components/main/Notifications.tsx","webpack://TeleGPT/./src/components/payment/ConfirmPayment.tsx","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://TeleGPT/./src/components/story/StealthModeModal.module.scss?40cf","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://TeleGPT/./src/components/left/ChatFolderModal.module.scss?6993","webpack://TeleGPT/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://TeleGPT/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://TeleGPT/./src/components/middle/composer/PollModal.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledgeHeader.tsx","webpack://TeleGPT/./src/components/common/pickers/ItemPicker.tsx","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.tsx","webpack://TeleGPT/./src/components/middle/composer/EmojiTooltip.tsx","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.tsx","webpack://TeleGPT/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://TeleGPT/./src/components/modals/map/MapModal.tsx","webpack://TeleGPT/./src/components/payment/CardInput.tsx","webpack://TeleGPT/./src/components/common/helpers/detectCardType.ts","webpack://TeleGPT/./src/components/modals/boost/BoostModal.tsx","webpack://TeleGPT/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://TeleGPT/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://TeleGPT/./src/components/middle/composer/TextFormatter.tsx","webpack://TeleGPT/./src/components/story/Story.tsx","webpack://TeleGPT/./src/components/payment/SavedPaymentCredentials.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://TeleGPT/./src/components/main/Dialogs.tsx","webpack://TeleGPT/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://TeleGPT/./src/components/right/management/ManageBot.tsx","webpack://TeleGPT/./src/components/middle/composer/EmojiPicker.tsx","webpack://TeleGPT/./src/components/middle/composer/CustomSendMenu.tsx","webpack://TeleGPT/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslateContent.tsx","webpack://TeleGPT/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://TeleGPT/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://TeleGPT/./src/components/payment/ReceiptModal.tsx","webpack://TeleGPT/./src/components/right/management/ManageInvites.tsx","webpack://TeleGPT/./src/components/right/management/NewDiscussionGroup.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://TeleGPT/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://TeleGPT/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://TeleGPT/./src/components/story/StoryViewer.module.scss?5f32","webpack://TeleGPT/./src/hooks/useCurrentTimeSignal.ts","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://TeleGPT/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://TeleGPT/./src/components/story/StoryPreview.tsx","webpack://TeleGPT/./src/components/common/UsernameInput.tsx","webpack://TeleGPT/./src/components/right/GifSearch.tsx","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://TeleGPT/./src/lib/video-preview/VideoPreview.ts","webpack://TeleGPT/./src/components/left/settings/PremiumStatusItem.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiPicker.tsx","webpack://TeleGPT/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://TeleGPT/./src/components/common/StickerSet.tsx","webpack://TeleGPT/./src/components/story/helpers/dimensions.ts","webpack://TeleGPT/./src/components/common/DeleteMessageModal.tsx","webpack://TeleGPT/./src/components/common/SliderDots.module.scss?afdd","webpack://TeleGPT/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://TeleGPT/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://TeleGPT/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://TeleGPT/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://TeleGPT/./src/components/left/settings/Settings.tsx","webpack://TeleGPT/./src/components/payment/PasswordConfirm.tsx","webpack://TeleGPT/./src/components/story/privacy/CloseFriends.tsx","webpack://TeleGPT/./src/components/common/ManageUsernames.tsx","webpack://TeleGPT/./src/components/story/StoryViewModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://TeleGPT/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.tsx","webpack://TeleGPT/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://TeleGPT/./src/hooks/reducers/usePaymentReducer.ts","webpack://TeleGPT/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://TeleGPT/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://TeleGPT/./src/components/main/NewContactModal.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://TeleGPT/./src/components/right/management/ManageGroup.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://TeleGPT/./src/components/payment/Shipping.tsx","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://TeleGPT/./src/components/modals/inviteCode/InviteCodeModal.module.scss?8848","webpack://TeleGPT/./src/components/right/statistics/Statistics.tsx","webpack://TeleGPT/./src/components/right/CreateTopic.tsx","webpack://TeleGPT/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://TeleGPT/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://TeleGPT/./src/components/common/PinMessageModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://TeleGPT/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://TeleGPT/./src/components/story/StealthModeModal.tsx","webpack://TeleGPT/./src/components/story/helpers/ghostAnimation.ts","webpack://TeleGPT/./src/components/story/StoryViewer.tsx","webpack://TeleGPT/./src/hooks/useScrolledState.ts","webpack://TeleGPT/./src/components/left/aiKnowledge/AddKnowledgeModal.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-search/AISearchInput.tsx","webpack://TeleGPT/./src/components/modals/inviteFriends/InviteFriendsModal.tsx","webpack://TeleGPT/./src/components/middle/composer/AttachmentModal.tsx","webpack://TeleGPT/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://TeleGPT/./src/components/middle/composer/StickerPicker.tsx","webpack://TeleGPT/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://TeleGPT/./src/components/right/management/ManageGroupPermissions.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://TeleGPT/./src/hooks/events/useOutsideClick.ts","webpack://TeleGPT/./src/components/right/management/ManageGroupMembers.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://TeleGPT/./src/hooks/useSignalRef.ts","webpack://TeleGPT/./src/components/left/search/MediaResults.tsx","webpack://TeleGPT/./src/components/left/search/ChatMessageResults.tsx","webpack://TeleGPT/./src/components/left/ArchivedChats.tsx","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.tsx","webpack://TeleGPT/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://TeleGPT/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://TeleGPT/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://TeleGPT/./src/util/setTooltipItemVisible.ts","webpack://TeleGPT/./src/components/story/StorySlides.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacy.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledgeEditor.tsx","webpack://TeleGPT/./src/hooks/useBlur.ts","webpack://TeleGPT/./src/hooks/useBlurSync.ts","webpack://TeleGPT/./src/components/main/DraftRecipientPicker.tsx","webpack://TeleGPT/./src/components/left/search/PublicPostsResults.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://TeleGPT/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://TeleGPT/./src/components/middle/composer/BotCommandMenu.tsx","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://TeleGPT/./src/util/visibility/isFullyVisible.ts","webpack://TeleGPT/./src/components/left/settings/SettingsLanguage.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsDataStorage.tsx","webpack://TeleGPT/./src/components/middle/composer/MentionTooltip.tsx","webpack://TeleGPT/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://TeleGPT/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://TeleGPT/./src/components/right/management/Management.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslate.tsx","webpack://TeleGPT/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://TeleGPT/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://TeleGPT/./src/hooks/reducers/useTwoFaReducer.ts","webpack://TeleGPT/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://TeleGPT/./src/components/story/privacy/AllowDenyList.tsx","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://TeleGPT/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://TeleGPT/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://TeleGPT/./src/components/story/StoryView.tsx","webpack://TeleGPT/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://TeleGPT/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://TeleGPT/./src/components/story/StorySettings.module.scss?b887","webpack://TeleGPT/./src/components/main/AttachBotRecipientPicker.tsx","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPerformance.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://TeleGPT/./src/components/payment/PaymentInfo.tsx","webpack://TeleGPT/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://TeleGPT/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://TeleGPT/./src/components/middle/composer/EmojiCategory.tsx","webpack://TeleGPT/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://TeleGPT/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://TeleGPT/./src/hooks/useMultiClick.ts","webpack://TeleGPT/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://TeleGPT/./src/components/story/StoryFooter.tsx","webpack://TeleGPT/./src/components/story/hooks/useStoryProps.ts","webpack://TeleGPT/./src/components/right/management/ManageDiscussion.tsx","webpack://TeleGPT/./src/components/mediaViewer/VideoPlayer.tsx","webpack://TeleGPT/./src/components/common/CalendarModal.tsx","webpack://TeleGPT/./src/components/modals/credits/CreditsModal.tsx","webpack://TeleGPT/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://TeleGPT/./src/components/middle/HeaderMenuContainer.tsx","webpack://TeleGPT/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.tsx","webpack://TeleGPT/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsExperimental.tsx","webpack://TeleGPT/./src/components/right/management/ManageUser.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://TeleGPT/./src/util/getKeyFromEvent.ts","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://TeleGPT/./src/components/left/main/ContactList.tsx","webpack://TeleGPT/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://TeleGPT/./src/hooks/useFocusAfterAnimation.ts","webpack://TeleGPT/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://TeleGPT/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://TeleGPT/./src/components/story/StorySettings.tsx","webpack://TeleGPT/./src/components/story/StoryProgress.module.scss?59b4","webpack://TeleGPT/./src/components/story/StoryProgress.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://TeleGPT/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://TeleGPT/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://TeleGPT/./src/components/left/settings/PrivacyMessages.tsx","webpack://TeleGPT/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://TeleGPT/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://TeleGPT/./src/components/payment/Checkout.module.scss?4e47","webpack://TeleGPT/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://TeleGPT/./src/components/right/ManageTopic.module.scss?04dd","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://TeleGPT/./src/util/findInViewport.ts","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://TeleGPT/./src/components/common/ReportAvatarModal.tsx","webpack://TeleGPT/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://TeleGPT/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://TeleGPT/./src/components/right/management/ManageInviteInfo.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearchResultChat.tsx","webpack://TeleGPT/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://TeleGPT/./src/components/payment/PaymentModal.tsx","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslateHeader.tsx","webpack://TeleGPT/./src/components/common/StickerButton.tsx","webpack://TeleGPT/./src/components/left/newChat/NewChat.tsx","webpack://TeleGPT/./src/hooks/useDraggable.ts","webpack://TeleGPT/./src/components/left/newChat/NewChatStep2.tsx","webpack://TeleGPT/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://TeleGPT/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsEditProfile.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://TeleGPT/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://TeleGPT/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://TeleGPT/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://TeleGPT/./src/components/left/search/ChatMessage.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://TeleGPT/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://TeleGPT/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://TeleGPT/./src/components/right/management/ManageChannel.tsx","webpack://TeleGPT/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://TeleGPT/./src/components/main/BotTrustModal.tsx","webpack://TeleGPT/./src/components/right/PollAnswerResults.tsx","webpack://TeleGPT/./src/components/right/management/ManageInvite.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://TeleGPT/./src/components/common/SliderDots.tsx","webpack://TeleGPT/./src/components/modals/inviteFriends/InviteFriendsModal.module.scss?ed70","webpack://TeleGPT/./src/components/left/aiTranslate/AutoTranslateLanguage.module.scss?c18f","webpack://TeleGPT/./src/components/left/settings/SettingsGeneral.tsx","webpack://TeleGPT/./src/components/story/StoryFooter.module.scss?19b1","webpack://TeleGPT/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://TeleGPT/./src/components/left/newChat/NewChatStep1.tsx","webpack://TeleGPT/./src/components/main/SafeLinkModal.tsx","webpack://TeleGPT/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://TeleGPT/./src/components/left/search/RecentContacts.tsx","webpack://TeleGPT/./src/components/middle/composer/StickerTooltip.tsx","webpack://TeleGPT/./src/components/right/hooks/useManagePermissions.ts","webpack://TeleGPT/./src/components/mediaViewer/MediaViewer.tsx","webpack://TeleGPT/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://TeleGPT/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://TeleGPT/./src/components/left/search/BotAppResults.tsx","webpack://TeleGPT/./src/components/common/StickerSetCard.tsx","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://TeleGPT/./src/components/right/EditTopic.tsx","webpack://TeleGPT/./src/components/middle/helpers/inputFormatters.ts","webpack://TeleGPT/./src/components/left/search/DateSuggest.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://TeleGPT/./src/components/right/management/ManageJoinRequests.tsx","webpack://TeleGPT/./src/components/payment/Checkout.tsx","webpack://TeleGPT/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://TeleGPT/./src/components/middle/MessageSelectToolbar.tsx","webpack://TeleGPT/./src/components/payment/ShippingInfo.tsx","webpack://TeleGPT/./src/components/modals/inviteCode/InviteCodeModal.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.tsx","webpack://TeleGPT/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://TeleGPT/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://TeleGPT/./src/components/left/aiTranslate/AutoTranslateLanguage.tsx","webpack://TeleGPT/./src/hooks/useSelectWithEnter.ts","webpack://TeleGPT/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://TeleGPT/./src/components/common/RecipientPicker.tsx","webpack://TeleGPT/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://TeleGPT/./src/components/left/settings/SettingsHeader.tsx","webpack://TeleGPT/./src/components/middle/composer/SendAsMenu.tsx","webpack://TeleGPT/./src/components/middle/composer/ToDoListModal.tsx","webpack://TeleGPT/./src/components/left/settings/helpers/privacy.ts","webpack://TeleGPT/./src/components/common/GifButton.tsx","webpack://TeleGPT/./src/components/right/management/ManageReactions.tsx","webpack://TeleGPT/./src/components/common/StickerSetModal.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://TeleGPT/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://TeleGPT/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://TeleGPT/./src/components/left/ChatFolderModal.tsx","webpack://TeleGPT/./src/components/main/HistoryCalendar.tsx","webpack://TeleGPT/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.tsx","webpack://TeleGPT/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://TeleGPT/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://TeleGPT/./src/components/right/statistics/StoryStatistics.tsx","webpack://TeleGPT/./src/components/main/DeleteFolderDialog.tsx","webpack://TeleGPT/./src/components/middle/composer/StickerSetCover.tsx","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.tsx","webpack://TeleGPT/./src/components/right/StickerSetResult.tsx","webpack://TeleGPT/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://TeleGPT/./src/components/left/settings/SettingsStickers.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://TeleGPT/./src/components/left/settings/WallpaperTile.tsx","webpack://TeleGPT/./src/components/left/search/AISearchWrapper.tsx","webpack://TeleGPT/./src/components/modals/urlAuth/UrlAuthModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import React from '@teact';\nimport {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","import React from '@teact';\n/* eslint-disable max-len */\nimport copy from 'copy-to-clipboard';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport AIKnowledgeEmpty from '../../../assets/ai-knowledge-empty.png';\n\nconst AIKnowledgeEmptyContent = ({ onAdd }:{ onAdd:NoneToVoidFunction }) => {\n  return (\n    <div className=\"flex flex-col justify-center items-center px-[30px] pt-[120px]\">\n      <img src={AIKnowledgeEmpty} alt=\"AIKnowledge\" className=\"w-[125px] h-[125px] mb-[12px]\" />\n      <span className=\"text-[14px] text-[#676B74]\">\n        Store your frequently used personal info, company details, and business materials here.During chats, AI will reference this content to deliver more relevant and intelligent responses.\n      </span>\n      <Button\n        round\n        color=\"translucent\"\n        className=\"!bg-[#8C42F0] flex flex-row items-center gap-[8px] !w-[148px] !h-[42px] !p-0 !rounded-[21px] mt-[20px]\"\n        onClick={onAdd}\n      >\n        <Icon className=\"text-white text-[14px]\" name=\"add\" />\n        <span className=\"text-white\">Add</span>\n      </Button>\n    </div>\n  );\n};\nconst AIKnowledgeList = ({ knowledgeList, onEdit, onDelete }:{\n  knowledgeList:any[];\n  onEdit:(knowledge:AiKnowledge)=>void;\n  onDelete:(id:string)=>void;\n}) => {\n  const { showNotification } = getActions();\n  const handleCopy = useCallback((knowledge:AiKnowledge) => {\n    copy(knowledge.plainText);\n    showNotification({\n      message: 'TextCopied',\n    });\n  }, []);\n  const handleEdit = useCallback((knowledge:AiKnowledge) => {\n    onEdit(knowledge);\n  }, [onEdit]);\n  const handleDelete = useCallback((knowledge:AiKnowledge) => {\n    onDelete(knowledge.id);\n  }, [onDelete]);\n  return (\n    <div className=\"px-[20px]\">\n      {knowledgeList.map((item) => (\n        <div key={item.id} className=\"bg-[#F7F7F7] rounded-[12px] px-[16px] py-[15px] mb-[12px]\">\n          <div className=\"white-space-pre-wrap line-clamp-3 overflow-hidden text-ellipsis\">\n            {item?.question || ''}\n          </div>\n          <div className=\"white-space-pre-wrap line-clamp-3 overflow-hidden text-ellipsis\">\n            {item.plainText.replace(/\\\\n/g, '')}\n          </div>\n          <div className=\"flex justify-end gap-[8px] items-center\">\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCopy(item)}\n            >\n              <Icon name=\"copy\" className=\"text-[14px]\" />\n            </Button>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleEdit(item)}\n            >\n              <Icon name=\"edit\" className=\"text-[14px]\" />\n            </Button>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleDelete(item)}\n            >\n              <Icon name=\"delete\" className=\"text-[14px]\" />\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\nconst AIKnowledgeContent = ({\n  knowledgeList, onShowAddModal, onEdit, onDelete,\n}:{\n  knowledgeList:any[];\n  onShowAddModal:(type:'edit' | 'add')=>void ;\n  onEdit:(knowledge:AiKnowledge)=>void;\n  onDelete:(id:string)=>void;\n}) => {\n  const handleAdd = useCallback(() => {\n    onShowAddModal('add');\n  }, [onShowAddModal]);\n  return (\n    <div className=\"pt-[20px] h-full box-border\">\n      {knowledgeList.length === 0 ? (\n        <AIKnowledgeEmptyContent onAdd={handleAdd} />\n      ) : (\n        <AIKnowledgeList knowledgeList={knowledgeList} onEdit={onEdit} onDelete={onDelete} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(AIKnowledgeContent);\n","import React from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message, UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { messageEmbeddingStore } from '../vector-store';\n\nimport { AISearchInput } from './AISearchInput';\n\nconst GLOBAL_SEARCH_CHATID = '777889';\n\nexport const AISearch = () => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n  // eslint-disable-next-line @stylistic/max-len\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, status, stop,\n  } = useChat({\n    id: GLOBAL_SEARCH_CHATID,\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    ChataiStores.message?.getMessages(GLOBAL_SEARCH_CHATID, undefined, 20)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseStoreMessage2Message(res.messages);\n        setMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const suggestionMessage: Message = {\n          role: 'assistant',\n          id: uuidv4(),\n          createdAt: new Date(),\n          content: '',\n          annotations: [{\n            type: 'ai-search-sugesstion',\n          }],\n        };\n        setMessages([suggestionMessage]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n    return () => {\n      setMessages([]);\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (messages.length > 0 && status === 'ready') {\n      const parsedMessage = parseMessage2StoreMessage(GLOBAL_SEARCH_CHATID, messages);\n      ChataiStores.message?.storeMessages([...parsedMessage]);\n    }\n  }, [status, messages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.message?.getMessages(GLOBAL_SEARCH_CHATID, pageInfo?.lastTime, 20)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  //   const deleteMessage = useCallback((messageId: string) => {\n  //     ChataiStores.message?.delMessage(messageId).then(() => {\n  //       setLocalChatAiMessages((prev) => prev.filter((message) => message.id !== messageId));\n  //       setMessages((prev) => prev.filter((message) => message.id !== messageId));\n  //     });\n  //   }, [setMessages]);\n\n  const searchGroup = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n      filterOptions: {\n        include: {\n          metadata: {\n            chatType: 'group',\n          },\n        },\n      },\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    let searchResult = null;\n    if (similarItems.length > 0) {\n      const chatIds = Array.from(new Set(similarItems.map((item: any) => {\n        if (item.score > 0.7) {\n          return (item?.metadata as { chatId: string })?.chatId;\n        }\n        return undefined;\n      }).filter(Boolean)));\n      if (chatIds.length > 0) {\n        searchResult = JSON.stringify(chatIds);\n      }\n    }\n    if (searchResult) {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: searchResult,\n        createdAt: new Date(),\n        parts: [],\n        annotations: [{\n          type: 'group-search',\n        }],\n      };\n      setMessages((prev) => [...prev, message]);\n    } else {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: 'No relevant group was found',\n        createdAt: new Date(),\n        parts: [],\n      };\n      setMessages((prev) => [...prev, message]);\n    }\n  }, [setMessages]);\n\n  const searchUser = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n      filterOptions: {\n        include: {\n          metadata: {\n            chatType: 'private',\n          },\n        },\n      },\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    let searchResult = null;\n    if (similarItems.length > 0) {\n      const senderIds = Array.from(new Set(similarItems.map((item: any) => {\n        if (item.score > 0.7) {\n          return (item?.metadata as { senderId: string })?.senderId;\n        }\n        return undefined;\n      }).filter(Boolean)));\n      if (senderIds.length > 0) {\n        searchResult = JSON.stringify(senderIds);\n      }\n    }\n    if (searchResult) {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: searchResult,\n        createdAt: new Date(),\n        parts: [],\n        annotations: [{\n          type: 'user-search',\n        }],\n      };\n      setMessages((prev) => [...prev, message]);\n    } else {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: 'No relevant users was found',\n        createdAt: new Date(),\n        parts: [],\n      };\n      setMessages((prev) => [...prev, message]);\n    }\n  }, [setMessages]);\n  const searchMessage = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    if (similarItems.length > 0) {\n      const messageList = similarItems.map((item: any) => {\n        const { chatId, senderId } = item.metadata as { chatId: string; senderId: string };\n        const chat = selectChat(global, chatId);\n        if (chat) {\n          const peer = senderId ? selectUser(global, senderId) : undefined;\n          return {\n            chatId,\n            chatTitle: chat?.title ?? 'Unknown',\n            senderName: peer ? `${peer.firstName || ''} ${peer.lastName || ''}` : '',\n            content: item.text,\n          };\n        }\n        return null;\n      });\n      append({\n        role: 'user',\n        content: `你是一个专业的聊天记录分析师,用户输入的关键词是${query},下面是根据关键词检索出来的相关的聊天记录,请对此加以总结:\n          # 总结消息偏好:\n              ## 根据消息的内容选择合适的语种进行总结\n              ## 过滤所有的无意义消息；\n              ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n              ## 为保证输出内容的完整性,尽量精简总结内容；\n              ## 主话题不超过5个,子话题总数不超过15个\n          # 消息内容\n          ${JSON.stringify(messageList)}\n        `,\n        id: Math.random().toString(),\n        annotations: [{\n          isAuxiliary: true,\n        }],\n      });\n      scrollToBottom();\n    }\n  }, [append, global, scrollToBottom]);\n\n  const toolsHitCheck = useCallback((inputValue: string) => {\n    fetch(`${SERVER_API_URL}/tool-check`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        messages: [{\n          id: uuidv4(),\n          content: inputValue,\n          role: 'user',\n        }],\n      }),\n    }).then((res) => res.json())\n      .then((toolResults) => {\n        if (toolResults && toolResults.length > 0) {\n          toolResults.forEach((toolCall: any) => {\n            if (toolCall.toolName === 'checkIsSearchGroup') {\n              searchGroup(toolCall.result.keyword);\n            } else if (toolCall.toolName === 'checkIsSearchUser') {\n              searchUser(toolCall.result.keyword);\n            } else if (toolCall.toolName === 'nullTool') {\n              // eslint-disable-next-line no-console\n              console.log('没有命中工具');\n              searchMessage(inputValue);\n            }\n          });\n        }\n      });\n  }, [searchGroup, searchMessage, searchUser]);\n\n  const handleSearch = useCallback((query: string) => {\n    setMessages((messages) => {\n      return [...messages, {\n        role: 'user',\n        content: query,\n        id: Math.random().toString(),\n        createdAt: new Date(),\n      }];\n    });\n    toolsHitCheck(query);\n  }, [setMessages, toolsHitCheck]);\n\n  return (\n    <div className=\"pb-[28px] flex-1 flex flex-col h-full gap-[8px] overflow-hidden\">\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        status={status}\n        messages={messages}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={GLOBAL_SEARCH_CHATID}\n      />\n      <form className=\"flex mx-auto gap-2 w-full\">\n        <AISearchInput\n          status={status}\n          stop={stop}\n          setMessages={setMessages}\n          handleSearch={handleSearch}\n        />\n      </form>\n    </div>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport { AISearchWrapper } from './AISearchWrapper';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  // { type: GlobalSearchContent.AI, key: 'SearchTabAI' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.AI:\n              return (\n                <AISearchWrapper />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","import React from '@teact';\nimport { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","import React from '@teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React from '@teact';\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport AddKnowledgeModal from './AddKnowledgeModal';\nimport AIKnowledgeContent from './AIKnowledgeContent';\nimport AIKnowledgeHeader from './AIKnowledgeHeader';\n\nexport type OwnProps = {\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\nconst AIKnowledge:FC<OwnProps> = ({ onReset }) => {\n  const [knowledgeList, setKnowledgeList] = useState<AiKnowledge[]>([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [type, setType] = useState<'edit' | 'add'>('add');\n  const [editKnowledge, setEditKnowledge] = useState<AiKnowledge | null>(null);\n  useEffect(() => {\n    ChataiStores.knowledge?.getAllKnowledge().then((knowledge) => {\n      setKnowledgeList(knowledge || []);\n    });\n  }, []);\n  const handleReset = useLastCallback(() => {\n    onReset(true);\n  });\n  const handleCloseAddModal = useCallback(() => {\n    setShowAddModal(false);\n  }, []);\n  const handleShowAddModal = useCallback((type:'edit' | 'add') => {\n    setShowAddModal(true);\n    setType(type);\n  }, []);\n  const handleEdit = useCallback((knowledge:AiKnowledge) => {\n    setType('edit');\n    setEditKnowledge(knowledge);\n    setShowAddModal(true);\n  }, []);\n  const handleUpdate = useCallback(() => {\n    setEditKnowledge(null);\n    ChataiStores.knowledge?.getAllKnowledge().then((knowledge) => {\n      setKnowledgeList(knowledge || []);\n    });\n  }, []);\n  const handleDelete = useCallback((id:string) => {\n    ChataiStores.knowledge?.deleteKnowledge(id).then(() => {\n      setKnowledgeList((prev) => {\n        return prev.filter((item) => item.id !== id);\n      });\n    });\n  }, []);\n  function renderCurrentSection() {\n    return (\n      <>\n        <AIKnowledgeHeader\n          onReset={handleReset}\n          showAddButton={knowledgeList.length > 0}\n          onShowAddModal={handleShowAddModal}\n        />\n        <AIKnowledgeContent knowledgeList={knowledgeList} onShowAddModal={handleShowAddModal} onEdit={handleEdit} onDelete={handleDelete} />\n        {showAddModal && (\n          <AddKnowledgeModal type={type} isOpen={showAddModal} onClose={handleCloseAddModal} knowledge={editKnowledge} onUpdate={handleUpdate} />\n        )}\n      </>\n\n    );\n  }\n  return (\n    <Transition\n      id=\"AiKnowledge\"\n      name=\"fade\"\n      activeKey={0}\n      renderCount={1}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(AIKnowledge);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"aZyt0u4J\",\"table\":\"d76opBrW\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(global: GlobalState, params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  showAddButton:boolean;\n  onReset: () => void;\n  onShowAddModal:(type:'edit' | 'add') => void;\n};\nconst AIKnowledgeHeader: FC<OwnProps> = ({ onReset, showAddButton, onShowAddModal }) => {\n  const oldLang = useOldLang();\n\n  function renderHeaderContent() {\n    return <h3>{oldLang('Quick Replies')}</h3>;\n  }\n  const handleAdd = useCallback(() => {\n    onShowAddModal('add');\n  }, [onShowAddModal]);\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      {showAddButton && (\n        <Button\n          round\n          color=\"translucent\"\n          className=\"!bg-[#8C42F0] flex flex-row items-center gap-[8px] !w-[92px] !h-[30px] !p-0 !rounded-[21px] !text-[14px]\"\n          onClick={handleAdd}\n        >\n          <Icon className=\"text-white text-[14px]\" name=\"add\" />\n          <span className=\"text-white\">Add</span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(AIKnowledgeHeader);\n","import React from '@teact';\nimport type { TeactNode } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React from '@teact';\nimport {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { telegptSettings } from '../../chatAssistant/api/user-settings';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport AutoTranslateLanguage from './AutoTranslateLanguage';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\ntype StateProps = { autoTranslate: boolean | undefined };\n\nconst AITranslateContent: FC<OwnProps & StateProps> = ({\n  autoTranslate,\n  isActive,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    // openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const [displayAutoTranslate, setDisplayAutoTranslate] = useState(autoTranslate);\n\n  const handleAutoTranslateChange = useLastCallback((newValue: boolean) => {\n    setDisplayAutoTranslate(newValue);\n    setSettingOption({ autoTranslate: newValue });\n    telegptSettings.setSettingOption({\n      autotranslate: newValue,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('Auto Translate')}\n          checked={displayAutoTranslate}\n          onCheck={handleAutoTranslateChange}\n        />\n      </div>\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Language')}\n        </h4>\n        <AutoTranslateLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      autoTranslate,\n    } = global.settings.byKey;\n\n    return {\n      autoTranslate,\n    };\n  },\n)(AITranslateContent));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","import React from '@teact';\nimport {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch.ts';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import React from '@teact';\nimport {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"tHOvsXvB\",\"container\":\"aE_tTreD\",\"header\":\"pvOW79XD\",\"title\":\"QQrZjQwa\",\"subtitle\":\"mNshS0kL\",\"content\":\"VPxgzl1P\",\"input\":\"AAMVR_VT\",\"error\":\"hHHsDtnR\",\"footer\":\"qoqDTwEz\",\"submitButton\":\"PoDbRDyr\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React from '@teact';\nimport { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React from '@teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","import React from '@teact';\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { injectComponent } from '../../chatAssistant/injectComponent';\n\nimport Modal from '../../ui/Modal';\nimport AIKnowledgeEditor from './AIKnowledgeEditor';\n\nimport './AIKnowledgeEditor.scss';\n\ntype OwnProps = {\n  knowledge?:AiKnowledge | null;\n  type: 'add' | 'edit';\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdate:()=>void;\n};\nconst AddKnowledgeModal = ({\n  type, knowledge, isOpen, onClose, onUpdate,\n}: OwnProps) => {\n  const editorRef = injectComponent({\n    component: AIKnowledgeEditor,\n    props: {\n      knowledge,\n      type,\n      onClose,\n      onUpdate,\n    },\n  })\n  return (\n    <Modal\n      title=\"Notes\"\n      hasCloseButton\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 1000px; width: 70vw; height: 60vh;\"\n    >\n      <div className=\"knowledge-editor\" ref={editorRef} />\n    </Modal>\n  );\n};\nexport default AddKnowledgeModal;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","/* eslint-disable no-null/no-null */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleSearch,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleSearch: (inputValue: string) => void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleSearch(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleSearch, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full mx-[22px] flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const AISearchInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable no-null/no-null */\nimport cx from 'classnames';\nimport copy from 'copy-to-clipboard';\nimport React, { memo, useCallback, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport LinkIcon from '../../../components/chatAssistant/assets/invite/link.svg';\nimport UserGroupIcon from '../../../components/chatAssistant/assets/invite/user-group.svg';\nimport HeaderBg from '../../chatAssistant/assets/share-header-bg.png';\nimport { getAllInviteInfo } from '../../chatAssistant/utils/telegpt-api';\n\nimport Icon from '../../common/icons/Icon';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport styles from './InviteFriendsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteFriendsModal'];\n};\n\ninterface InviteInfo {\n  myInvitation: {\n    inviteCode: string;\n    inviterId: string;\n    invitedAt: string;\n  };\n  myInviteCodes: {\n    inviteCode: string;\n    invitedUser: string;\n    invitedUserName: string;\n    points: number;\n    invitedAt: string;\n    status: 'available' | 'used';\n  }[];\n}\n\nconst InviteFriendsModal = ({ modal }: OwnProps) => {\n  const { closeInviteFriendsModal } = getActions();\n  const [inviteInfo, setInviteInfo] = useState<InviteInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (modal?.isOpen) {\n      getAllInviteInfo().then((res) => {\n        if (res.code === 0) {\n          setInviteInfo(res.data);\n        }\n        setLoading(false);\n      }).catch(() => {\n        setLoading(false);\n      });\n    }\n  }, [modal?.isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeInviteFriendsModal();\n  }, [closeInviteFriendsModal]);\n\n  const handleCopy = (code: string) => {\n    copy(code);\n    getActions().showNotification({\n      message: 'TextCopied',\n    });\n  };\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={modal.isOpen}\n      onClose={handleClose}\n      className={styles.modal}\n    >\n      <div className={styles.header}>\n        <img src={HeaderBg} alt=\"\" />\n        <Icon className=\"text-[18px] cursor-pointer z-10 mt-[1rem]\" name=\"close\" onClick={handleClose} />\n      </div>\n      <div className={styles.content}>\n        <div className=\"flex flex-col gap-[12px]\">\n          <div className=\"flex items-center gap-[10px]\">\n            <img className=\"w-[20px] h-[20px]\" src={LinkIcon} alt=\"\" />\n            <span className=\"text-[16px] text-[var(--color-text)] font-semibold\">\n              My Code\n            </span>\n          </div>\n          <div className=\"text-[var(--color-text-secondary)] text-[14px]\">\n            This is your exclusive invitation code, it has already been linked to your account.\n          </div>\n          <div className=\"text-[14px] text-[var(--color-text)]\">\n            <span className=\"font-bold\">{inviteInfo?.myInvitation.inviteCode}</span>\n            <span>(Used by my account)</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col gap-[12px] mt-[18px]\">\n          <div className=\"flex items-center gap-[10px]\">\n            <img className=\"w-[20px] h-[20px]\" src={UserGroupIcon} alt=\"\" />\n            <span className=\"text-[16px] text-[var(--color-text)] font-semibold\">\n              Get Credits for Inviting Friends\n            </span>\n          </div>\n          <div className=\"text-[var(--color-text-secondary)] text-[14px]\">\n            Share the invitation codes below with your friends! When a new user signs up and uses your invitation code, both you and the invitee will each receive a 100 credit bonus.\n          </div>\n          <table className={styles.table} role=\"table\" aria-label=\"Codes, Invitees, Credits and Time\">\n            <thead className=\"h-[36px] bg-[#F6F6F6] dark:bg-[var(--color-background)]\">\n              <tr role=\"row\">\n                <th role=\"columnheader\">Codes</th>\n                <th role=\"columnheader\">Invitees</th>\n                <th role=\"columnheader\">Credits</th>\n                <th role=\"columnheader\">Time</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {\n                loading ? (\n                  <tr>\n                    <td colSpan={4} className=\"text-center py-4\">\n                      <Spinner />\n                    </td>\n                  </tr>\n                ) : (\n                  inviteInfo?.myInviteCodes.map((item) => {\n                    return (\n                      <tr role=\"row\">\n                        <td data-label=\"Codes\">\n                          <div\n                            className={cx('w-[100px] h-[36px] text-white text-[14px] flex items-center justify-center gap-[6px] rounded-[8px] bg-[#369CFF]', {\n                              'bg-[#D6D6D6]': item.status === 'used',\n                            })}\n                            onClick={() => handleCopy(item.inviteCode)}\n                          >\n                            <span>{item.inviteCode}</span>\n                            <Icon name=\"copy\" className=\"cursor-pointer text-[18px]\" />\n                          </div>\n                        </td>\n                        <td data-label=\"Invitees\">{item.invitedUserName || ''}</td>\n                        <td data-label=\"Credits\">{item.points || ''}</td>\n                        <td data-label=\"Time\">\n                          {item.invitedAt ? new Date(item.invitedAt).toLocaleString() : ''}\n                        </td>\n                      </tr>\n                    );\n                  })\n                )\n              }\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(InviteFriendsModal);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React from '@teact';\nimport {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import React from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              size=\"smaller\"\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig?.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\n// Import React dependencies.\nimport React, {\n  type ChangeEvent,\n  useCallback, useRef, useState,\n} from 'react';\nimport type { DSlateRef } from '@dslate/antd';\nimport DSlate from '@dslate/antd';\nimport { Button, Input } from 'antd';\nimport type { Descendant } from 'slate';\nimport { Node } from 'slate';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { ChataiStores } from '../../chatAssistant/store';\n\ntype OwnProps = {\n  knowledge?: AiKnowledge | null;\n  type: 'add' | 'edit';\n  onClose: () => void;\n  onUpdate: () => void;\n};\n\nconst ErrorTip = ({ message }: { message: string }) => {\n  return (\n    <div className=\"text-[12px] leading-[18px] text-red-400\">{message}</div>\n  );\n};\n\nconst AIKnowledgeEditor = (props: OwnProps) => {\n  const {\n    type, knowledge, onClose, onUpdate,\n  } = props;\n  const knowledgeId = useRef(uuidv4());\n  const [value, setValue] = useState<Descendant[]>(knowledge?.richText || [\n    {\n      type: 'paragraph',\n      children: [{ text: '' }],\n    },\n  ]);\n  const [question, setQuestion] = useState<string>(knowledge?.question || '');\n  const [questionError, setQuestionError] = useState<string>('');\n  const [valueError, setValueError] = useState<string>('');\n  const ref = useRef<DSlateRef>(null);\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n  const serialize = (nodes: Descendant[]) => {\n    return nodes.map((n) => Node.string(n)).join('\\n');\n  };\n  const handleSave = useCallback(() => {\n    const plainText = serialize(value);\n    if (!plainText) {\n      setValueError('Please enter your notes');\n      return;\n    } else {\n      setValueError('');\n    }\n    if (!question) {\n      setQuestionError('Please enter a question');\n      return;\n    } else {\n      setQuestionError('');\n    }\n    const knowledgeIdValue = type === 'add' ? knowledgeId.current : knowledge?.id as string;\n    ChataiStores.knowledge?.addKnowledge({\n      id: knowledgeIdValue,\n      richText: value,\n      plainText,\n      question,\n    }).then(() => {\n      onClose();\n      onUpdate();\n    });\n  }, [knowledge?.id, onClose, onUpdate, question, type, value]);\n  return (\n    <div className=\"flex flex-col gap-[20px] h-full\">\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <DSlate\n          className=\"flex-1 flex flex-col overflow-hidden\"\n          ref={ref}\n          value={value}\n          onChange={setValue}\n          toolbar={['history', 'bold', 'italic', 'decoration', 'text-align', 'list']}\n          placeholder=\"Save your most-used answers as Quick Replies — e.g. your email, Calendly link, or a short project intro. Next time someone asks, insert it in one tap. \"\n        />\n        {valueError && <ErrorTip message={valueError} />}\n      </div>\n      <div className=\"flex flex-col gap-[8px]\">\n        <div>\n          Preset standard questions\n          <span className=\"text-[#FF543D]\">*</span>\n        </div>\n        <Input value={question} onChange={handleQuestionChange} />\n        {questionError && <ErrorTip message={questionError} />}\n      </div>\n      <div className=\"flex flex-row gap-8 justify-end\">\n        <Button className=\"!w-[120px] !h-[42px]\" onClick={onClose}>Cancel</Button>\n        <Button type=\"primary\" className=\"!w-[120px] !h-[42px]\" onClick={handleSave}>Add</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AIKnowledgeEditor;\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React from '@teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={oldLang('ChatList.Search.NoResults')}\n                description={oldLang('ChatList.Search.NoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React from '@teact';\nimport type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","import React from '@teact';\nimport type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React from '@teact';\nimport { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { STARS_CURRENCY_CODE, STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_COMMISSION_PERMILLE,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_COMMISSION_PERMILLE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig?.starsSuggestedPostCommissionPermille\n      || STARS_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const tonCommissionPermille = appConfig?.tonSuggestedPostCommissionPermille\n      || TON_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const minAge = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = (appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN) * 2;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","import React from '@teact';\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport Transition from '../../ui/Transition';\nimport AITranslateContent from './AITranslateContent';\nimport AITranslateHeader from './AITranslateHeader';\n\nexport type OwnProps = {\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\nconst AITranslate:FC<OwnProps> = ({ onReset }) => {\n  function renderCurrentSection() {\n    return (\n      <>\n        <AITranslateHeader onReset={onReset} />\n        <AITranslateContent onReset={onReset} />\n      </>\n    );\n  }\n  return (\n    <Transition\n      id=\"AiTranslate\"\n      name='fade'\n      activeKey={0}\n      renderCount={1}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(AITranslate);\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React from '@teact';\nimport { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","import React from '@teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_AMOUNT_MAX,\n  STARS_SUGGESTED_POST_AMOUNT_MIN,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_AMOUNT_MAX,\n  TON_SUGGESTED_POST_AMOUNT_MIN } from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate ? scheduleDate / 1000 : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig?.starsSuggestedPostAmountMax || STARS_SUGGESTED_POST_AMOUNT_MAX;\n    const minStarsAmount = appConfig?.starsSuggestedPostAmountMin || STARS_SUGGESTED_POST_AMOUNT_MIN;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n\n    const tonMaxAmount = appConfig?.tonSuggestedPostAmountMax || TON_SUGGESTED_POST_AMOUNT_MAX;\n    const tonMinAmount = appConfig?.tonSuggestedPostAmountMin || TON_SUGGESTED_POST_AMOUNT_MIN;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Modal from '../../ui/Modal';\n\nimport styles from './CreditsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['creditsModal'];\n};\n\ninterface StateProps {\n  credits?: GlobalState['credits'];\n}\nconst CreditsModal = ({ modal, credits }: OwnProps & StateProps) => {\n  const { closeCreditsModal } = getActions();\n\n  const handleClose = useLastCallback(() => {\n    closeCreditsModal();\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(modal?.isOpen)}\n      contentClassName={styles.content}\n      title=\"Credits Detail\"\n      hasCloseButton\n      onClose={handleClose}\n    >\n      <table className={styles.table} role=\"table\" aria-label=\"Codes, Invitees, Credits and Time\">\n        <thead className=\"h-[36px] bg-[#F6F6F6] dark:bg-[var(--color-background)]\">\n          <tr role=\"row\">\n            <th role=\"columnheader\">Detail</th>\n            <th role=\"columnheader\">Date</th>\n            <th role=\"columnheader\">Credits change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {!credits || credits.pointsHistory?.length === 0 ? (\n            <tr>\n              <td colSpan={4} className=\"text-center text-[var(--color-text-secondary)] py-4\">\n                No Data\n              </td>\n            </tr>\n          ) : (\n            credits.pointsHistory?.map((item: any) => {\n              return (\n                <tr role=\"row\">\n                  <td data-label=\"Detail\">{item.sourceDescription}</td>\n                  <td data-label=\"Invitees\">{new Date(item.createdAt).toLocaleString()}</td>\n                  <td data-label=\"Credits\">{item.amount}</td>\n                </tr>\n              );\n            })\n          )}\n        </tbody>\n      </table>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { credits } = global;\n\n    return {\n      credits,\n    };\n  },\n)(CreditsModal));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport {\n  AI_FOLDER_ID, ALL_FOLDER_ID, PRESET_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS, UNREAD_FOLDER_ID,\n} from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { filterAIFolder } from '../../../chatAssistant/ai-chatfolders/util';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      } else if (id === PRESET_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'Preset',\n            entities: [],\n          },\n        };\n      } else if (id === UNREAD_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'Unread',\n            entities: [],\n          },\n        };\n      } else if (id === AI_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'AI',\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            // eslint-disable-next-line max-len\n            if (folder.id === ALL_FOLDER_ID || folder.id === PRESET_FOLDER_ID || folder.id === UNREAD_FOLDER_ID || folder.id === AI_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">\n                      {/* {lang('FoldersAllChatsDesc')} */}\n                      {\n                        folder.id === UNREAD_FOLDER_ID\n                          ? lang('FoldersUnreadChatsDesc') : folder.id === PRESET_FOLDER_ID\n                            ? 'Preset Tags' : folder.id === AI_FOLDER_ID\n                              ? 'AI-Generated Tags' : lang('FoldersAllChatsDesc')\n                      }\n                    </span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    let folderIds = global.chatFolders.orderedIds;\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      folderIds = filterAIFolder(folderIds);\n    }\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","import React from '@teact';\nimport { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import React from '@teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig?.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import React from '@teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  onReset: () => void;\n};\nconst AITranslateHeader: FC<OwnProps> = ({ onReset }) => {\n  const oldLang = useOldLang();\n\n  function renderHeaderContent() {\n    return <h3>{oldLang('AI Translate')}</h3>;\n  }\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n    </div>\n  );\n};\n\nexport default memo(AITranslateHeader);\n","import React from '@teact';\nimport type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Atk759rS\",\"content\":\"EsOVcnjd\",\"header\":\"JncR5ehY\",\"table\":\"grZMXdp1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T_GGJ8J2\",\"item\":\"fe7VNmNB\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React from '@teact';\nimport { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, currentItem);\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","/* eslint-disable no-console */\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport HeaderBg from '../../chatAssistant/assets/share-header-bg.png';\nimport { submitInviteCode } from '../../chatAssistant/utils/telegpt-api';\n\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './InviteCodeModal.module.scss';\n\nexport interface OwnProps {\n  modal: TabState['inviteCodeModal'];\n}\n\nconst InviteCodeModal = ({ modal }: OwnProps) => {\n  const { closeInviteCodeModal } = getActions();\n  const [inviteCode, setInviteCode] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!inviteCode.trim()) return;\n\n    setIsSubmitting(true);\n    try {\n      submitInviteCode(inviteCode).then((res) => {\n        if (res.code === 0) {\n          closeInviteCodeModal();\n          setError('');\n        } else {\n          console.log('Failed to submit invite code:', res);\n          setError(res.error);\n        }\n      });\n    } catch (error) {\n      console.error('Failed to submit invite code:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInviteCode(e.target.value);\n  };\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={modal.isOpen}\n      onClose={() => {}} // 不允许关闭\n      className={styles.modal}\n    >\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <img src={HeaderBg} alt=\"\" />\n        </div>\n        <div className={styles.content}>\n          <h3 className={styles.title}>Invitation Code</h3>\n\n          <InputText\n            value={inviteCode}\n            onChange={handleInputChange}\n            placeholder=\"Please enter the invitation code\"\n            className={styles.input}\n          />\n          <div className={styles.error}>{error}</div>\n          <div className={styles.actions}>\n            <Button\n              onClick={handleSubmit}\n              disabled={!inviteCode.trim() || isSubmitting}\n              className={styles.submitButton}\n              noForcedUpperCase\n            >\n              {isSubmitting ? 'Confirm...' : 'Confirm'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(InviteCodeModal);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift) {\n      const perUserTotal = gift.type !== 'starGiftUnique' ? gift.perUserTotal : 0;\n      return lang('DescriptionGiftPremiumRequired', { count: perUserTotal });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { telegptSettings } from '../../chatAssistant/api/user-settings';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './AutoTranslateLanguage.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype StateProps = { autoTranslateLanguage:string | undefined };\nconst AutoTranslateLanguage: FC<StateProps> = ({ autoTranslateLanguage }) => {\n  const { setSettingOption } = getActions();\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string | undefined>(autoTranslateLanguage);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  const handleChange = useLastCallback((newSelectedIds: string) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      autoTranslateLanguage: newSelectedIds,\n      translationLanguage: newSelectedIds,\n    });\n    telegptSettings.setSettingOption({\n      autotranslatelanguage: newSelectedIds,\n    });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValue={displayedOptions}\n          onSelectedValueChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable={false}\n          allowMultiple={false}\n          withDefaultPadding\n          itemInputType=\"radio\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      autoTranslateLanguage,\n    } = global.settings.byKey;\n\n    return {\n      autoTranslateLanguage,\n    };\n  },\n)(AutoTranslateLanguage));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import React from '@teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React from '@teact';\n/* eslint-disable no-null/no-null */\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { injectComponent } from '../../chatAssistant/injectComponent';\nimport { AISearch } from '../../chatAssistant/ai-search/AISearch';\n\nconst injectMessageAI = injectComponent({ component: AISearch });\nexport const AISearchWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | undefined>(undefined);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current);\n    }\n    return () => {\n      injected?.unmount();\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"LeftSearch--content\" ref={containerRef} />\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n"],"names":["ManageChatAdministrators","isActive","chat","isChannel","currentUserId","adminMembersById","onScreenSelect","onChatMemberSelect","onClose","toggleSignatures","getActions","lang","useOldLang","useHistoryBack","onBack","areSignaturesEnabled","Boolean","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","isCreator","getHasAdminRight","canToggleSignatures","adminMembers","useMemo","owner","admins","partition","Object","values","member","isOwner","handleAdminMemberClick","useLastCallback","userId","promotedByUserId","ManagementScreens","ChatAdminRights","handleToggleSignatures","chatId","id","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","usersById","getGlobal","users","byId","promotedByUser","undefined","getUserFullName","React","className","ListItem","icon","multiline","disabled","dir","isRtl","map","key","onClick","PrivateChatInfo","status","forceShowSelf","FloatingActionButton","isShown","ariaLabel","Icon","name","Checkbox","checked","label","onChange","memo","withGlobal","global","selectChat","isChatChannel","selectChatFullInfo","SharePreparedMessageModal","modal","isPaymentMessageConfirmDialogOpen","isStarsBalanceModalOpen","starsBalance","closeSharePreparedMessageModal","sendInlineBotResult","sendWebAppEvent","showNotification","updateSharePreparedMessageModalSendArgs","isOpen","markIsShown","unmarkIsShown","useFlag","useEffect","message","filter","webAppKey","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleClose","event","eventType","eventData","error","handleSend","threadId","peer","selectPeer","MAIN_THREAD_ID","result","queryId","getPeerTitle","args","handleSelectRecipient","peerId","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","RecipientPicker","searchPlaceholder","onSelectRecipient","onCloseAnimationEnd","isLowStackPriority","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","confirmHandler","tabState","selectTabState","stars","balance","amount","starsBalanceModal","AIKnowledgeEmptyContent","onAdd","src","AIKnowledgeEmpty","alt","Button","round","color","AIKnowledgeList","knowledgeList","onEdit","onDelete","handleCopy","useCallback","knowledge","copy","plainText","handleEdit","handleDelete","item","question","replace","size","AIKnowledgeContent","onShowAddModal","handleAdd","length","EXPAND_ANIMATION_DURATION_MS","LINES_TO_SHOW","StoryCaption","story","isExpanded","onExpand","onFold","ref","useRef","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","content","text","hasOverflow","setHasOverflow","useState","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","requestMutation","current","addExtraClass","styles","animate","removeExtraClass","canExpand","shouldRender","shouldRenderShowMore","transitionClassNames","useShowTransitionDeprecated","useLayoutEffect","requestMeasure","container","button","offsetWidth","style","setProperty","requestForcedReflow","textContainer","textOffsetTop","offsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","top","fullClassName","buildClassName","captionContent","expanded","withShowMore","role","captionInner","forwardInfo","EmbeddedStoryForward","captionText","MessageText","messageOrStory","withTranslucentThumbs","forcePlayback","captionShowMore","StatisticsRecentStory","postStatistic","toggleStoryStatistics","isLoaded","video","imageHash","getStoryMediaHash","imgBlobUrl","useMedia","mediaThumbnail","thumbnail","dataUri","handleClick","storyId","root","withImage","title","summary","renderSummary","meta","viewsCount","info","date","formatDateTimeToString","code","StatisticsRecentPostMeta","blobUrl","imageContainer","draggable","image","circle","withStoryCircle","Avatar","withStorySolid","forceUnreadStorySolid","CURRENT_TYPE","INTERSECTION_THROTTLE","runThrottled","throttle","cb","FileResults","searchQuery","isLoading","chatsById","globalMessagesByChatId","foundIds","activeDownloads","shouldWarnAboutSvg","searchMessagesGlobal","focusMessage","containerRef","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleLoadMore","direction","LoadMoreDirection","Backwards","type","foundMessages","messageId","parseSearchResultKey","getMessageDocument","MEMO_EMPTY_ARRAY","handleMessageFocus","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","Transition","slideClassName","activeKey","shouldCleanup","InfiniteScroll","items","onLoadMore","noFastList","Loading","NothingFound","withSticker","description","index","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","Date","Document","document","withDate","datetime","smaller","sender","getSenderName","isDownloading","getIsDownloading","observeIntersection","onDateClick","createMapStateToProps","CountryPickerModal","onSubmit","countryList","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","usePreviousDeprecated","displayedIds","country","isHidden","iso2","defaultName","value","handleSelectedIdsChange","newSelectedIds","handleSubmit","Modal","onEnter","pickerSelector","pickerTitle","main","ItemPicker","picker","selectedValues","onSelectedValuesChange","noScrollRestore","allowMultiple","itemInputType","footer","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","MuteDuration","MuteChatModal","topicId","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","mutedUntil","MAX_INT_32","Math","floor","now","Number","RadioGroup","options","selected","isText","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","StickerSearch","query","featuredIds","resultIds","isModalOpen","loadFeaturedStickers","StickerSetResult","stickerSetId","renderContent","currentSearch","selectCurrentStickerSearch","featured","stickers","setIds","openedStickerSetShortName","ANIMATION_DURATION","STICKERS_TAB_INDEX","isActivated","SymbolMenu","canSendStickers","canSendGifs","isMessageComposer","idPrefix","isAttachmentModal","canSendPlainText","onEmojiSelect","onCustomEmojiSelect","onStickerSelect","onGifSelect","onRemoveSymbol","onSearchOpen","addRecentEmoji","addRecentCustomEmoji","isLeftColumnShown","isBackgroundTranslucent","animationLevel","menuPositionOptions","activeTab","setActiveTab","SymbolMenuTabs","Emoji","recentEmojis","setRecentEmojis","recentCustomEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","body","classList","add","remove","setTimeout","recentEmojisRef","forEach","emoji","handleEmojiSelect","emojis","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","ids","handleSearch","handleStickerSelect","sticker","isSilent","shouldSchedule","canUpdateStickerSetsOrder","isFrom","EmojiPicker","CustomEmoji","CustomEmojiPicker","loadAndPlay","isTranslucent","Stickers","StickerPicker","noContextMenus","GIFs","GifPicker","stopPropagation","resolveTransitionName","renderCount","SYMBOL_MENU_TAB_TITLES","faded","SymbolMenuFooter","onSwitchTab","canSearch","mobileClassName","Portal","Menu","_extends","withPortal","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","noCloseOnBackdrop","noCompact","positionX","positionY","selectIsContextMenuTranslucent","selectSharedSettings","MIN_REACTIONS_COUNT_FOR_FILTERS","ReactorListModal","reactors","reactions","seenByDates","availableReactions","loadReactors","closeReactorListModal","openChat","chats","oldLang","useLang","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","reaction","some","r","isSameReaction","push","peerIds","seenByUserIds","keys","unique","concat","viewportIds","getMore","useInfiniteScroll","nextOffset","ripple","formatIntegerCompact","find","reactionsCount","getReactionKey","ReactionStaticEmoji","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","formatDateAtTime","addedDate","noStatusOrTyping","avatarSize","statusIcon","reactorModal","selectChatMessage","LOCK_TIMEOUT","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","url","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","useCurrentTimeSignal","getIsWaiting","useVideoWaitingSignal","getCurrentTime","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","getPreviewDimensions","width","height","setPreview","time","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","progress","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","e","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","addEventListener","removeEventListener","ShowTransition","previewCanvas","previewTime","previewTimeText","track","start","end","buffered","played","seeking","div","createElement","getHtmlTextLength","html","innerHTML","fixImageContent","querySelectorAll","br","replaceWith","textContent","trim","SettingsMain","sessionCount","canBuyPremium","isGiveawayAvailable","tonBalance","onReset","loadMoreProfilePhotos","openPremiumModal","openSupportChat","openUrl","openGiftRecipientPicker","openStarsBalanceModal","openSettingsScreen","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","narrow","screen","SettingsScreens","General","Performance","Notifications","DataStorage","Privacy","Folders","ActiveSessions","Language","languageInfo","nativeName","leftElement","StarIcon","formatStarsAmount","currency","TON_CURRENCY_CODE","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","ConfirmDialog","confirmLabel","textParts","withNodes","renderTextFilters","selectIsGiveawayGiftsPurchaseAvailable","ton","activeSessions","orderedHashes","selectIsPremiumPurchaseBlocked","LeftSearchResultSponsored","sponsoredPeer","clickSponsored","viewSponsored","randomId","additionalInfo","sponsorInfo","useOnIntersect","entry","intersectionRatio","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleBadgeClick","handleMouseDown","handleBadgeMouseDown","useFastClick","buttonRef","useSelectWithEnter","onMouseDown","onContextMenu","isUserId","withUsername","withStory","storyViewerOrigin","StoryViewerOrigin","SearchResult","GroupChatInfo","BadgeButton","SponsoredMessageContextMenuContainer","anchor","triggerRef","canReport","ChatCommand","withAvatar","focus","command","clickArg","renderText","SUPPORTED_TYPES","SettingsGeneralBackground","background","isBlurred","loadedWallpapers","theme","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","target","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","slug","currentWallpaper","wallpaper","getAverageColor","then","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","UPLOADING_WALLPAPER_SLUG","WallpaperTile","isSelected","selectTheme","selectThemeValues","settings","MAX_FIELD_LENGTH","ExpiryInput","handleChange","newValue","endsWith","formatCardExpiry","InputText","inputMode","tabIndex","maxLength","teactExperimentControlled","PollResults","poll","resultsByOption","buildCollectionByKey","renderTextWithEntities","entities","answers","answer","PollAnswerResults","option","answerVote","totalVoters","pollResults","selectPollFromMessage","GLOBAL_SEARCH_CHATID","AISearch","getCurrentUserInfo","pageInfo","setPageInfo","lastTime","hasMore","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","messages","setMessages","append","stop","useChat","api","SERVER_API_URL","sendExtraMessageFields","ChataiStores","getMessages","res","localChatAiMessages","parseStoreMessage2Message","prev","suggestionMessage","uuidv4","createdAt","annotations","parsedMessage","parseMessage2StoreMessage","storeMessages","Promise","resolve","searchGroup","async","similarItems","messageEmbeddingStore","similaritySearch","k","filterOptions","include","metadata","chatType","searchResult","chatIds","Array","Set","score","JSON","stringify","parts","searchUser","senderIds","senderId","searchMessage","messageList","selectUser","chatTitle","senderName","firstName","lastName","random","toString","isAuxiliary","toolsHitCheck","inputValue","fetch","method","headers","json","toolResults","toolCall","toolName","keyword","console","log","Messages","loadMore","AISearchInput","TABS","GlobalSearchContent","ChatList","ChannelList","BotApps","PublicPosts","Media","Links","Files","Music","Voice","CHAT_TABS","slice","LeftSearch","searchDate","currentContent","setGlobalSearchContent","setGlobalSearchDate","checkSearchPostsFlood","dateSearchQuery","parseDateString","tabs","tab","handleSwitchTab","handleSearchDateSelect","getTime","handleKeyDown","useKeyboardListNavigation","onKeyDown","TabList","ChatMessageResults","onSearchDateSelect","ChatResults","isChannelList","MediaResults","LinkResults","AudioResults","isVoice","BotAppResults","AI","AISearchWrapper","PublicPostsResults","globalSearch","MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH","LESS_LIST_ITEMS_AMOUNT","contactIds","accountPeerIds","globalPeerIds","fetchingStatus","suggestedChannelIds","addRecentlyFoundChatId","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","useEffectOnce","context","handleChatClick","shouldReplaceHistory","handlePickerItemClick","getSearchContextCaption","getRootElement","getMenuElement","querySelector","getTriggerElement","handleClickContext","itemPlaceholderClass","localResults","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","filterPeersByQuery","contactIdsWithMe","localPeerIds","sortChatIds","useHorizontalScroll","globalResults","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","nothingFound","isMessagesFetching","shouldRenderTopPeers","isDisabled","RecentContacts","shouldRenderMessagesSection","noScrollRestoreOnTop","DateSuggest","onSelect","PeerChip","Link","LeftSearchResultChat","withOpenAppButton","autoClose","MenuItem","customIcon","renderMessageSummary","ChatMessage","userIds","contactList","resultsByType","byChatId","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","getClosestEntry","arr","reduce","curr","abs","SettingsActiveWebsites","byHash","terminateWebAuthorization","terminateAllWebAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedWebsiteHash","setOpenedWebsiteHash","openModal","closeModal","handleTerminateAuthClick","hash","handleTerminateAllAuth","handleOpenSessionModal","handleCloseWebsiteModal","sessionHashes","clearHelp","sessionHash","session","bot","botId","contextActions","destructive","handler","avatar","formatPastTimeShort","dateActive","platform","domain","browser","subtitle","ip","region","confirmIsDestructive","SettingsActiveWebsite","activeWebSessions","PROLONG_INTERVAL","LUMA_THRESHOLD","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","WebAppModal","attachBot","cachedSize","cachedPosition","closeActiveWebApp","closeWebAppModal","prolongWebView","toggleAttachBot","changeWebAppModalState","openWebAppTab","updateWebApp","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","modalState","windowSize","get","openedWebApps","activeWebAppKey","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","activeWebApp","isBackButtonVisible","headerColor","isSettingsButtonVisible","webApp","getWebAppKey","isMaximizedState","isMinimizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","state","isDragging","isResizing","draggableStyle","position","useDraggable","getMinimumSize","y","currentSize","currentWidth","currentHeight","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","registerSendEventCallback","callback","sendEvent","registerReloadFrameCallback","reloadFrame","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","update","isRemoveModalOpen","isEnabled","handleBackClick","handleCollapseClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","openBotChat","MoreMenuButton","onTrigger","isMenuOpen","tabMoreButton","moreButton","renderMenuItems","isAttachBot","renderMoreMenu","webAppTabMoreMenu","backButtonClassName","closeIcon","stateBack","headerTextVar","g","b","hexToRgb","luma","getColorLuma","renderTabCurveBorder","viewBox","fill","tabButtonCurvePath","d","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","dialogRef","multiTab","minimized","fullScreen","dialogStyle","dialogContent","header","buildStyle","headerButton","tabButtonWrapper","tabButtonLeftCurve","tabButton","avatarContainer","shortName","tabRightMask","tabCloseButton","tabCloseIcon","tabButtonRightCurve","renderActiveTab","tabAvatar","moreAppsTabIcon","toolBar","moreAppsButton","windowStateButton","fullscreenButton","stateIcon","MinimizedWebAppModal","DropdownMenu","trigger","noBackdrop","noBackdropClose","WebAppModalTabContent","isTransforming","onContextMenuButtonClick","isMultiTabSupported","modalHeight","MoreAppsTabContent","selectWebApp","activeBotId","attachMenu","bots","selectCurrentChat","miniAppsCachedPosition","miniAppsCachedSize","SettingsNotifications","notifyDefaults","hasContactJoinedNotifications","hasPushNotifications","hasWebNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","isMuted","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","handleVolumeChange","volume","playNotifySound","subLabel","RangeSlider","min","max","groups","channels","byKey","openAudioPlayer","currentType","handlePlayAudio","media","selectMessageDownloadableMedia","Audio","origin","AudioOrigin","Search","senderTitle","onPlay","canDownload","isProtected","SettingsActiveSessions","ttlDays","terminateAuthorization","terminateAllAuthorizations","changeSessionTtl","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateSessionClick","handleTerminateAllSessions","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","inactive","getSessionIcon","iconClassName","deviceModel","appName","appVersion","systemVersion","getLocation","areButtonsInColumn","SettingsActiveSession","join","JoinRequest","about","user","hideChatJoinRequest","createClassNameBuilder","fullName","fixedDate","getServerTime","dateString","isToday","formatTime","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","isChatProtected","WebLink","onMessageClick","ReactionEmoji","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","thumbDataUri","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","mediaData","getDocumentMediaHash","StarReaction","useMediaTransitionDeprecated","EMOJI_SIZE_PICKER","noPlay","observeIntersectionForPlaying","withTranslucentThumb","forceAlways","AnimatedIconWithPreview","play","isLowPriority","sharedCanvas","sharedCanvasCoords","usePopupLimit","sequentialLimit","resetAfter","unlockPopupsAt","setUnlockPopupsAt","sequentialCalls","lastClosedDate","handlePopupOpened","handlePopupClosed","BlockUserModal","blockedIds","localContactIds","setUserSearchQuery","blockUser","search","setSearch","filteredContactIds","availableContactIds","contactId","includes","sort","firstId","secondId","secondName","localeCompare","handleRemoveUser","ChatOrUserPicker","chatOrUserIds","onSearchChange","onSelectChatOrUser","blocked","userSearch","localUserIds","CUSTOM_EMOJI_SIZE","REM","SuggestedStatusModal","currentUser","setEmojiStatus","closeSuggestedStatusModal","renderingModal","mockPeerWithStatus","emojiStatus","customEmojiId","botName","formatShortDuration","withMarkdown","handleSetStatus","expires","referrerWebAppKey","until","contentClassName","hasAbsoluteCloseButton","isSlim","topEmoji","loopLimit","mockPeer","lovelyChartPromise","LovelyChart","ensureLovelyChart","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","MessageStatistics","statistics","dcId","setIsReady","loadedCharts","errorCharts","loadMessageStatistics","loadMessagePublicForwards","loadStatisticsAsyncGraph","forceUpdate","useForceUpdate","clear","graph","isGraph","graphType","token","isAsync","isError","has","zoomToken","create","children","onZoom","callApi","zoomOutLabel","ready","StatisticsOverview","publicForwardsData","hidden","publicForwards","publicForwardsTitle","itemSelector","StatisticsMessagePublicForward","data","statisticsDcId","currentMessage","currentMessageId","changeSessionSettings","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","hasCloseButton","iconDevice","box","note","actionHeader","actionName","Switcher","INTERSECTION_DEBOUNCE","savedGifs","isSavedMessages","loadSavedGifs","saveGif","debounceMs","handleUnsaveClick","gif","shouldUnsave","GifButton","onUnsaveClick","selectCurrentMessageList","selectIsChatWithSelf","gifs","saved","COLOR_START","COLOR_END","PremiumLimitPreview","leftValue","rightValue","colorStepProgress","i","lerp","PremiumLimitsCompare","rightStyle","ManageGroupUserPermissionsCreate","userStatusesById","members","memberIds","sortUserIds","handleExceptionMemberClick","memberId","GroupUserPermissions","teactFastList","teactOrderKey","statusesById","AIKnowledge","setKnowledgeList","showAddModal","setShowAddModal","setType","editKnowledge","setEditKnowledge","getAllKnowledge","handleReset","handleCloseAddModal","handleShowAddModal","handleUpdate","deleteKnowledge","renderCurrentSection","AIKnowledgeHeader","showAddButton","AddKnowledgeModal","shouldWrap","withSwipeControl","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","colorPickerRef","huePickerRef","isFirstRunRef","hsb","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","colorRect","offsetLeft","pick","hueRect","handleColorDrag","colorPosition","pageY","scrollTop","huePosition","hsb2positions","positions2hsb","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","drawColor","firstChild","drawHue","handleRgbChange","rgbValue","currentTarget","match","split","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","rects","canvas","w","h","ctx","offsetHeight","getContext","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","signal","createSignal","setIsPictureInPicture","usePictureInPictureSignal","usePictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_IOS","IS_PWA","setMode","getSetPresentationMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","exitPictureInPicture","exitPictureInPictureIfNeeded","enterPictureInPicture","getIsVideoPlaying","requestPictureInPicture","err","DEBUG","safePlay","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","pictureInPictureElement","TRUNCATE_LENGTH","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","active","topRow","LastMessageMeta","MessageSummary","highlight","truncateLength","preventDefault","copySelectedMessages","useHotkeys","permissionKeyList","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","hasLinkedChat","permissions","handlePermissionChange","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","isForum","isPublic","isChatPublic","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","stopEvent","handleDisabledClick","sendPlain","blocking","sendMedia","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendGifs","sendAudios","sendDocs","sendVoices","sendRoundvideos","embedLinks","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","fullInfo","linkedChatId","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","handleConfirm","isWriteAllowed","shouldRequestWriteAccess","tosLabel","linkText","href","MINI_APP_TOS_URL","rel","isConfirmDisabled","onCheck","SettingsAcceptedGift","disallowedGifts","isCurrentUserPremium","updateGlobalPrivacySettings","handleOpenTelegramPremiumModal","action","payload","actionText","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectIsCurrentUserPremium","BULLET","SenderInfo","closeMediaViewer","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","avatarOwner","profilePhotos","photos","mediaIndex","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","formattedDate","formatMediaDateTime","currentIndex","countText","isGroup","isChatGroup","messageSender","selectSender","openStoryViewer","loadPeerStoriesByIds","fromPeerId","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","PeerColorWrapper","getPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextContent","renderSender","selectPeerStory","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","CHANNELS_PEER","isCustomPeer","avatarIcon","titleKey","FOCUSED_SEARCH_TRIGGER_OFFSET","HIDE_TIMEOUT","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","debounce","MiddleSearch","monoforumChat","requestedQuery","savedTags","savedTag","totalCount","lastSearchQuery","isHistoryCalendarOpen","fetchingQuery","isHashtagQuery","searchType","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","inputRef","shouldCancelSearchRef","setQuery","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","setIsLoading","handleClickOutside","closest","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","window","mainEl","getElementById","handleResize","activeElement","pageTop","transform","documentElement","input","clearTimeout","requestNextMutation","focusEditableElement","useEffectWithPrevDeps","prevIsActive","prevIsCalendarOpen","captureEscKeyListener","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","isHashtag","removeListeners","fastRaf","viewportOffset","viewportResults","searchResultKey","originalSender","isSystemBot","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","indexOf","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","initialSection","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","customPeer","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","containerId","withCount","searchTypes","preloadBackwards","placeholder","focused","mobile","SearchInput","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onFocus","onUpClick","onDownClick","searchTags","savedSearchTag","icons","selectedAt","getDayStartAt","counter","viewStyle","fluid","noForcedUpperCase","mobileNavigation","navigationButton","navigationDisabled","nonInteractive","currentMessageList","selectCurrentMiddleSearch","isSavedDialog","getIsSavedDialog","savedReactionTags","selectMonoforumChannel","historyCalendarSelectedAt","ForwardRecipientPicker","isManyMessages","isStory","isForwarding","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","recipientId","isSelf","toChatId","getUserFirstOrLastName","getChatTitle","messageIds","forwardMessages","getIsVideoWaiting","setIsVideoWaiting","useUnmountCleanup","EQUAL_PASSWORD_ERROR","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","hint","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsQuickReaction","selectedReaction","setDefaultReaction","isInactive","emoticon","withIcon","config","defaultReaction","useSlideSizes","windowWidth","windowHeight","useWindowSize","calculateSlideSizes","GIFTCODE_PATH","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","fromId","handleButtonClick","modalData","PremiumLogo","logo","centered","LinkField","link","TME_LINK_PREFIX","tableData","months","isFromGiveaway","clickable","TableInfoModal","buttonText","onButtonClick","chatMessage","PrivacyLockedOption","isChecked","lockIcon","EMOJI_SIZE_MULTIPLIER","EFFECT_SIZE_MULTIPLIER","MAX_EMOJIS","ENDED_DELAY","AnimatedCircleSticker","realIndex","canPlay","onEnded","mediaDataAround","isAnimated","inanimate","circleSize","angle","PI","scale","cos","sin","handleEnded","effectSticker","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","premium","notifications","notification","Notification","localId","ConfirmPayment","noRedirect","onPaymentFormSubmit","openTelegramLink","handleMessage","parse","linkUrl","path_full","allow","sandbox","FULL_PICKER_SHIFT_DELTA","LIMITED_PICKER_SHIFT_DELTA","REACTION_SELECTOR_WIDTH","ReactionPicker","shouldUseFullPicker","sendAsMessage","isForEffects","availableEffectById","toggleReaction","closeReactionPicker","sendMessage","sendStoryReaction","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","getLayout","isDense","deltaX","getIsMobile","handleToggleCustomReaction","isCustomEmoji","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojis","isFree","getStoryKey","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effect","effectStickerId","selectedReactionIds","acc","chosenOrder","menu","bubbleClassName","menuContent","onlyReactions","storyMenu","backdropExcludedSelector","isReactionPicker","onReactionSelect","onReactionContext","ReactionPickerLimited","storyPeerId","reactionPicker","chatFullInfo","isPrivateChat","areSomeReactionsAllowed","enabledReactions","maxUniqueReactions","appConfig","areAllReactionsAllowed","areCustomAllowed","currentReactions","shouldUseCurrentReactions","isForbidden","SettingsPrivacyLastSeen","shouldHideReadMarks","visibility","canShowHideReadTime","handleChangeShouldHideReadMarks","handleOpenPremiumModal","selectShouldHideReadMarks","COLORS","PremiumFeatureItem","isFontIcon","section","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","getMediaViewerItem","standaloneMedia","sponsoredMessage","selectViewableMedia","params","isSingle","photo","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","MAX_LIST_HEIGHT","FALLBACK_MAX_OPTIONS_COUNT","MAX_OPTION_LENGTH","MAX_QUESTION_LENGTH","MAX_SOLUTION_LENGTH","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","onSend","onClear","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","list","scrollHeight","behavior","handleCreate","isNoCorrectOptionError","String","correct","questionTrimmed","substring","optionsTrimmed","o","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","splice","toggle","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","TextArea","noReplaceNewlines","FOCUS_DELAY_MS","ITEM_CLASS_NAME","isSearchable","searchInputId","filterValue","notFoundText","filterPlaceholder","isViewOnly","itemClassName","withDefaultPadding","forceRenderAllItems","onFilterChange","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","handleItemClick","newSelectedValues","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","PickerItem","inputElement","Radio","onlyInput","pickerList","padded","noResults","MAX_DESCRIPTION","ADDED_PADDING","ReportModal","reportMessages","reportStory","closeReportModal","openPreviousReportModal","transitionRef","setText","handleOptionClick","subject","renderingSection","renderingDepth","sectionDepth","sections","handleCloseClick","hasSubtitle","modalTitle","titleMultiline","hasDepth","handleTextChange","slide","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","closeReportMessageModalHandler","sendMessageReportHandler","transition","onStart","sectionTitle","secondaryIcon","optionButton","optionText","block","Report","reportIcon","optionInfo","isOptional","maxLengthIndicator","VIEWPORT_MARGIN","EMOJI_BUTTON_WIDTH","CLOSE_DURATION","setItemVisible","visibleIndexes","allElements","findInViewport","first","isFullyVisible","newLeft","animateHorizontalScroll","EmojiTooltip","listEmojis","handleSelectEmoji","handleSelect","handleCustomEmojiClick","selectedIndex","useKeyboardNavigation","isHorizontal","shouldRemoveSelectionOnReset","prevSelectedIndex","CustomEmojiButton","VerificationMonetizationModal","passwordHint","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","password","currentPassword","shouldShowSubmit","errorKey","withRegular","twoFaSettings","ITEM_HEIGHT","SHIFT_HEIGHT_MINUS","BEFORE_ITEMS_COUNT","BEFORE_USER_INFO_HEIGHT","ITEMS_COUNT","ManageGroupUserPermissions","selectedChatMemberId","hasFullInfo","isFormFullyDisabled","updateChatMemberBannedRights","selectedChatMember","havePermissionChanged","useManagePermissions","bannedRights","defaultBannedRights","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","GroupPermissions","handleSavePermissions","handleBanFromGroup","viewMessages","Spinner","isPromotedByCurrentUser","OpenMapModal","closeMapModal","point","geoPoint","zoom","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","open","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","buttons","IS_MAC_OS","CARD_NUMBER_MAX_LENGTH","CardInput","cardNumberRef","useFocusAfterAnimation","cardType","setCardType","CardType","Default","newCardType","detectCardType","formatCardNumber","cardIcon","getCardIcon","Mastercard","mastercardIconPath","Visa","visaIconPath","Mir","mirIconPath","VISA","MASTERCARD1","MASTERCARD2","MIR","cards","cardNumber","test","detectCardTypeText","BoostModal","prevBoostedChat","applyBoost","closeBoostModal","requestConfetti","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","boostedChatTitle","isStatusLoaded","isBoosted","boost","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","firstBoost","myBoosts","getFirstAvailableBoost","areBoostsInDifferentChannels","every","boosts","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","right","moreBoosts","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","isChatAdmin","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","cooldownUntil","PremiumProgress","floatingBadgeText","floatingBadgeIcon","bold","replaceModal","replaceModalContent","boostedWrapper","boostedMark","arrow","isOnlyConfirm","a","CUSTOM_TITLE_MAX_LENGTH","ManageGroupAdminRights","isNewAdmin","selectedUserId","defaultRights","updateChatAdmin","setPermissions","isTouched","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","adminRights","ChatAdministrators","substr","p","handleDismissAdmin","isChatBasicGroup","memberStatus","handleCustomTitleChange","postMessages","editMessages","deleteMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","el","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","scrollLeft","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","element","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","ensureProtocol","encodeURI","u","m","s","getKeyFromEvent","altKey","ctrlKey","metaKey","linkUrlConfirmClassName","autoComplete","onScroll","VIDEO_MIN_READY_STATE","IS_SAFARI","SPACEBAR_CODE","STEALTH_MODE_NOTIFICATION_DURATION","Story","forwardSender","fromPeer","isArchivedStories","isPrivateStories","orderedIds","dimensions","shouldForcePause","storyChangelogUserId","viewersExpirePeriod","isChatExist","arePeerSettingsLoaded","getIsAnimating","stealthMode","withHeaderAnimation","onReport","paidMessagesStars","isAccountFrozen","viewStory","setStoryViewerMuted","openPreviousStory","openNextStory","loadPeerSkippedStories","openForwardMenu","copyStoryLink","toggleStoryInProfile","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","toggleStealthModal","serverTime","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","isDropdownMenuOpen","markDropdownMenuOpen","unmarkDropdownMenuOpen","videoRef","isDeletedStory","hasText","hasForwardInfo","previewBlobUrl","isVideo","noSound","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","downloadMediaData","useStoryProps","isLoadedStory","isChangelog","isUserStory","isChatStory","isChannelStory","isOut","canPinToProfile","isInProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","noForwards","canPlayStory","shouldShowComposer","shouldShowFooter","headerAnimation","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","pause","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onEnd","isUnsupported","useUnsupportedMedia","hasAllData","useBackgroundMode","load","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","readyState","currentTime","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleDeleteStoryClick","handleReportStoryClick","handleForwardClick","fromChatId","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleVolumeMuted","muted","handleOpenStealthModal","activeUntil","diff","handleDownload","download","MenuButton","inputPlaceholder","formatStarsAsIcon","asFont","slideInner","storyHeader","storyIndicators","StoryProgress","isViewed","isPaused","onImageComplete","senderInfoTransition","senderInfo","senderMeta","storyMetaRow","storyMeta","forwardHeader","headerTitle","formatRelativePastTime","isEdited","actions","privacyIcon","gradient","visibilityButton","visibilityButtonSelf","renderStoryPrivacyButton","buttonMenu","onOpen","closeButton","mediaWrapper","mediaPreview","Skeleton","fullSize","OptimizedVideo","BASE_STORY_WIDTH","BASE_STORY_HEIGHT","playsInline","isPriority","onPause","onWaiting","disableRemotePlayback","onTimeUpdate","SECONDARY_VIDEO_MIME","navigate","next","MediaAreaOverlay","contentInner","storyViewerMode","StoryFooter","captionBackdrop","captionGradient","Composer","messageListType","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","composer","onForward","onBlur","isDeleteModalOpen","userFullInfo","selectUserFullInfo","storyViewer","viewModal","isPrivacyModalOpen","isStealthModalOpen","storyList","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPremiumModalOpen","mediaAreas","forwardSenderId","area","channelId","selectPerformanceSettingsValue","selectPeerPaidMessagesStars","selectIsCurrentUserFrozen","storyIdsByPeerId","storyExpirePeriod","storyViewersExpirePeriod","stories","SavedPaymentCredentials","savedCredentials","dispatch","onNewCardClick","savedCredentialId","WebAppGridItem","isPopularApp","requestMainWebView","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","PeerBadge","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","Dialogs","dialogs","dismissDialog","dialog","contactRequest","contact","getErrorHeader","hasErrorKey","getReadableErrorText","isSlowMode","ChatCommandTooltip","botCommands","quickReplies","quickReplyMessages","self","getHtml","sendBotCommand","sendQuickReply","handleSendCommand","getMainUsername","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","keyboardNavigationItems","selectedCommandIndex","isEmpty","setTooltipItemVisible","freezeWhenClosed","ERROR_NAME_MISSING","ManageBot","currentBio","maxBioLength","setBotInfo","uploadProfilePhoto","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","setError","username","currentName","setPhoto","setName","bio","setBio","currentAvatarHash","getChatAvatarHash","currentAvatarBlobUrl","ApiMediaFormat","BlobUrl","ManagementProgress","Complete","handleNameChange","handleBioChange","handlePhotoChange","newPhoto","handleProfileSave","trimmedName","trimmedBio","file","handleChangeEditIntro","param","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","InProgress","AvatarEditable","SelectAvatar","selectBot","management","selectCurrentLimit","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","OPEN_ANIMATION_DELAY","SMOOTH_SCROLL_DISTANCE","FOCUS_MARGIN","HEADER_BUTTON_WIDTH","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","handleScroll","handleContentScroll","isAtBeginning","shouldHideTopBorder","useScrolledState","entries","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","RECENT_SYMBOL_SET_ID","exec","ensureEmojiData","selectCategory","categoryEl","animateScroll","margin","maxDistance","containerClassName","headerClassName","category","EmojiCategory","allEmojis","default","uncompressEmoji","CustomSendMenu","isOpenToBottom","canSchedule","canScheduleUntilOnline","onSendSilent","onSendSchedule","onSendWhenOnline","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","allAvailableReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","canPlayAnimatedEmojis","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","prevIsOpen","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","isPrivate","onShowMore","AITranslateContent","autoTranslate","setSettingOption","displayAutoTranslate","setDisplayAutoTranslate","handleAutoTranslateChange","telegptSettings","autotranslate","AutoTranslateLanguage","CustomEmojiTooltip","customEmoji","clearCustomEmojiForEmoji","prevStickers","displayedStickers","ce","StickerButton","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","canViewSet","forEmoji","ICON_SIZE","SettingsTwoFaEmailCode","animatedEmoji","codeLength","recoveryEmail","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","selectAnimatedEmoji","waitingEmailCodeLength","SettingsPasscode","passcode","currentScreen","shownScreen","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","PasscodeDisabled","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","PasscodeEnabled","SettingsPasscodeEnabled","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsTwoFaEnabled","Lock","previewUrl","lockPreviewUrl","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","ReceiptModal","receipt","prevReceipt","usePrevious","renderingReceipt","checkoutInfo","getCheckoutInfo","credentialsTitle","shippingMethod","Checkout","shippingPrices","totalPrice","totalAmount","tipAmount","invoice","payment","paymentMethod","shippingAddress","fullAddress","streetLine1","city","countryIso2","phone","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","ManageInvites","exportedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","invites","revokeInvite","invite","isRequestNeeded","usageLimit","isRevoked","askToRevoke","handleRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","copyTextToClipboard","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","withShare","onRevoke","usernames","withPrimaryColor","revokedInvites","NewDiscussionGroup","creationProgress","creationError","createChannel","setTitle","ChatCreationProgress","handleTitleChange","trimStart","renderedError","handleCreateGroup","discussionChannelId","isSuperGroup","chatCreation","INTERSECTION_DEBOUNCE_MS","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","noArrowNavigation","handleSendPm","startParam","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","inlineResult","MediaResult","isForGallery","StickerResult","ArticleResult","SYMBOL_MENU_TAB_ICONS","renderTabButton","handleSearchOpen","setCurrentTime","LIMIT_DESCRIPTION","dialogFiltersChats","uploadMaxFileparts","dialogFilters","dialogFolderPinned","channelsPublic","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","formatFileSize","MAX_UPLOAD_FILEPART_SIZE","getLimiterDescription","limitType","isPremium","defaultValue","premiumValue","valueFormatter","defaultValueFormatted","premiumValueFormatted","PremiumLimitReachedModal","limit","closeLimitReachedModal","canUpgrade","limitBadge","limitIcon","limitValue","limitCompare","dialogButtons","x2","limits","ManageChatRemovedUsers","canDeleteMembers","removedMembers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","kickedMembers","StoryPreview","peerStories","lastViewedId","storyIdsForViewer","lastReadId","hasUnreadStories","previewIndexId","thumbUrl","lastViewedByPeerId","lastViewedByPeerIds","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","handleUsernameChange","newUsername","isUsernameValid","success","readOnly","PRELOAD_BACKWARDS","GifSearch","isChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","requestCalendar","calendar","useSchedule","getAllowedAttachmentOptions","handleGifClick","scheduledAt","handleSearchMoreGifs","hasResults","selectCurrentGifSearch","selectIsChatWithBot","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","topic","selectTopic","getCanPostInChat","selectCanScheduleUntilOnline","PreparedMessageModal","isBackgroundBlurred","customBackground","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","withTransition","customBgImage","customBgColor","blurred","actionMessageView","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","IS_MOBILE","IS_ANDROID","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","_defineProperty","Map","this","connector","request","MAX_WORKERS","onFrame","frame","frames","set","render","clearCache","close","drawImage","destroy","ratio","worker","mediaFormat","Progressive","arrayBuffer","postMessage","PremiumStatusItem","premiumSection","DEFAULT_ID_PREFIX","TOP_REACTIONS_COUNT","RECENT_REACTIONS_COUNT","RECENT_DEFAULT_STATUS_COUNT","FADED_BUTTON_SET_IDS","FAVORITE_SYMBOL_SET_ID","POPULAR_SYMBOL_SET_ID","STICKER_SET_IDS_WITH_COVER","pickerListClassName","addedCustomEmojiIds","customEmojisById","recentCustomEmojiIds","recentStatusEmojis","collectibleStatuses","stickerSetsById","chatEmojiSetId","topReactions","recentReactions","customEmojiFeaturedIds","canAnimate","isStatusPicker","withDefaultTopicIcons","defaultTopicIconsId","defaultStatusIconsId","defaultTagReactions","isWithPaidReaction","onContextMenuOpen","onContextMenuClose","onContextMenuClick","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","activeSetIndex","observeIntersectionForSet","observeIntersectionForPlayingItems","observeIntersectionForShowingItems","observeIntersectionForCovers","selectStickerSet","useStickerPickerObservers","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","accessHash","isEmoji","topReactionsSlice","cleanRecentReactions","topReaction","cleanAvailableReactions","isPopular","allRecentReactions","defaultStatusIconsPack","uniqueByField","COLLECTIBLE_STATUS_SET_ID","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","pickerStyles","headerWithBorder","listClassName","main_customEmoji","hasHeader","pickerDisabled","stickerSet","firstSticker","stickerCover","activated","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","selectIsAlwaysHighPriorityEmoji","hasThumbnail","isRecent","isFaded","StickerSetCover","STICKER_SIZE_PICKER_HEADER","noContextMenu","shouldHideHeader","isChatEmojiSet","StickerSet","isNearActive","withDefaultTopicIcon","withDefaultStatusIcon","setsById","statusRecent","defaultTags","collectibleEmojiStatuses","statuses","added","selectCanPlayAnimatedEmojis","emojiSet","isPaidReactionAvailable","ITEMS_PER_ROW_FALLBACK","ITEMS_MOBILE_PER_ROW_FALLBACK","ITEMS_MINI_MOBILE_PER_ROW_FALLBACK","MOBILE_WIDTH_THRESHOLD_PX","MINI_MOBILE_WIDTH_THRESHOLD_PX","favoriteStickers","isChatStickerSet","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isStatusCollectible","isFavorite","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","handleDefaultTopicIconClick","mediaType","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","withPremiumGradient","pill","grey","reactionId","isHqEmoji","canvasRef","withSparkles","observeIntersectionForShowing","shouldIgnorePremium","onUnfaveClick","onFaveClick","onRemoveRecentClick","isEffectEmoji","noShowPremium","BASE_SCREEN_WIDTH","BASE_SCREEN_HEIGHT","BASE_ACTIVE_SLIDE_WIDTH","BASE_ACTIVE_SLIDE_HEIGHT","BASE_SLIDE_WIDTH","BASE_SLIDE_HEIGHT","BASE_GAP_WIDTH","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","roundToNearestEven","slideWidth","activeSlide","toActiveScale","fromActiveScale","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","DeleteMessageModal","isSchedule","canDeleteForAll","contactName","willDeleteForCurrentUserOnly","willDeleteForAll","chatBot","canBanUsers","onConfirm","closeDeleteMessageModal","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","deleteParticipantHistory","resetPermissions","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","isMonoforum","isAdmin","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","handleDeleteMessageList","isNaN","onCloseHandler","AvatarList","peers","singleTitle","actionTitle","CheckboxGroup","nestedCheckbox","restrictionContainer","restrictionContainerOpen","restrictionTitle","dropdownList","dropdownListOpen","proceedButtons","deleteMessageModal","selectCanDeleteSelectedMessages","isChatSuperGroup","getPrivateChatUserId","SettingsFoldersChatFilters","mode","onSaveFilter","maxChats","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","folder","isChatList","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","PeerPicker","itemIds","selectedIds","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedIdsChange","onSelectedCategoriesChange","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","TRANSITION_RENDER_COUNT","TRANSITION_DURATION","TWO_FA_SCREENS","TwoFaDisabled","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaCongratulations","TwoFaEnabled","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","PASSCODE_SCREENS","FOLDERS_SCREENS","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersIncludedChatsFromChatList","FoldersExcludedChats","FoldersExcludedChatsFromChatList","FoldersShare","PRIVACY_SCREENS","PrivacyBlockedUsers","ActiveWebsites","PRIVACY_PHONE_NUMBER_SCREENS","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PRIVACY_LAST_SEEN_PHONE_SCREENS","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PRIVACY_PROFILE_PHOTO_SCREENS","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PRIVACY_BIO_SCREENS","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PRIVACY_BIRTHDAY_SCREENS","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PRIVACY_GIFTS_SCREENS","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PRIVACY_PHONE_CALL_SCREENS","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PRIVACY_PHONE_P2P_SCREENS","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PRIVACY_FORWARDING_SCREENS","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PRIVACY_VOICE_MESSAGES_SCREENS","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PRIVACY_GROUP_CHATS_SCREENS","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","PRIVACY_MESSAGES_SCREENS","PrivacyNoPaidMessages","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useTwoFaReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","selector","forceReturnToChatList","isFromSettings","shareFolderScreen","isScreenActive","_isFrom","_currentKey","SettingsHeader","editedFolderId","folderId","activeScreen","privacyAllowScreens","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyVoiceMessages","PrivacyGroupChats","PrivacyMessages","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","EditProfile","SettingsEditProfile","SettingsGeneral","GeneralChatBackground","QuickReaction","SettingsCustomEmoji","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","DoNotTranslate","SettingsDoNotTranslate","SettingsStickers","Experimental","SettingsExperimental","SettingsGeneralBackgroundColor","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","isAllowList","usersOnly","withPremiumCategory","withMiniAppsCategory","SettingsFolders","SettingsTwoFa","SettingsPerformance","renderCurrentSectionContent","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","messageKey","form","CloseFriends","contactListIds","saveCloseFriends","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","handleSelectedContactIdsChange","withStatus","buttonHolder","USERNAME_HEIGHT_PX","ManageUsernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","setState","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","translation","delta","isBetween","handleDragEnd","sortableContainer","usernameData","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","REFETCH_DEBOUNCE","StoryViewModal","views","loadStoryViewList","closeStoryViewModal","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","refetchViews","useDebouncedCallback","sortedViews","prepareComparator","placeholderCount","notAllAvailable","sortButton","topButton","iconSort","iconDown","viewsList","contactFilter","check","topScrolled","centeredInfo","view","additionalKeyId","StoryView","storyView","_","PlaceholderChatInfo","bottomInfo","reactionA","reactionB","ChatLanguageModal","activeTranslationLanguage","currentLanguageCode","requestMessageTranslation","closeChatLanguageModal","requestChatTranslation","langCode","toLanguageCode","translationLanguage","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","toLowerCase","languages","listItem","chatLanguageModal","selectLanguageCode","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","INITIAL_STATE","streetLine2","postCode","email","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","usePaymentReducer","useReducer","StatisticsRecentMessage","toggleMessageStatistics","useThumbnail","mediaHash","useMessageMediaHash","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","getMessageVideo","PaidMessagePrice","starsUsdWithdrawRate","starsPaidMessageAmountMax","starsPaidMessageCommissionPermille","canChangeChargeForMessages","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","PaidMessageSlider","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","formatCurrencyAsString","starsUsdWithdrawRateX1000","configStarsPaidMessageCommissionPermille","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","GiveawayUserPickerModal","initialSelectedIds","onSelectedIdsConfirmed","setSelectedIds","adminIdsSet","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","giveawayChatId","NewContactModal","isByPhoneNumber","userStatus","phoneCodeList","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","setFirstName","setLastName","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","selectUserStatus","phoneCodes","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","shouldConfirm","SettingsTwoFaCongratulations","GROUP_TITLE_EMPTY","GROUP_MAX_DESCRIPTION","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","ManageGroup","isBasicGroup","hasLinkedChannel","canChangeInfo","canInvite","canEditForum","isChannelsPremiumLimitReached","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","closeManagement","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isProfileFieldsTouched","setIsProfileFieldsTouched","setAbout","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickEditType","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","adminsCount","handleDeleteGroup","selectIsChatRestricted","isForForum","formatInteger","joinRequests","membersCount","limitReachedModal","Shipping","shippingOptions","handleShippingSelect","formatCurrency","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","Statistics","messagesById","storiesById","loadStatistics","graphs","graphTitles","isPercentage","recentPosts","messagesTitle","selectStatistics","selectChatMessages","selectPeerStories","CreateTopic","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","heading","iconWrapper","TopicIcon","noLoopLimit","bottom","iconPicker","openShareChatFolderModal","editChatFolder","addChatFolder","isCreating","saveState","newState","ERROR_NO_TITLE","includedChatTypes","folderUpdate","ERROR_NO_CHATS","handleSaveFolder","handleSaveFilter","handleCreateFolder","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","onCreateFolder","onEditFolder","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","SettingsShareChatlist","_gif","PinMessageModal","canPinForAll","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isChatWithSelf","customEmojiSetIds","shouldSuggestCustomEmoji","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","StickerSetCard","NBSP","MAIN_BUTTON_ANIMATION_TIME","ANIMATION_WAIT","COLLAPSING_WAIT","POPUP_SEQUENTIAL_LIMIT","POPUP_RESET_DELAY","APP_NAME_DISPLAY_DURATION","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","isPaymentModalOpen","paymentStatus","botAppPermissions","botAppSettings","sendWebViewData","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","headerButtonRef","headerButtonCaptionRef","isFullscreen","exitFullScreenCallback","fullscreenElementRef","setFullscreen","exitFullscreen","useFullscreen","activeWebAppName","placeholderPath","isCloseModalOpen","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerDarkColor","frameRef","isSimple","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","shouldIgnoreCache","force_request","is_visible","validateHexColor","color_key","textColor","text_color","isVisible","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","req_id","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","fileName","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","useSyncEffect","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","headerPanel","backIconContainer","buttonCaptionContainer","headerSplitButton","moreIcon","loadingPlaceholder","hide","defaultPlaceholderGrid","placeholderSquare","renderDefaultPlaceholder","withButton","allowFullScreen","buttonsContainer","leftToRight","rightToLeft","topToBottom","bottomToTop","hideHorizontal","oneRow","twoRows","visible","mainButtonSpinner","webAppPopup","withoutTitle","filename","botInfo","appSettings","regularPaymentStatus","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","selectBotAppPermissions","ChatlistNew","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","joinedIds","isNotJoined","selectedCount","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","lockedSelectedIds","Badge","buttonBadge","isAlternateColor","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","setPrivacySettings","customPeerBots","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","allowUserIds","allowChatIds","blockUserIds","blockChatIds","selectedCategoryTypes","shouldAllowPremium","botsPrivacy","newSelectedCategoryTypes","setNewSelectedCategoryTypes","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","privacyKey","getPrivacyKey","updatedIds","isPremiumAllowed","getCurrentPrivacySettings","privacy","lastSeen","profilePhoto","birthday","gifts","phoneCall","phoneP2P","forwards","voiceMessages","chatInvite","noPaidMessages","chatsByIds","usersByIds","unblockUser","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","CHAT_LIST_SLIDE","TOPIC_LIST_SLIDE","TOPIC_ICON_SIZE","TOPIC_ITEM_HEIGHT_PX","loadTopics","topicContainerRef","searchRef","topicSearchRef","forumId","setForumId","topicSearch","setTopicSearch","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatFullInfoById","fullInfoById","searchTitle","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","handleTopicKeyDown","renderChatItem","monoforumChannel","isApiPeerChat","subtitleClassName","getGroupStatus","isUserOnline","getSubtitle","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","withAbsolutePositioning","maxHeight","letterClassName","StealthModeModal","activateStealthMode","isOnCooldown","setIsOnCooldown","handleTimerEnds","handleActivate","stealthIcon","isShiny","TextTimer","langKey","endsAt","OFFSET_BOTTOM","MOBILE_OFFSET","MOBILE_WIDTH","animateOpening","thumb","bestImageData","mediaEl","fromImage","getNodes","toWidth","toHeight","safeAreaBottom","getComputedStyle","getPropertyValue","parseFloat","toLeft","toTop","fromTop","fromLeft","fromWidth","fromHeight","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","appendChild","contains","removeChild","ANIMATION_END_DELAY","animateClosing","toImage","mobileSlide","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","opacity","RADIUS","ITERATIONS","source","hasBlur","isGhost2","img","Image","oncontextmenu","ghostImage","onload","alpha","IS_CANVAS_FILTER_SUPPORTED","fastBlur","containerSelector","mediaSelector","getPeerStoryHtmlId","StoryRibbon","storyRibbonStyles","MiddleHeaderAvatar","mediaEls","StoryViewer","shouldSkipHistoryAnimations","withAnimation","closeStoryViewer","closeStoryPrivacyEditor","storyToDelete","setStoryToDelete","openDeleteModal","closeDeleteModal","slideSizes","isPrevOpen","prevBestImageData","prevPeerId","prevOrigin","isGhostAnimation","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","handleOpenDeleteModal","handleCloseDeleteModal","openMessageReport","beginHeavyAnimation","shouldAnimateFirstRender","noCloseTransition","backdrop","StorySlides","StoryDeleteConfirmModal","StorySettings","selectIsStoryViewerOpen","THRESHOLD","threshold","setIsAtBeginning","isAtEnd","setIsAtEnd","clientHeight","editorRef","injectComponent","component","AIKnowledgeEditor","props","floatingBadge","floatingBadgeValue","floatingBadgeTriangle","line","ChatlistAlready","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","pluralValue","noCustomEmojiPlayback","noTitleAnimations","PureMultimodalInput","textareaRef","adjustHeight","localStorageInput","setLocalStorageInput","useLocalStorage","setInputValue","domValue","submitForm","AITextarea","cx","rows","autoFocus","shiftKey","toast","StopButton","SendButton","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","InviteFriendsModal","closeInviteFriendsModal","inviteInfo","setInviteInfo","setLoading","getAllInviteInfo","catch","HeaderBg","LinkIcon","myInvitation","inviteCode","UserGroupIcon","table","colSpan","myInviteCodes","invitedUserName","points","invitedAt","toLocaleString","ATTACHMENT_MODAL_INPUT_ID","DROP_LEAVE_TIMEOUT_MS","MAX_LEFT_CHARS_TO_SHOW","CLOSE_MENU_ANIMATION_DURATION","AttachmentModal","attachments","editingMessage","canShowCustomSendMenu","captionLimit","groupChatMembers","baseEmojiKeywords","emojiKeywords","isForMessage","customEmojiForEmoji","attachmentSettings","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onSendScheduled","svgRef","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","isInAlbum","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","quick","audio","hasSpoiler","isEverySpoiler","shouldSendAsSpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","attachment","svg","baseVal","leftChars","useDerivedState","leftCharsBeforeLimit","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","sendButtonStar","renderHeader","hovered","headerBorder","symbolMenuOpen","dropTarget","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","matches","dropOutlineContainer","dropOutline","rx","attachmentsBottomPadding","AttachmentModalItem","shouldDisplayCompressed","shouldDisplayGrouped","uniqueId","onToggleSpoiler","captionWrapper","captionTopBorder","MentionTooltip","filteredUsers","onInsertUserName","SymbolMenuButton","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","sendWrapper","send","language","BASE_EMOJI_KEYWORD_LANG","keywords","withSharedAnimation","shouldPreloadPreview","recentStickers","effectStickers","effectEmojis","addedSetIds","chatStickerSetId","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","onMouseMove","favorite","selectShouldLoopStickers","hasFooter","availableWidth","availableHeight","getMediaViewerAvailableDimensions","calculateDimensions","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","getTopOffset","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","applyShape","objectFit","clearShape","targetTop","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","imageEl","messageListElement","getOffsetToContainer","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transformOrigin","HTMLVideoElement","poster","ProfileAvatar","SettingsAvatar","profileInfo","cloneNode","getMessageHtmlId","PreviewMedia","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","getLangKeyForBannedRightKey","ManageGroupPermissions","removedUsersCount","arePaidMessagesAvailable","canChargeForMessages","groupPeersPaidStars","updateChatDefaultBannedRights","updatePaidMessagesPrice","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","setChargeForMessages","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","DEFAULT_CHARGE_FOR_MESSAGES","RESIZE_THROTTLE_MS","MediaViewerFooter","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","footerContent","checkIsMultiline","classNames","isRectangular","refs","ManageGroupMembers","noAdmins","canAddMembers","globalUserIds","isSearching","areParticipantsHidden","canHideParticipants","toggleParticipantsHidden","setNewChatMembersDialogState","toggleManagement","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","canBeInvitedToGroup","handleMemberClick","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","withPortalForMenu","DeleteMemberModal","hiddenMembersMinCount","isUserRightBanned","primaryPrivacy","secondaryPrivacy","hasCurrentUserFullInfo","currentUserFallbackPhoto","isPremiumRequired","shouldDisplayGiftsButton","handleShowGiftIconInChats","secondaryScreen","PrivacyAddByPhone","gift","PrivacySubsection","SettingsPrivacyPublicProfilePhoto","setPrivacyVisibility","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","conjunction","allowedString","blockString","handleVisibilityChange","allowedContactsScreen","deniedContactsScreen","currentUserFullInfo","addByPhone","useSignalRef","getValue","subscribe","openMediaViewer","handleSelectMedia","isMediaGrid","isMessageList","foundTopicIds","searchChatId","openThread","handleTopicClick","LeftSearchResultTopic","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","onTransitionEnd","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","avatars","renderStatusText","CLOSE_ANIMATION_DURATION","SeenByModal","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","seenByModal","device","STICKER_SIZE_INLINE_BOT_RESULT","activeTabBot","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleExpandClick","activeTabName","renderTitle","webApps","selectActiveWebApp","SCROLL_MARGIN","ACTIVE_SLIDE_VERTICAL_CORRECTION_REM","SWIPE_Y_THRESHOLD","SCROLL_RELEASE_DELAY","SwipeDirection","currentPeerId","currentStoryId","isSinglePeer","isArchive","byPeerId","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","swipeDirectionRef","isReleasedRef","rendersRef","setIsAnimating","setRef","shouldBeReplaced","renderingPeerIds","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","offsetY","getCurrentStoryRef","disableScrolling","enableScrolling","isNotPassive","withNativeDrag","withWheelDrag","excludedClosestSelector","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","slideAnimation","slideAnimationToActive","slideAnimationFromActive","handleTransitionEnd","wrapper","backdropNonInteractive","renderStory","slidePreview","renderStoryPreview","orderedPeerIds","DAYS_PER_MONTH","hasPassword","hasPasscode","blockedCount","webAuthCount","isSensitiveEnabled","canChangeSensitive","canDisplayAutoarchiveSetting","shouldArchiveAndMuteNewNonContact","shouldNewNonContactPeersRequirePremium","shouldChargeForMessages","canDisplayChatInTitle","canSetPasscode","needAgeVideoVerification","isCurrentUserFrozen","accountDaysTtl","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","setSharedSettingOption","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","ACCOUNT_TTL_OPTIONS","getVisibilityValue","isVisibilityEverybody","shouldShowBotsString","blockCount","allowCount","total","exceptionString","allowDisabledClick","rightElement","nonContactPeersPaidStars","selectCanSetPasscode","FrozenAccountModal","freezeUntilDate","freezeAppealUrl","botFreezeAppealUsername","closeFrozenAccountModal","handleAppeal","BannedDuck","buttonAppeal","botLink","isPrimary","formatUsername","listItemData","formatDateToString","TableAboutModal","hasBackdrop","botFreezeAppeal","botFreezeAppealId","ErrorTip","knowledgeId","richText","questionError","setQuestionError","valueError","setValueError","handleSave","n","Node","string","knowledgeIdValue","addKnowledge","DSlate","toolbar","Input","MAX_CACHE_SIZE","cache","useBlurSync","blurredRef","isChanged","imgToCanvas","toDataURL","blurredAsync","delay","timeoutRef","blurredDataUri","useBlur","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","searchFlood","shouldShowSearchLauncher","isNothingFound","PublicPostsSearchLauncher","onSearch","publicPostsResult","publicPosts","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","ChatlistInviteModal","renderingInfo","renderingFolder","removal","renderingFolderTitle","folderTabNumber","ChatlistDelete","suggestedPeerIds","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","selectChatFolder","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","selectedMemberIds","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","avatarList","contentText","Separator","userPicker","lockedUnselectedIds","lockedUnselectedSubtitle","sendInvites","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","getFirstLetters","preventMessageInputBlurWithBubbling","BotCommandMenu","botCommand","TOP_ICON_SIZE","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","collectible","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","viewportY1","viewportY2","y1","y2","canTranslate","canTranslateChats","doNotTranslate","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","renderValue","renderContentSizeSlider","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","shouldSelectOnTab","shouldSaveSelectionOnUpdateItems","prevChatMembers","renderedChatMembers","SuggestedPostApprovalModal","commissionPermille","tonCommissionPermille","minAge","futureMin","futureMax","scheduleDate","closeSuggestedPostApprovalModal","approveSuggestedPost","isCalendarOpened","openCalendar","closeCalendar","minAt","maxAt","defaultSelectedTime","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","getPeerFullTitle","price","suggestedPostInfo","STARS_CURRENCY_CODE","questionText","commission","amountWithCommission","formattedAmount","formatTonAsText","convertTonFromNanos","formatStarsAsText","ageMinSeconds","formatScheduledDateTime","details","CalendarModal","isFutureMode","withTimePicker","onDateChange","submitButtonLabel","secondButtonLabel","onSecondButtonClick","selectIsMonoforumAdmin","starsSuggestedPostCommissionPermille","STARS_SUGGESTED_POST_COMMISSION_PERMILLE","tonSuggestedPostCommissionPermille","TON_SUGGESTED_POST_COMMISSION_PERMILLE","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","starsSuggestedPostFutureMax","STARS_SUGGESTED_POST_FUTURE_MAX","PLAYBACK_RATES","HIDE_CONTROLS_TIMEOUT_MS","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isBuffered","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","handleSeek","handleSeekStart","volumeIcon","renderTime","rate","MOBILE_VERSION_CONTROL_WIDTH","PLAYBACK_SAVE_INTERVAL","MediaViewerContent","viewableMedia","textMessage","isMoving","timestamp","maxTimestamp","onFooterClick","updateLastPlaybackTimestamp","isAvatar","isSponsoredMessage","isPhoto","bestData","isLocal","isVideoAvatar","mediaSize","loadProgress","useMediaProps","toggleControls","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","newTimestamp","useSignalEffect","VideoPlayer","posterData","calculateMediaViewerDimensions","isMediaViewerOpen","ARE_WEBCODECS_SUPPORTED","shouldCloseOnClick","isClickDisabled","renderPhoto","renderMessageText","isForMediaViewer","shouldForceMobileVersion","mediaViewer","selectMessageTimestampableDuration","selectIsMessageProtected","imageSize","canDrag","wrapperStyle","videoStyle","Management","managementType","Initial","ManageUser","GroupRecentActions","ManageChannel","ChannelSubscribers","ChannelRemovedUsers","ManageChatPrivacyType","ManageDiscussion","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","selectCurrentManagementType","GiveawayTypeOption","isLink","onClickAction","userNames","displayText","optionImg","giveaway","AITranslate","AITranslateHeader","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","isSelectionOutOfRange","onEsc","onUp","onDown","onTab","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","isPhotoAvatar","isDocument","isRound","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","previewMediaHash","fullMediaBlobUrl","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","getMediaThumbUri","getMediaFileSize","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","twoFaReducer","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","AllowDenyList","lockedIds","SuggestMessageModal","starBalance","currentDraft","maxStarsAmount","minStarsAmount","tonMaxAmount","tonMinAmount","isMonoforumAdmin","closeSuggestMessageModal","updateDraftSuggestedPostInfo","currentSuggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","setScheduleDate","isCurrencyStars","handleAmountChange","number","currentMaxAmount","handleExpireDateChange","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","currencySelector","currencyButton","noFastClick","currencyIcon","timeInputIcon","offerButton","formatTonAsIcon","selectDraft","starsSuggestedPostAmountMax","STARS_SUGGESTED_POST_AMOUNT_MAX","starsSuggestedPostAmountMin","STARS_SUGGESTED_POST_AMOUNT_MIN","tonSuggestedPostAmountMax","TON_SUGGESTED_POST_AMOUNT_MAX","tonSuggestedPostAmountMin","TON_SUGGESTED_POST_AMOUNT_MIN","DEFAULT_REACTION_SIZE","deleteContact","updateStoryView","areStoriesBlocked","isUserBlocked","isContact","isOnlyStories","shouldColorStatus","isModified","opacityFadeIn","viewReaction","withIconHeart","menuBubbleClassName","menuBubble","withColoredStatus","webThumbnail","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","handlePeerRecipient","AboutMonetizationModal","blockchainText","SafeLink","monetizationTitle","specialReplacement","toncoin","headerIconName","withSeparator","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","IS_SNAP_EFFECT_SUPPORTED","selectPerformanceSettings","GiveawayChannelPickerModal","pendingChannelId","setPendingChannelId","channelIds","archived","listIds","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","confirmPrivateLinkChannelSelection","PaymentInfo","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","bottomText","chatMembers","loadMoreMembers","usersId","availableMemberIds","EMOJIS_PER_ROW_ON_DESKTOP","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","emojisPerRow","displayedEmoji","STICKER_SIZE_PASSCODE","metaWithIcon","metaIcon","forwardsCount","CLICK_TIMEOUT","useMultiClick","currentAmountRef","openStoryViewModal","sentReaction","isSentStoryReactionHeart","HEART_REACTION","canForward","recentViewers","recentViewerIds","handleOpenStoryViewModal","handleLikeStory","viewInfo","interactive","viewIcon","reactionCount","reactionCountHeart","spacer","footerItem","reactionButton","ReactionAnimatedEmoji","withEffectOnly","reactionHeart","hasMessageText","previewHash","fullMediaHash","downloadHash","linkedChat","forDiscussionIds","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","MAX_LOOP_DURATION","MIN_READY_STATE","REWIND_STEP","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","setIsPlaying","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","isInPictureInPicture","lockControls","lastMousePosition","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","shouldRenderSpinner","spinnerClassNames","shouldRenderPlayButton","playButtonClassNames","togglePlayState","useVideoCleanup","handleTimeUpdate","handleFullscreenChange","newVolume","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","isFinite","shouldToggleControls","onDoubleClick","autoPlay","controlsList","loop","ProgressSpinner","MAX_SAFE_DATE","MIN_SAFE_DATE","WEEKDAY_LETTERS","isPastMode","minDate","maxDate","passedSelectedDate","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","formatInputTime","getHours","selectedMinutes","setSelectedMinutes","getMinutes","selectedDay","formatDay","getDate","currentYear","currentMonth","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","buildCalendarGrid","formatSubmitLabel","handleChangeHours","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","dateCopy","setMonth","day","gridDate","handleDateSelect","setDate","setFullYear","isDisabledDay","year","month","firstDay","getDay","totalDaysInPrevMonth","lastRowDaysCount","fixedMinDate","getDayStart","fixedMaxDate","padStart","CreditsModal","credits","closeCreditsModal","pointsHistory","sourceDescription","FOLDER_HEIGHT_PX","runThrottledForLoadRecommended","folderIds","foldersById","recommendedChatFolders","maxFolders","loadRecommendedChatFolders","openDeleteChatFolderModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","PRESET_FOLDER_ID","UNREAD_FOLDER_ID","AI_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","STICKER_SIZE_FOLDER_SETTINGS","FoldersAll","isBlocked","isStatic","allowSelection","recommended","chatFolders","aiChatFolders","filterAIFolder","BOT_BUTTONS","help","HeaderMenuContainer","withExtraActions","botPrivacyPolicyUrl","withForumActions","isTopic","isForumAsMessages","isChatInfoShown","canStartBot","canSubscribe","canReportChat","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canDeleteChat","canGift","canAddContact","canCreateTopic","canEditTopic","canManage","isRightColumnShown","isBot","savedDialog","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","isMuteModalOpen","setIsMuteModalOpen","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","isViewGroupInfoShown","areAllGiftsDisallowed","closeMuteModal","handleReport","closeMenu","handleViewGroupInfo","handleStartBot","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isRestricted","getCanAddContact","isMainThread","currentChatId","currentThreadId","selectCanGift","getCanManageTopic","selectCanManage","selectCanTranslateChat","isTranslationDisabled","getIsChatMuted","selectNotifyDefaults","selectNotifyException","getCanDeleteChat","commands","privacyPolicyUrl","selectIsRightColumnShown","DeleteAccountModal","selfDestructAccountDays","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","DEFAULT_CUSTOM_EXPIRE_DATE","MAX_ADDITIONAL_CHANNELS","DEFAULT_BOOST_COUNT","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","GiveawayModal","selectedMemberList","selectedChannelList","giveawayBoostPerPremiumLimit","GIVEAWAY_BOOST_PER_PREMIUM","prepaidGiveaway","countrySelectionLimit","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","userSelectionLimit","GIVEAWAY_MAX_ADDITIONAL_USERS","isStarsGiftEnabled","starsGiftOptions","closeGiveawayModal","openInvoice","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","isHeaderHidden","setHeaderHidden","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","selectedChannelIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","filteredGifts","fullMonthlyAmount","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","giveawayTitle","filteredChannelIds","deleteParticipantsHandler","removeChannel","addButton","addChannel","subLabelClassName","subscription","checkboxSection","prizesSection","prizesInput","subscriptionFooter","dateButton","hiddenHeader","premiumHeaderText","prepaidImg","floatingBadgeColor","types","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","starOptions","selectedStarCount","starSubscription","PremiumSubscriptionOption","isGiveaway","premiumFeatures","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","giveawayModal","giveawayBoostsPerPremium","giveawayAddPeersMax","giveawayCountriesMax","general","openChatByUsername","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","withStars","handleSnap","animateSnap","IS_WAVE_TRANSFORM_SUPPORTED","IS_ELECTRON","ERROR_FIRST_NAME_MISSING","notPersonalPhoto","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","currentFirstName","currentLastName","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","trimmedFirstName","trimmedLastName","handleDeleteContact","handleSuggestPhoto","click","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","AnimatedIcon","Congratulations","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","isBroadcast","participantIds","participantsCount","handleAccept","acceptLangKey","requestToJoinLangKey","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","ContactList","openNewContactDialog","deleteStory","DEFAULT_DURATION","animationDuration","AgeVerificationModal","verifyAgeBotUsername","verifyAgeMin","closeAgeVerificationModal","handleVerifyAge","shouldStartMainApp","mainText","VERIFY_AGE_MIN_DEFAULT","WAIT_DELAY","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","AboutAdsModal","minLevelToRestrictAds","closeAboutAdsModal","moreMenuRef","isMonetizationSharing","renderingIsNewDesign","regularAdContent","secondary","shouldSkipAbout","onItemClick","channelRestrictAdsLevelMin","PremiumFeaturePreviewVideo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","reverse","down","DeviceFrame","OPTIONS","Screens","editStoryPrivacy","isOpenModal","setPrivacy","isPinned","setIsPinned","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","selectedBlockedIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","storyLifeTime","newVisibility","optionContent","option_name","closeFriends","denyList","handleActionClick","actionInner","submit","renderPrivacyList","renderHeaderContent","handleAnimationEnd","animationName","onAnimationEnd","loadFullUser","deleteProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","canLimitNewMessagesWithoutPremium","noPaidReactionsForUsersCount","canChangeForContactsAndPremium","hasShownNotification","setHasShownNotification","prevSelectedValue","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","itemSubtitle","renderSectionNoPaidMessagesForUsers","selectNonContactPeersPaidStars","selectNewNoncontactPeersRequirePremium","starsPaidMessagesAvailable","getZoomChange","setZoomChange","useZoomChange","thumbnailBlobUrl","getPhotoMediaHash","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","pinnedChatIds","unlockedIds","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","MediaViewerActions","canReportAvatar","canDelete","canUpdate","onReportAvatar","onCloseMediaViewer","onBeforeDelete","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openDeleteMessageModal","isMessage","getMediaFilename","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","avatarPhoto","isAvatarView","forceOnHeavyAnimation","renderDeleteModal","DeleteProfilePhotoModal","profileId","openDeleteModalHandler","menuItems","isForwardingAllowed","noCross","renderDownloadButton","canUpdateMedia","selectActiveDownloads","selectIsChatProtected","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","selectorOrElements","shouldContainBottom","isFound","ReportAvatarModal","reportProfilePhoto","selectedReason","setSelectedReason","setDescription","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","formatFullDate","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","canChangeFolder","openMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","hasMainMiniApp","ChatFolderModal","selectIsChatPinned","DEFAULT_PROVIDER","DONATE_PROVIDER","DONATE_PROVIDER_URL","SUPPORTED_PROVIDERS","NETWORK_REQUEST_TIMEOUT_S","PaymentModal","step","isProviderError","nativeProvider","confirmPaymentUrl","hasShippingOptions","smartGlocalToken","stripeId","passwordValidUntil","isExtendedMedia","isPaymentFormUrl","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","PaymentStep","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getTotalPrice","prices","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","getCredentials","ShippingInfo","SavedPayments","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","termsUrl","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","getShippingPrices","needAddress","onAcceptTos","isPasswordMissing","needEmail","isEmailSentToProvider","needPhone","isPhoneSentToProvider","needName","renderModalContent","descriptionKey","renderError","stripeCredentials","smartGlocalCredentials","temporaryPassword","nativeParams","providerName","validUntil","findShippingOption","optionId","shippingOption","cur","paymentProvider","cardTypeText","expiryMonth","expiryYear","zip","contentForStatusMenuContext","arg","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","hasEffect","shouldLoad","shouldPlay","isIntesectingForShowing","shouldRenderContextMenu","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","shouldShowCloseButton","contextMenuItems","Sparkles","preset","StickerView","isSmall","shouldLoop","noLoad","noVideoOnMobile","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","setGlobalSearchQuery","newChatMemberIds","setNewChatMemberIds","handleNextStep","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","NewChatStep1","onSelectedMemberIdsChange","onNextStep","NewChatStep2","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","offsetX","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","MAX_MEMBERS_FOR_GENERATE_CHAT_NAME","maxGroupSize","createGroupChat","chatTitleEmptyError","channelTitleEmptyError","memberFirstNames","generatedChatName","handleCreateChannel","fullReset","editUsernameError","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","editableUsername","setEditableUsername","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","profileEdit","leaveChatlist","perMonth","isUserCountPlural","discount","giveawayWrapper","giveawayDiscount","privateChatUser","getMessageSticker","isSpoiler","getMessageIsSpoiler","privateChatUserId","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","stickersFaved","aboutLength","captionLength","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","BORDER_THRESHOLD","PremiumFeatureModal","promo","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","perMonthPrice","handleLimitsScroll","scrollContainer","handleSelectSlide","currentSection","hasHeaderBackdrop","backButton","whiteBackButton","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toggleExtraClass","noHeaderBorder","limitsContent","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","noFooterBorder","SliderDots","onSelectSlide","BLUR_CANVAS_SIZE","displayType","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","actionItem","deleteFile","shouldSkipGrouping","shouldDisplaySpoiler","shouldRenderOverlay","rootClassName","single","noGrouping","MediaSpoiler","overlay","PrivacySettingsNoticeModal","isReadDate","closePrivacySettingsNoticeModal","loadUser","handleShowReadTime","handleShowLastSeen","handleOpenPremium","ReadTime","LastSeen","desc","privacySettingsNoticeModal","CHANNEL_TITLE_EMPTY","CHANNEL_MAX_DESCRIPTION","hasAutoTranslation","canToggleAutoTranslation","toggleAutoTranslation","hasAutoTranslationAvailable","handleAutoTranslationChange","handleUpdateChannel","handleClickSubscribers","handleDeleteChannel","isChannelPublic","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","chatBoostLevel","level","SUBMIT_TIMEOUT","INITIAL_CHATS_LIMIT","isRemoved","loadedActiveChatIds","loadedArchivedChatIds","maxInviteLinks","maxChatLists","chatListCount","loadChatlistInvites","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","typeKey","renderChatType","FoldersNew","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","INITIAL_LIMIT","VIEW_MORE_LIMIT","voters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","leftVotersCount","ShowMoreButton","itemName","renderViewMoreButton","toFixed","offsets","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","editingInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","easeOutCubic","easeOutQuart","timingFunctions","SWIPE_X_THRESHOLD","SLIDES_GAP","DEBOUNCE_SELECT_MEDIA","DEBOUNCE_SWIPE","DEBOUNCE_ACTIVE","DOUBLE_TAP_ZOOM","CLICK_Y_THRESHOLD","HEADER_HEIGHT","MAX_ZOOM","MIN_ZOOM","cancelZoomAnimation","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","initialContentRectRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","selectItemDebounced","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","setLastGestureTime","changeSlide","cActiveItem","nextItem","timing","changeSlideOnClick","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","minOffsetY","maxOffsetY","absX","absY","s1","scaleFactor","x1","Vx","Vy","dirX","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","cancelDrag","Horizontal","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","wheelEvent","WheelEvent","deltaY","dispatchEvent","prevItem","hasPrev","hasNext","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","arrowHidden","isLast","isPreLast","isFirst","isPreFirst","isInvisible","dot","medium","small","invisible","messageTextSize","messageSendKeyCombo","timeFormat","shouldUseSystemTheme","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","IS_WINDOWS","HIDE_ANIMATION_DURATION","PLAYING_DURATION","EFFECT_SIZE","EmojiInteractionAnimation","effectAnimationId","activeEmojiInteraction","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","animatedEffect","selectAnimatedEmojiEffect","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","CIRCLE_SEGMENTS","CIRCLE_READ_SEGMENTS","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","features","scrolled","foundContactIds","SafeLinkModal","toggleSafeLinkModal","handleOpen","handleDismiss","renderingUrl","deleteChatPhoto","handleDeletePhoto","SEARCH_CLOSE_TIMEOUT_MS","topUserIds","recentlyFoundChatIds","loadTopUsers","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","topPeers","StickerTooltip","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","defaultPermissions","setHavePermissionChanged","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","v","assign","sendMessages","AVATAR_LOAD_TRIGGER","MediaViewer","collectedMessageIds","chatMessages","withDynamicLoading","currentItem","searchChatMediaMessages","animationKey","prevSenderId","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","useElectronDrag","prevMessage","prevIsHidden","shouldAnimateOpening","handleFooterClick","HTMLElement","isFromMedia","isMedia","handleForward","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","avatarOwnerId","selectPeerPhotos","selectScheduledMessage","selectSponsoredMessage","selectChatScheduledMessages","isOriginInline","isOriginAlbum","selectCurrentChatMediaSearch","currentSegment","selectCurrentSharedMediaSearch","selectOutlyingListByMessageId","selectListedIds","recentBotIds","searchPopularBotApps","shouldShowMoreMine","setShouldShowMoreMine","filteredFoundIds","recentSet","withoutRecent","handleToggleShowMoreMine","popularBotApps","botApps","topBotApps","STICKER_SET_CARD_HEIGHT","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","RESET_ICON_ID","EditTopic","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","isInteractive","suggestedTipAmounts","maxTipAmount","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","handleShippingAddressClick","handleShippingMethodClick","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","selectManagement","inviteLink","MessageSelectToolbar","canPost","selectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","hasProtectedMessage","isAnyModalOpen","selectedMessageIds","hasSvgs","openForwardMenuForSelectedMessages","downloadSelectedMessages","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","onBackspace","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessages","selectHasProtectedMessage","selectCanForwardMessages","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","requestedAttachBotInstall","selectSelectedMessagesCount","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","InviteCodeModal","closeInviteCodeModal","setInviteCode","isSubmitting","setIsSubmitting","submitInviteCode","submitButton","INTERVAL","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","prevIndex","renderPickerItem","chatItem","isBotAccessEmojiGranted","LIMIT_ACCOUNTS","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","PremiumMainModal","fromUser","fromUserStatusEmoji","fromUserStatusSet","limitChannels","limitLinks","limitFolders","limitPins","premiumSlug","premiumBotUsername","isSuccess","isGift","toUser","monthsAmount","closePremiumModal","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","giftParticlesHeader","statusEmoji","stickerSetText","starParticlesHeader","subscriptionOptions","noButton","footerText","primaryFooterText","statusText","statusEntities","renderFooterText","template","second","thumbCustomEmojiId","stickerSetLinkIcon","stickerSetLink","perUserTotal","fromUserId","toUserId","selectPremiumLimit","premiumInvoiceSlug","STICKER_INTERSECTION_THROTTLE","STICKER_INTERSECTION_MARGIN","SCROLL_MAX_DISTANCE_WHEN_CLOSE","SCROLL_MAX_DISTANCE_WHEN_FAR","stickerSetIntersectionsRef","setActiveSetIndex","freeze","freezeForSet","unfreeze","unfreezeForSet","stickerSetIntersections","freezeForShowingItems","unfreezeForShowingItems","stickerSetEl","isClose","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","closeBtn","autoTranslateLanguage","autotranslatelanguage","DEFAULT_POINTS","mainClassName","getProgress","pointIndex","findIndex","prevPoint","nextPoint","pointValue","activeListIds","archivedListIds","pinnedIds","API_CHAT_TYPES","priorityIds","hasAdminRights","sorted","filterChatIdsByType","renderingIds","orderedPinnedIds","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","ToDoListModal","maxItemsCount","TODO_ITEMS_LIMIT","maxTitleLength","TODO_TITLE_LENGTH_LIMIT","maxItemLength","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","todoItemsMax","todoTitleLengthMax","todoItemLengthMax","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleContextDelete","preload","reactionsLimit","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","MAX_UNIQUE_REACTIONS","StickerSetModal","fromSticker","stickerSetShortName","shouldUpdateStickerSetOrder","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","sendOptions","selectShouldSchedule","renderingBot","REACTION_SIZE","GRID_GAP_THRESHOLD","MODAL_PADDING_SIZE_REM","MODAL_MAX_HEIGHT_REM","MODAL_MAX_WIDTH_REM","GRID_GAP_DESKTOP_REM","GRID_GAP_MOBILE_REM","isTouchScreen","reactionsToSort","sortReactions","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","modalContent","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","POPULAR_APPS_SLICE","LESS_GRID_ITEMS_AMOUNT","handleSearchInputReset","showMoreLink","sectionContent","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","customEmojiSet","setCard","StoryStatistics","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","currentStory","DeleteFolderDialog","closeDeleteChatFolderModal","deleteChatFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","isConfirmedForChatlist","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","useCustomEmoji","colorFilter","useColorFilter","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","StatusPickerMenu","statusButtonRef","areFeaturedStickersLoaded","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","PREMIUM_STICKERS_TO_DISPLAY","STICKERS_TO_DISPLAY","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","FULLSCREEN_BUTTONS_AREA_HEIGHT","isSimpleView","onEvent","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","skipClosingConfirmation","scrollbarColor","reload_supported","custom_emoji_id","BigInt","passed","ageFromParam","age","plannedEvents","shouldSuggestStickers","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","cacheKeyRef","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","injectMessageAI","injected","unmount","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","handleLoginChecked"],"sourceRoot":""}