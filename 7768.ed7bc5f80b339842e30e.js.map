{"version":3,"file":"7768.ed7bc5f80b339842e30e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://telegram-t/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-action-button.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/chatAssistant/multi-input.tsx","webpack://telegram-t/./src/components/chatAssistant/component/textarea.tsx","webpack://telegram-t/./src/components/chatAssistant/component/InputText.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/prompt.ts","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-prompt.ts","webpack://telegram-t/./src/components/chatAssistant/rightPanel/selected-chats.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-header-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/urgent-notification.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.module.scss?0359","webpack://telegram-t/./src/components/chatAssistant/globalSummary/GlobalSummaryWrapper.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.module.scss?b744","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  // add user to db\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  users.forEach((user) => {\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect,\n    // activePresetTag, filterPresetTag,\n    // activeAITag, filterAITag,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n      ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n        if (res === undefined || (res === true && aiChatFolders)) {\n          openRenderAiChatFoldersTip();\n        } else {\n          closeRenderAiChatFoldersTip();\n        }\n      });\n    }\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(({ loading, isShowTip }: { loading: boolean; isShowTip?: boolean }) => {\n    setAiChatFoldersLoading(loading);\n    if (aiChatFolders && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)?.find(({ id }) => id === folderTabs?.[activeChatFolder]?.id);\n    const isFolder = activeFolder && !isInAllChatsFolder && !isInPresetFolder && !isInPresetFolder && !isInAIFolder;\n    const folderType = getFolderType();\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : folderType}\n        folderId={isFolder ? activeFolder?.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  // console.log('aiChatFoldersTask----ChatFolders render', shouldRenderAiChatFoldersTip, aiChatFoldersStep, aiChatFoldersloading,aiChatFolders )\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: account.emojiStatusId,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","/* eslint-disable max-len */\nimport { Modal } from 'antd';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFolders, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFolders();\n          hideTip(AIChatFolderStep.classify);\n          // await sortChatFolder();\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading }: { loading: boolean }) => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersLoading(false);\n    } else {\n      setAiChatFoldersLoading(loading);\n    }\n  }, []);\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersClassifying, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersClassifying, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('AI Knowledge Base')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent:GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?:boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setSharedSettingOption,\n    setGlobalSearchDate,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        {hasMenu ? (\n          <img src={AIMenuIcon} alt=\"ai-menu\" style={buildStyle('width: 24px;height: 24px;')} />\n        ) : (\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        )}\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AIKonwledge);\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AITranslate);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport './room-ai.scss';\n\nimport SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIActionButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const onClick = useLastCallback(() => {\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  });\n  const updateUnreadCount = useLastCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  });\n  useEffect(() => {\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    setUnreadCount(count);\n    RoomStorage.summary(chatId);\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    };\n  }, [chatId, updateUnreadCount]);\n  return (\n    <div className=\"room-ai-floating-button\">\n      <Button\n        color=\"translucent\"\n        round\n        onClick={onClick}\n      >\n        <img className=\"w-[60px] h-[60px]\" src={SerenaLogoPath} alt=\"\" />\n      </Button>\n      {unreadCount > 0 && (\n        <div className=\"room-ai-floating-button-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIActionButton;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useLastCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  });\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, []);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        type=\"text\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { Switch } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport TextArea from '../component/textarea';\nimport { ChataiStores } from '../store';\n\nimport InputText from '../component/InputText';\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const initialValues:UrgentTopic = drawerParams || {\n    id: uuidv4(),\n    topicName: '',\n    topicDescription: '',\n    strongAlert: false,\n    phoneNumber: '',\n  };\n  const [form, setForm] = useState<UrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev) => {\n      prev.strongAlert = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n  const updateAllTopicPhoneNumber = async (phoneNumber:string) => {\n    const allTopics = await ChataiStores.urgentTopic?.getAllUrgentTopic();\n    allTopics?.map((topic) => {\n      if (topic.phoneNumber) {\n        topic.phoneNumber = phoneNumber;\n      }\n      return topic;\n    });\n    return ChataiStores.urgentTopic?.addUrgentTopics(allTopics || []);\n  };\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topicName = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topicDescription = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const phoneNumber = e.currentTarget.value;\n    setForm((prev) => {\n      prev.phoneNumber = phoneNumber;\n      return { ...prev };\n    });\n    if (phoneNumber.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n  const handleSave = useCallback(async () => {\n    if (form.topicName.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.topicDescription.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.strongAlert && form.phoneNumber.trim().length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    await ChataiStores.urgentTopic?.addUrgentTopic({ ...form });\n    if (form.phoneNumber?.trim().length) {\n      await updateAllTopicPhoneNumber(form.phoneNumber);\n    }\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: 1,\n    });\n    // form.validateFields().then(async (values) => {\n    //   console.log('values', values);\n    //   const topicId = drawerParams?.id || uuidv4();\n    //   await ChataiStores.urgentTopic?.addUrgentTopic({ id: topicId, ...values });\n    //   if (values.phoneNumber) {\n    //     await updateAllTopicPhoneNumber(values.phoneNumber);\n    //     console.log(3333);\n    //   }\n    //   openDrawer(DrawerKey.PersonalizeSettings, {\n    //     activeKey: 1,\n    //   });\n    // }).catch((errorInfo) => {\n    //   console.log('errorInfo', errorInfo);\n    // });\n  }, [form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: 1,\n    });\n  }, [openDrawer]);\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and content descriptions for which you need alerts. When a message contains these contents, an alert will be triggered.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topicName}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <TextArea\n          label=\"Topic Description\"\n          value={form.topicDescription}\n          noReplaceNewlines\n          error={descriptionError ? 'Please enter the topic description' : undefined}\n          onChange={handleTopicDescriptionChange}\n        />\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        <InputText\n          label=\"Phone Number\"\n          value={form.phoneNumber}\n          onChange={handlePhoneNumberChange}\n          error={phoneNumberError ? 'Please enter phone number' : undefined}\n        />\n        {/* <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={initialValues}\n        >\n          <Form.Item label=\"Topic name\" name=\"topicName\" rules={[{ required: true, message: 'Please enter topic name' }]}>\n            <Input className=\"bg-[var(--color-chat-hover)]\" placeholder=\"Please enter the content topics\" />\n          </Form.Item>\n          <Form.Item label=\"Topic description\" name=\"topicDescription\" rules={[{ required: true, message: 'Please enter topic description' }]}>\n            <TextArea\n              className=\"bg-[var(--color-chat-hover)]\"\n              placeholder=\"Please describe the specific content or keywords that should trigger an alert. For example, if 'Vitalik' + 'ETH' + 'sell' appear, please notify me.\"\n            />\n          </Form.Item>\n          <div className=\"mb-[24px]\">\n            <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n              <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n              <Form.Item name=\"strongAlert\" valuePropName=\"checked\" noStyle>\n                <Switch onChange={strongAlertChange} />\n              </Form.Item>\n            </div>\n            <span className=\"text-[14px] text-[#767676]\">\n              Once enabled, these types of messages will trigger a phone alert.\n            </span>\n          </div>\n          {strongAlert && (\n            <Form.Item label=\"Phone number\" name=\"phoneNumber\" rules={[{ required: true, message: 'Please enter phone number' }]}>\n              <Input />\n            </Form.Item>\n          )}\n        </Form> */}\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const {\n    currentUserId,\n  } = global;\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n  const lang = useOldLang();\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <Checkbox value={id}>\n        <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n          <Avatar\n            peer={peer}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n          <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)]\">\n            <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n            <div>{subtitle}</div>\n          </div>\n        </div>\n      </Checkbox>\n    );\n  };\n  const onChange = useCallback((checkedValues: string[]) => {\n    console.log('checked = ', checkedValues);\n    setSelected(checkedValues);\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    drawerParams?.onCancel();\n  }, [drawerParams]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group onChange={onChange} value={selected}>\n          <div className=\"flex flex-col gap-[12px]\">\n            {ids.map((id) => renderChatItem(id))}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto pb-[24px] pt-[12px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport TextArea from '../component/textarea';\nimport { ChataiStores } from '../store';\n\nimport InputText from '../component/InputText';\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer } = useDrawerStore();\n  const [form, setForm] = useState({ title: '', prompt: '' });\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const handleSave = useCallback(async () => {\n    if (form.title.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    await ChataiStores.summaryTemplate?.addSummaryTemplate({\n      id: uuidv4(),\n      ...form,\n    });\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: 0,\n    });\n  }, [form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: 0,\n    });\n  }, [openDrawer]);\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const title = e.currentTarget.value;\n    setForm((prev) => {\n      prev.title = title;\n      return { ...prev };\n    });\n    if (title.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">Please enter the specific topic you want to summarize accurately and add a detailed description. The message summary service will show the content as per your needs.</p>\n      <InputText\n        label=\"Topic name\"\n        value={form.title}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const name = peer ? (peer?.firstName || '') + (peer?.lastName || '') : '';\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          <ChatAvatar chatId={chatId} size={34} />\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {name}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Serena AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\nexport const languagePrompt = `\n    [实时语言雷达]\n        1. 语言指纹扫描：自动检测输入文本的\n            - 主要语种(支持92种语言置信度识别)\n            - 方言特征(如粤语/川普/美式英语)\n            - 混合语言比例(中英混杂度>30%触发混合模式)\n    [语境翻译官]\n        2. 根据语言特征自动匹配：\n            - 正式场合 → 学术英语/商务日语\n            - 社交场景 → 网络韩语/缩略中文\n            - 创意表达 → 方言梗/谐音梗\n            - 情感交流 → 方言安慰语/俚语拥抱\n    [文化调色盘]\n        3. 语言风格增强模块：\n            - 中文：加入\"绝绝子\"/\"破防了\"等年度热词\n            - 日语：自动转换敬体/简体(根据用户资料)\n            - 英语：切换正式/俚语模式(识别slang词汇)\n            - 方言：加载地域特色表达库(如东北话\"忽悠\"→上海话\"捣糨糊\")\n    [混合语处理器]\n        4. 跨语言对话解决方案：\n            - 中英夹杂 → 智能补全(\"这个idea超酷\"→\"这个idea真的超有创意\")\n            - 方言转译 → 标准语+注释(\"侬晓得伐？→ 你知道吗？(上海话)\")\n            - 代码切换 → 无缝过渡(\"今天meeting讨论了KPI→今天开会讨论了KPI\")\n`;\n\nexport const UrgentMessageCheckPrompt = `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n    ## 总结重要或紧急消息的内容摘要(可包含发送者名称),非重要或者紧急消息直接过滤掉\n    ## 消息字段解释\n        - chatId: 房间ID\n        - messageId: 消息ID\n        - content: 消息内容\n        - senderName: 发送者名称\n    ## 输出格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式\n         \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            content: 内容摘要\"             \n                        }\n                    ]\n                <!-- json-end -->\n        \\`\\`\\`\n`;\n\nexport const DefaultUrgentTopic = {\n  id: 'default',\n  topicName: '默认紧急主题',\n  topicDescription: `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n  `,\n  strongAlert: false,\n};\n\nexport const getIntelligentReplyByKnowledgePrompt = (knowledge:string) => {\n  return `\n    ## 角色设定\n        你是一个专业的智能知识管家，负责基于知识库内容进行检索回答。请严格遵守以下规则：\n    ## 知识库内容\n        ${knowledge}\n    ## 知识检索\n        - 使用精确匹配模式(无模糊扩展)\n        - 当相似度>95%时才返回知识库内容,否则回复的内容为空\n    ## 格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            replyContent: \"回复的内容\"              \n                        }\n                    ]\n                <!-- json-end -->\n            \\`\\`\\`\n    ## 示例输出\n        \\`\\`\\`json\n            <!-- json-start -->\n                [\n                    {\n                        chatId: \"房间ID\",\n                        messageId: \"消息ID\",\n                        senderId: \"用户ID\",\n                        replyContent: \"Think of SendingNetwork as the swiss-army knife for decentralized and encrypted communications infrastructure. \"              \n                    }\n                ]\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n};\n\nexport const UserPortraitPrompt = `\n    你是一位金融行为分析师，擅长通过对话文本解析用户多维特征。请根据以下框架分析输入数据，输出包含基础信息、关系定位、资产行为及兴趣特征的结构化画像：\n    # 基础信息推断\n        ## 年龄定位\n            - 使用\"学生党/刚毕业\"→18-24岁\n            - 提及\"子女教育/房贷\"→35-50岁\n        ## 性别识别：\n            - 讨论\"母婴产品\"→女性\n            - 引用\"电竞/硬件参数\"→男性\n        ## 地域判断：\n            - 提到\"沪牌政策\"→上海用户\n            - 使用\"支付宝/微信支付\"→中国大陆用户\n    # 关系定位模型\n        ## 合作伙伴：\n            - 包含\"对赌协议/股权分配\"等关键词\n            - 对话中出现\"王总/李董\"等职称\n        ## 投资人：\n            - 讨论\"IRR/ROI\"等财务指标\n            - 提及\"LP/GP\"关系\n        ## 同事：\n            - 使用\"周报/OKR\"等业务术语\n            - 非正式称呼(\"老张/小李\")\n    # 资产行为分析\n        ## 加密货币特征\n            - 持有资产:识别BTC/ETH等代币提及次数\n            - 操作风格:\"短线操作\"→交易型,\"三年以上未动\"→囤积型\n        ## 风险偏好分级\n            - \"愿意承担波动\"→激进型(风险评分7-10)\n            - \"只要保本\"→保守型(风险评分1-3)\n    # 示例输出 \n         \\`\\`\\`json\n            <!-- json-start -->\n                 {\n                    \"basic_info\": {\n                      \"age_group\": \"25-34岁\",\n                      \"gender\": \"男\",\n                      \"region\": \"北美地区\",\n                      \"language\": \"中英双语\"\n                    },\n                    \"relationship\": {\n                      \"type\": \"战略合作伙伴\",\n                      \"engagement_level\": \"高价值(年合作超500万)\"\n                    },\n                    \"financial_behavior\": {\n                      \"assets\": {\n                        \"crypto_holdings\": [\"BTC\", \"LINK\"],\n                        \"investment_style\": \"波段交易(持仓周期7-30天)\",\n                        \"risk_profile\": \"进取型(历史最大回撤承受力25%)\"\n                      },\n                    },\n                  }\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n","/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\nconst defaultSummaryPrompt = `\n            你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n            总结规则:\n            # 格式要求\n                ## 去除所有换行符,确保 JSON 结构紧凑\n                ## 代码块应使用 Markdown 代码块包裹\n                ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n                ## 严格遵从JSON规范,确保所有的JSON数据正确\n                ## 示例格式:\n                    \\`\\`\\`json\n                        <!-- json-start: {模板类型} -->\n                             {JSON数据}\n                        <!-- json-end -->\n                    \\`\\`\\`\n            # 分类插入 JSON 数据\n                ## main-topic:填充主要讨论的话题\n                ## pending-matters:填充待处理事项\n                ## garbage-message:填充无用或垃圾消息\n            # 数据字段解析\n                ## chatId:房间的唯一标识符\n                ## chatTitle:房间的标题\n                ## senderName:消息发送者的名字\n                ## messageId:消息的唯一标识符\n                ## content:消息的内容\n            # 数据格式\n                ## main-topic(主要话题模板)\n                    [\n                        {\n                            \"title\": \"主话题\",\n                            \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                            \"summaryItems\": [\n                                {\n                                    \"subtitle\": \"子话题/讨论点\",\n                                    \"relevantMessages\": [\n                                        {\n                                            \"chatId\": \"房间ID\",\n                                            \"messageIds\": [消息ID1, 消息ID2, ...]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                ## pending-matters(待处理事项模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"待处理内容摘要\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n                ## garbage-message(垃圾消息模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"垃圾信息摘要\",\n                            \"level\": \"high/low\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n            # main-topic(主要话题)总结标准\n                ## 总结的JSON是一个数组\n                ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n                ## topic 总结主要的话题\n                ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n                ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n                ## 校验总结的JSON数据结构是否正确,完整\n            # pending-matters(待处理事项)总结标准\n                ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n                ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n                ## 结合BERT模型进行意图识别,准确识别任务指派场景\n                ## 自动关联历史待办事项,避免重复记录\n            # garbage-message(垃圾消息)判定标准:\n                ## 仅处理 chatType=private 的消息\n                ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n                ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n           \n            # 总结消息偏好:\n                ## 过滤所有的无意义消息；\n                ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n                ## 为保证输出内容的完整性,尽量精简总结内容；\n                ## 主话题不超过5个,子话题总数不超过15个\n            # 总结语言风格\n                ## 使用英文进行总结\n        `;\nconst CustomizationDataTemplate = `\n    # customization-topic(自定义话题模板)\n         [\n            {\n                \"title\": \"一级标题\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"二级标题/讨论点\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst coinsPrompt = `\n    ## 指令要求\n        1. 按总提及量降序排列,仅展示前3种加密货币(不足3个则显示实际数量)\n        2. 每种货币需包含：\n            - 标准化货币符号（示例：$BTC / $ETH)\n            - 总提及次数统计\n            - 关联讨论主题分类\n            - 关键消息摘要(含消息ID溯源)\n        3. 对提及加密货币的消息内容进行总结,保留核心观点\n    ## 示例输出\n         [\n            {\n                \"title\": \"$BTC\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"分析师认为2024减半将推动价格突破7万美元\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst activeUserPrompt = `\n    ## 指令要求\n        - 提取发言次数最多的前3个人(不足3人则提取实际数量)\n        - 按发言次数排序\n        - title填充对应的senderName(发言次数)\n        - subtitle 发言的内容摘要。\n`;\nconst keyBusinessPrompt = `\n    ## 目标:从聊天消息中提取与业务或产品更新相关的内容，重点关注以下信息\n        - 重大项目成功：团队或公司取得的重要成果或目标达成。\n        - 产品发布：新产品的上线或推出。\n        - 产品更新：现有产品的功能改进、版本升级或其他更新内容。\n    ## 信息提取要求：\n        - 提取消息中与业务/产品相关的核心内容，去除无关细节。\n        - 确保总结内容完整，包含关键信息(如项目名称、产品名称、更新内容、时间等)。\n`;\nconst chainTrendingPrompt = `\n    ## 目标：请从提供的聊天信息中筛选并提炼出与链上相关的热门话题。\n        - 重点关注涉及区块链技术发展、加密货币市场动态、去中心化应用(DApps)创新以及链上重大事件等方面的内容。\n    ## 信息提取要求：\n        - 请以清晰、简洁的方式呈现总结结果，每个热点话题需简要描述其核心要点。\n        - 按讨论频率排序,提取讨论最多的前3个热点(不足3个则显示实际数量)。\n`;\nexport const CustomizationTemplates = [\n  {\n    id: '5b8f8976-e07e-4372-b34d-e3e6d8bbaf88',\n    title: 'Most Discussed Coins',\n    prompt: coinsPrompt,\n  },\n  {\n    id: '9552310a-d8ff-43ac-8f61-6233fe1a3bca',\n    title: 'Most Active Users',\n    prompt: activeUserPrompt,\n  },\n  {\n    id: 'b0f0e9a8-c5d4-4e0f-b9c6-f8a8d8b9a8c8',\n    title: 'Key business updates',\n    prompt: keyBusinessPrompt,\n  },\n  {\n    id: 'fa303579-1c78-4be6-8792-bdf539482608',\n    title: 'On-Chain Trending Topics',\n    prompt: chainTrendingPrompt,\n  },\n];\n\nexport const getGlobalSummaryPrompt = (language = 'en', definePrompt = '') => {\n  const template = `\n    你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n    总结规则:\n    # 格式要求\n        ## 去除所有换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 严格遵从JSON规范,确保所有的JSON数据正确\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start: {模板类型} -->\n                     {JSON数据}\n                <!-- json-end -->\n            \\`\\`\\`\n    # 分类插入 JSON 数据\n        ## customization-topic:自定义话题总结\n        ## main-topic:填充主要讨论的话题\n        ## pending-matters:填充待处理事项\n        ## garbage-message:填充无用或垃圾消息\n    # 数据字段解析\n        ## chatId:房间的唯一标识符\n        ## chatTitle:房间的标题\n        ## senderName:消息发送者的名字\n        ## messageId:消息的唯一标识符\n        ## content:消息的内容\n    # 数据格式\n        ${definePrompt ? CustomizationDataTemplate : ''}\n        ## main-topic(主要话题模板)\n            [\n                {\n                    \"title\": \"主话题\",\n                    \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                    \"summaryItems\": [\n                        {\n                            \"subtitle\": \"子话题/讨论点\",\n                            \"relevantMessages\": [\n                                {\n                                    \"chatId\": \"房间ID\",\n                                    \"messageIds\": [消息ID1, 消息ID2, ...]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        ## pending-matters(待处理事项模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"待处理内容摘要\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n        ## garbage-message(垃圾消息模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"垃圾信息摘要\",\n                    \"level\": \"high/low\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n    ${definePrompt ? `\n        # customization-topic(自定义话题模板)总结标准\n        ${definePrompt}\n        ` : ''}\n    # main-topic(主要话题)总结标准\n        ## 总结的JSON是一个数组\n        ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n        ## topic 总结主要的话题\n        ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n        ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n        ## 校验总结的JSON数据结构是否正确,完整\n    # pending-matters(待处理事项)总结标准\n        ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n        ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n        ## 结合BERT模型进行意图识别,准确识别任务指派场景\n        ## 自动关联历史待办事项,避免重复记录\n    # garbage-message(垃圾消息)判定标准:\n        ## 仅处理 chatType=private 的消息\n        ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n        ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n   \n    # 总结消息偏好:\n        ## 过滤所有的无意义消息；\n        ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n        ## 为保证输出内容的完整性,尽量精简总结内容；\n        ## 主话题不超过5个,子话题总数不超过15个\n    # 总结语言风格\n        ## 使用${language}语言进行总结\n`;\n  return template;\n};\nexport default defaultSummaryPrompt;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './selected-chats.scss';\n\ninterface Props {\n  selected: string[];\n  onOpenChatSelect:() => void;\n  onDelete: (id: string) => void;\n}\nexport const SelectedChats = (props: Props) => {\n  const { onOpenChatSelect, selected, onDelete } = props;\n  const lang = useOldLang();\n  const global = getGlobal();\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n        <Icon\n          name=\"delete\"\n          className=\"chat-picker-del ml-auto cursor-pointer text-[18px] text-[#FF4D4F]\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => { onDelete(id); }}\n        />\n      </div>\n    );\n  };\n  return (\n    <div className=\"mt-[40px]\">\n      <h3 className=\"text-[18px] font-semibold\">Which chats do you care about？</h3>\n      <div\n        className=\"chat-picker-item flex cursor-pointer items-center gap-[8px] py-[10px] rounded-[12px]\"\n        onClick={onOpenChatSelect}\n      >\n        <div\n          className=\"flex items-center justify-center w-[40px] h-[40px] rounded-full bg-[#8C42F0] text-white\"\n        >\n          <Icon name=\"add\" />\n        </div>\n        <span>Add Chats</span>\n      </div>\n      {selected.length > 0 && (\n        <>\n          {selected.map((id) => renderChatItem(id))}\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport cx from 'classnames';\n\nimport type { CustomSummaryTemplate } from '../store/chatai-summary-template-store';\n\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { CustomizationTemplates } from '../globalSummary/summary-prompt';\nimport { CloseIcon } from '../icons';\nimport { ChataiStores } from '../store';\nimport { SUMMARY_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './surmarize-tab.scss';\n\nconst SummarizeTab = () => {\n  const [userDefinedTemplate, setUserDefinedTemplate] = useState<CustomSummaryTemplate[]>([]);\n  const [lastTemplate, setLastTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [currentTemplate, setCurrentTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.summaryTemplate?.getAllSummaryTemplate().then((res) => {\n      setUserDefinedTemplate(res || []);\n    });\n    ChataiStores.general?.get('lastDefinedPrompt').then((res) => {\n      if (res) {\n        setLastTemplate(res);\n        setCurrentTemplate(res);\n      }\n    });\n    ChataiStores.general?.get(SUMMARY_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n  const actionsVisable = useMemo(() => {\n    // eslint-disable-next-line no-console\n    console.log('currentTemplate', currentTemplate);\n    // eslint-disable-next-line no-console\n    console.log('lastTemplate', lastTemplate);\n    return currentTemplate && currentTemplate?.id !== lastTemplate?.id;\n  }, [currentTemplate, lastTemplate]);\n  const handleCustomization = useCallback(() => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  }, [openDrawer]);\n  const handleTemplateSelect = useCallback((item: CustomSummaryTemplate) => {\n    setCurrentTemplate(item);\n  }, []);\n  const handleCancel = useCallback(() => {\n    setCurrentTemplate(lastTemplate);\n  }, [lastTemplate]);\n  const handleSave = useCallback(() => {\n    ChataiStores.general?.set('lastDefinedPrompt', currentTemplate);\n    setLastTemplate(currentTemplate);\n    globalSummaryTask.updateSummaryDefineTemplate(currentTemplate);\n  }, [currentTemplate]);\n  const handleDelete = useCallback((e: React.MouseEvent<HTMLDivElement>, id: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    ChataiStores.summaryTemplate?.deleteSummaryTemplate(id).then(() => {\n      setUserDefinedTemplate((prev) => {\n        return prev.filter((item) => item.id !== id);\n      });\n    });\n    if (id === lastTemplate?.id) {\n      ChataiStores.general?.delete('lastDefinedPrompt').then(() => {\n        setLastTemplate(undefined);\n      });\n    }\n    if (id === currentTemplate?.id) {\n      setCurrentTemplate(undefined);\n    }\n  }, [lastTemplate?.id, currentTemplate?.id]);\n  const handleOpenChatSelect = useCallback(async () => {\n    const selected = await ChataiStores.general?.get(SUMMARY_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats: selected,\n      onSave: (chats:string[]) => {\n        ChataiStores.general?.set(SUMMARY_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n        globalSummaryTask.updateSummaryChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      },\n      onBack: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handleDeleteSummaryChat = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(SUMMARY_CHATS, newSelected);\n    globalSummaryTask.updateSummaryChats(newSelected);\n    setSelectedChats(newSelected);\n  }, [selectedChats]);\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text)\">What are you curious about?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {CustomizationTemplates.map((item) => {\n            return (\n              <div\n                key={item.title}\n                onClick={() => handleTemplateSelect(item)}\n                className={cx('w-fit flex-grow-0 px-[20px] h-[42px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[var(--color-text)]', {\n                  'bg-[#B297FF] text-white': currentTemplate?.id === item.id,\n                })}\n              >\n                {item.title}\n              </div>\n            );\n          })}\n          {userDefinedTemplate.length > 0 && (\n            userDefinedTemplate.map((item) => {\n              return (\n                <div\n                  key={item.title}\n                  onClick={() => handleTemplateSelect(item)}\n                  className={cx('prompt-template-item w-fit px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer flex items-center gap-[8px]', {\n                    'bg-[#B297FF]': currentTemplate?.title === item.title,\n                  })}\n                >\n                  <span>{item.title}</span>\n                  <div\n                    className=\"delete-icon w-[20px] h-[20px] cursor-pointer flex items-center justify-center\"\n                    onClick={(e) => handleDelete(e, item.id)}\n                  >\n                    <CloseIcon />\n                  </div>\n                </div>\n              );\n            })\n          )}\n          <div\n            className=\"w-[144px] whitespace-nowrap px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[#8C42F0] font-medium\"\n            onClick={handleCustomization}\n          >\n            + Customization\n          </div>\n        </div>\n        <SelectedChats\n          onOpenChatSelect={handleOpenChatSelect}\n          selected={selectedChats}\n          onDelete={handleDeleteSummaryChat}\n        />\n      </div>\n      {actionsVisable ? (\n        <div className=\"flex flex-row justify-center gap-[14px] py-[24px] px-[18px] w-full z-10  absolute bottom-0 left-0\">\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n            onClick={handleCancel}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n            onClick={handleSave}\n          >\n            Save\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { ChataiStores } from '../store';\nimport { URGENT_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: UrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topicName}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[#8C42F0] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>Add Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const [topics, setTopics] = useState<UrgentTopic[]>([]);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.urgentTopic?.getAllUrgentTopic().then((topics) => {\n      console.log('topics', topics);\n      setTopics(topics);\n    });\n    ChataiStores.general?.get(URGENT_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(URGENT_CHATS, newSelected);\n    setSelectedChats(newSelected);\n    urgentCheckTask.updateUrgentChats(newSelected);\n  }, [selectedChats]);\n\n  const handleOpenChatSelect = useCallback(async () => {\n    const selectedChats = await ChataiStores.general?.get(URGENT_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats,\n      onSave: (chats: string[]) => {\n        ChataiStores.general?.set(URGENT_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        urgentCheckTask.updateUrgentChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      },\n      onBack: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handeleDeleteTopic = (id:string) => {\n    ChataiStores.urgentTopic?.deleteUrgentTopic(id);\n    setTopics(topics.filter((t) => t.id !== id));\n  };\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          <AddTopic />\n        </div>\n      </div>\n      <SelectedChats\n        onOpenChatSelect={handleOpenChatSelect}\n        selected={selectedChats}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\nimport type { TabsProps } from 'antd';\nimport { Tabs } from 'antd';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Summarize',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    // <Tabs\n    //   className=\"personalized-settings-tab h-full\"\n    //   defaultActiveKey={activeKey}\n    //   items={items}\n    //   onChange={onChange}\n    // />\n    <div className=\"flex flex-col h-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport { CloseIcon, LeftOutlined } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[44px] h-[44px] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Customization');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<LeftOutlined size={24} />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<CloseIcon size={24} />} onClick={onClose} />\n      )}\n      <div className=\"text-[16px] font-semibold pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// import type { Dispatch, SetStateAction } from 'react';\nimport React, {\n  forwardRef,\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2SummaryStoreMessage, parseSummaryStoreMessage2Message, type SummaryStoreMessage } from '../store/summary-store';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = forwardRef(() => {\n  const { mutate } = useSWRConfig();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n    onFinish: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, setMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 10)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage, setMessages]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 5) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n\n  const handleInputSubmit = useCallback((value:string) => {\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n    mutate('messages:should-scroll', 'smooth');\n  }, [append, mutate]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 500);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={buildClassName(styles.globaSummaryBg, 'flex flex-col w-full h-full flex-1')}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Serena\" />\n            <span className=\"text-[15px] font-semibold\">Serena AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={messages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n});\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mJJD2lw1\"};","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { selectChat } from '../../../global/selectors';\nimport GlobalSummary from './global-summary';\n\nconst injectMessageAI = injectComponent(GlobalSummary);\nconst GlobalSummaryWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current, {});\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, []);\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global) => {\n    const memoSelectChat = (chatId: string) => {\n      return selectChat(global, chatId);\n    };\n    return {\n      memoSelectChat,\n    };\n  },\n)(GlobalSummaryWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiMessage, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIActionButton from '../chatAssistant/room-ai/room-ai-action-button';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/globalSummary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }:{ message: ApiMessage }) => {\n    const id = message.chatId;\n    const scheduleMeeting = ScheduleMeeting.create({ chatId: id });\n    if (scheduleMeeting.timeout) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage(id);\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(id, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === id) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: id });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <RoomAIActionButton\n              chatId={renderingChatId!}\n            />\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      getActions().openChat({ id: GLOBAL_SUMMARY_CHATID });\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React from 'react';\nimport type { Message } from 'ai';\n\nimport { generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summarize\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Schedule meeting\n      </div>\n      <div className={actionItemClassName} onClick={handleActionItems}>\n        ✅ To-do list\n      </div>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getHitTools } from '../utils/chat-api';\nimport { getAuthState, isTokenValid } from '../utils/google-auth';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport { createGoogleLoginMessage, createGoogleMeetingMessage, createRoomDescriptionMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const { mutate } = useSWRConfig();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: chatId,\n    sendExtraMessageFields: true,\n    onResponse: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message:Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage as UIMessage[]);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  }, [insertMessage, messages, mutate, setMessages]);\n\n  const updateToken = useCallback((payload:{ message:Message;token:string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 100);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach((toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const auth = getAuthState();\n            if (!auth || !isTokenValid(auth)) {\n              insertMessage(createGoogleLoginMessage());\n            } else {\n              insertMessage(createGoogleMeetingMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n            mutate('messages:should-scroll', 'smooth');\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    const newMessage:Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item:any) => item.score > 0.8);\n    if (matchs.length > 0) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","// extracted by mini-css-extract-plugin\nexport default {\"rightPanelBg\":\"ZfJHpS2Q\"};","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    const timer = setTimeout(() => {\n      if (containerRef.current && chatId && chatId !== GLOBAL_SUMMARY_CHATID) {\n        injected = injectMessageAI(containerRef.current, { ...props });\n      }\n    }, 500); // 等动画走完再注入\n\n    return () => {\n      clearTimeout(timer);\n      injected?.unmount();\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Serena AI\" />\n              <h3 className=\"title\">{oldLang('Serena AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","autoTranslateLanguage","settings","byKey","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","ChataiStores","addUser","name","firstName","lastName","phoneNumber","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","contact","addContact","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","isChatAIShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","ActiveTag","folderType","setActiveTag","item","currentTag","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onDelete","CloseIcon","xmlns","height","fill","d","PRESET_TAGS","PresetTagModal","activeTag","tagList","PRESET_FOLDER_ID","getAITags","Modal","dialogStyle","onClickTag","withGlobal","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","res","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","loading","isShowTip","eventEmitter","on","Actions","UpdateAIChatFoldersApplying","off","placeholderRef","shouldRenderPlaceholder","noMountTransition","getFolderType","shouldRenderFolders","renderCurrentTab","activeFolder","isFolder","ChatList","canDisplayArchive","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","AIChatFoldersTip","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","account","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","confirm","onOk","deleteAiChatFolders","hideTip","onCancel","updateAIChatFoldersLoading","UpdateAIChatFoldersClassifying","IS_MULTIACCOUNT_SUPPORTED","src","AIKnowledgeIcon","alt","style","buildStyle","AITranslateIcon","AIChatFolderIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","AIMenuIcon","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","openChatAIWithInfo","setUnreadCount","RoomStorage","updateRoomAIData","updateUnreadCount","getRoomAIUnreadCount","summary","UpdateRoomAIUnreadCount","SerenaLogoPath","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","stop","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","AITextarea","target","cx","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","TextArea","success","readOnly","inputMode","maxLength","maxLengthIndicator","onInput","onKeyPress","onBlur","onPaste","noReplaceNewlines","labelText","fullClassName","resizeHeight","element","requestMutation","requestForcedReflow","newHeight","useLayoutEffect","textarea","currentTarget","previousSelectionEnd","selectionEnd","htmlFor","InputText","teactExperimentControlled","AddTopicPanel","openDrawer","drawerParams","useDrawerStore","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","initialValues","uuidv4","topicName","topicDescription","strongAlert","setForm","handleTopicNameChange","prev","handleTopicDescriptionChange","handlePhoneNumberChange","handleSave","urgentTopic","addUrgentTopic","allTopics","getAllUrgentTopic","addUrgentTopics","updateAllTopicPhoneNumber","DrawerKey","PersonalizeSettings","handleCancel","Switch","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","checkedValues","onSave","Input","Checkbox","Group","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","isSavedMessages","renderChatItem","CustomizationPromptPanel","prompt","titleError","setTitleError","promptError","setPromptError","summaryTemplate","addSummaryTemplate","Message","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","setIsLoading","useChat","api","sendExtraMessageFields","initialMessages","role","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","CustomizationTemplates","SelectedChats","onOpenChatSelect","SummarizeTab","userDefinedTemplate","setUserDefinedTemplate","lastTemplate","setLastTemplate","currentTemplate","setCurrentTemplate","setSelectedChats","getAllSummaryTemplate","SUMMARY_CHATS","actionsVisable","handleCustomization","CustomizationPrompt","handleTemplateSelect","globalSummaryTask","updateSummaryDefineTemplate","handleDelete","deleteSummaryTemplate","handleOpenChatSelect","ChatPicker","updateSummaryChats","handleDeleteSummaryChat","newSelected","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","setTopics","URGENT_CHATS","urgentCheckTask","updateUrgentChats","deleteUrgentTopic","t","selectedTabIndex","setSelectedTabIndex","hasBackDrawer","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","LeftOutlined","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","DangerIcon","notificationUrgentMessage","GlobalSummary","forwardRef","mutate","useSWRConfig","notificationMessage","setNotificationMessage","pageInfo","setPageInfo","lastTime","GLOBAL_SUMMARY_CHATID","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","initSummaryChats","getTime","deleteMessage","delMessage","createdAt","msgs","parseMessage2SummaryStoreMessage","storeMessages","timer","SerenaPath","Messages","loadMore","injectMessageAI","injectComponent","memoSelectChat","GlobalSummaryWrapper","containerRef","injected","unmount","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","children","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","handleAvatarClick","avatarRef","hiddenName","renderAvatar","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","handleAnalyticsMessage","ScheduleMeeting","create","timeout","meetingMentionMessage","createMeetingMentionMessage","storeMessage","parseMessage2StoreMessage","emit","AddRoomAIMessage","IntentionToScheduleMeeting","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIActionButton","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","actionItemClassName","RoomActions","insertMessage","handleSummarize","summaryRoomMessage","handleScheduleMeeting","scheduleGoogleMeeting","handleActionItems","generateRoomActionItems","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","createGoogleLoginMessage","mergeMesssage","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","formMessage","toolsEmbeddingStore","getHitTools","toolResults","toolCall","toolName","auth","getAuthState","isTokenValid","sendGAEvent","RoomAI","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","play","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","realTimeAssistants","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","setShouldSkipTransition","contentKey","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}