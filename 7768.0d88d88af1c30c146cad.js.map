{"version":3,"file":"7768.0d88d88af1c30c146cad.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://telegram-t/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/ai-chatfolders-tip.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-assistant.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-action-button.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/chatAssistant/multi-input.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-prompt.ts","webpack://telegram-t/./src/components/chatAssistant/rightPanel/selected-chats.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/summary-header-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/urgent-notification.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.tsx","webpack://telegram-t/./src/components/chatAssistant/globalSummary/global-summary.module.scss?0359","webpack://telegram-t/./src/components/chatAssistant/globalSummary/GlobalSummaryWrapper.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-utils.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.module.scss?b744","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  // add user to db\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  users.forEach((user) => {\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import React, { FC, memo, useState } from \"../../../lib/teact/teact\";\nimport AiChatFoldersBg from \"../../../assets/chat_ai_folder.png\";\nimport AiChatFoldersDarkBg from \"../../../assets/chat_ai_folder_dark.png\";\nimport AiChatFoldersBtnBg from \"../../../assets/chat_ai_folder_border.png\";\nimport Icon from \"../../common/icons/Icon\";\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from \"../store\";\nimport { getActions, withGlobal } from \"../../../global\";\nimport { aiChatFoldersTask } from \"../ai-task/ai-chatfolders-task\";\nimport { message } from \"antd\";\nimport { SVGProps } from \"react\";\nimport { selectTheme } from \"../../../global/selectors\";\nimport { ThemeKey } from \"../../../types\";\nimport Spinner from \"../../ui/Spinner\";\nimport \"./ai-chatfolders-tip.scss\";\nimport Button from \"../../ui/Button\";\n\ntype OwnProps = {\n  theme?: ThemeKey;\n  onClose?: () => void;\n};\nconst AIChatFoldersTip: FC<OwnProps> = ({ theme, onClose }: OwnProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  function onCloseClick() {\n    message.open({\n      content:\n        \"You can enable this feature later in the settings page if needed.\",\n      icon: null,\n      className: \"aichatfolders-tip-message\",\n    });\n    ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n    onClose?.();\n  }\n\n  async function onApply() {\n    if (loading) return;\n    const { setSharedSettingOption } = getActions();\n\n    setSharedSettingOption({ aiChatFolders: true });\n    setLoading(true);\n    await aiChatFoldersTask.classifyChatMessageByCount();\n    setLoading(false);\n\n    onCloseClick();\n  }\n\n  return (\n    <div\n      className=\"py-2 flex flex-row items-center relative px-3 gap-3\"\n      style={`background-image: url(${\n        theme === \"dark\" ? AiChatFoldersDarkBg : AiChatFoldersBg\n      }); background-size: 100% 100%;`}\n    >\n      <div className=\"text-[var(--color-aichatfolders-tag-text)]\">\n        <AIChatFolderIcon />\n      </div>\n      <div className=\"leading-[16px] text-[13px] text-[var(--color-aichatfolders-tag-text)]\">\n        Your chat has been intelligently tagged in folders by Serena AI\n      </div>\n      <Button\n        color=\"translucent\"\n        className=\"w-[46px] h-[24px] mr-3 rounded-[28px] cursor-pointer hover:opacity-80\"\n        style={`background-image: url(${AiChatFoldersBtnBg}); background-size: 100% 100%; text-transform: none; color: #000;`}\n        onClick={onApply}\n      >\n        {loading ? (\n          <Spinner\n            className=\"w-[12px] h-[12px]\"\n            color={theme === \"dark\" ? \"white\" : \"black\"}\n          />\n        ) : (\n          <div className=\"text-[var(--color-aichatfolders-tag-text)] text-[12px]\">\n            Apply\n          </div>\n        )}\n      </Button>\n      <div className=\"absolute right-2 top-1\">\n        {!loading && (\n          <Icon\n            name=\"close\"\n            className=\"text-[var(--color-aichatfolders-tag-close-color)] cursor-pointer hover:opacity-50\"\n            style=\"width:6px;height:6px\"\n            onClick={onCloseClick}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global) => {\n    return {\n      theme: selectTheme(global),\n    };\n  })(AIChatFoldersTip)\n);\n\nconst AIChatFolderIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={21}\n    height={21}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M13.375 7.625 9.54 6.187l3.834-1.439L14.812.917l1.44 3.831 3.831 1.44-3.832 1.437-1.439 3.833-1.437-3.833ZM5.708 15.29.917 13.375l4.791-1.917 1.917-4.792 1.916 4.792 4.792 1.917-4.792 1.916-1.916 4.792-1.917-4.791Z\"\n    />\n  </svg>\n);\n","import { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport Icon from \"../../common/icons/Icon\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { AI_FOLDER_ID, ALL_FOLDER_ID, PRESET_FOLDER_ID, UNREAD_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal'\nimport useFlag from \"../../../hooks/useFlag\"\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG } from \"../../chatAssistant/store\"\nimport { filterAITag, filterPresetTag } from \"../../chatAssistant/ai-chatfolders/tag-filter\"\nimport AIChatFoldersTip from \"../../chatAssistant/ai-chatfolders/ai-chatfolders-tip\"\nimport ActiveTag from \"../../chatAssistant/ai-chatfolders/active-tag\"\nimport { selectSharedSettings } from \"../../../global/selectors/sharedState\"\nimport { filterAIFolder } from \"../../chatAssistant/ai-chatfolders/util\"\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([])\n  const [activeAITag, setActiveAITag] = useState<string[]>([])\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: 'Preset'},\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: 'Unread'},\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: 'AI'},\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID) {\n          return AIChatsFolder\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect, activePresetTag, filterPresetTag,\n    activeAITag, filterAITag\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal()\n    } else {\n      closeRenderPresetTagModal()\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(()=>{\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res)=>{\n      setActivePresetTag(res ?? [])\n    })\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res)=>{\n      setActiveAITag(res ?? [])\n    })\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res)=>{\n      res === false ? closeRenderAiChatFoldersTip() : openRenderAiChatFoldersTip()\n    })\n  }, [])\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)?.find(({ id }) => id === folderTabs![activeChatFolder]?.id);\n    const isFolder = activeFolder && !isInAllChatsFolder && !isInPresetFolder && !isInPresetFolder && !isInAIFolder;\n    const folderType = getFolderType();\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : folderType}\n        folderId={isFolder ? activeFolder?.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) :[]}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && <AIChatFoldersTip onClose={closeRenderAiChatFoldersTip} />}\n      {shouldRenderFolders && shouldRenderPresetTagModal && <PresetTagModal\n        activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n        setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        isOpen={shouldRenderPresetTagModal}\n        onClose={closeRenderPresetTagModal}\n        folderId={folderTabs![activeChatFolder].id}\n      />}\n      {shouldRenderFolders && <ActiveTag\n        folderType={getFolderType()}\n        tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n        setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n      />}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: account.emojiStatusId,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","/* eslint-disable max-len */\nimport { Modal } from 'antd';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { deleteAiChatFolders, sortChatFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSwitchAIChatFolders = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          // delete ai chat folders\n          await deleteAiChatFolders();\n          // await sortChatFolder();\n          setSharedSettingOption({ aiChatFolders: isOpen });\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      aiChatFoldersTask.classifyChatMessageByCount();\n    }\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('AI Knowledge Base')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className=\"Switcher no-animation\" title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent:GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?:boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setSharedSettingOption,\n    setGlobalSearchDate,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        {hasMenu ? (\n          <img src={AIMenuIcon} alt=\"ai-menu\" style={buildStyle('width: 24px;height: 24px;')} />\n        ) : (\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        )}\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <>\n            <SearchInput\n              inputId=\"telegram-search-input\"\n              resultsItemSelector=\".LeftSearch .ListItem-button\"\n              className={buildClassName(\n                (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n                shouldHideSearch && 'SearchInput--hidden',\n              )}\n              withAIIcon\n              value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n              focused={isSearchFocused}\n              isLoading={isLoading || connectionStatusPosition === 'minimized'}\n              spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n              spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n              placeholder={searchInputPlaceholder}\n              autoComplete=\"off\"\n              canClose={Boolean(globalSearchChatId || searchDate)}\n              onChange={onSearchQuery}\n              onReset={onReset}\n              onFocus={handleSearchFocus}\n              onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            >\n              {searchContent}\n              <StoryToggler\n                canShow={withStoryToggler}\n              />\n            </SearchInput>\n          </>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AIKonwledge);\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AITranslate);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport type { StoreMessage } from '../store/messages-store';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { selectChat, selectChatLastMessageId } from '../../../global/selectors';\nimport { ChataiStores } from '../store';\nimport { summaryMessage } from '../utils/chat-api';\nimport { fetchChatMessageByOffsetId, formateMessage2Summary } from '../utils/fetch-messages';\n\nclass RoomAIAssistant {\n  static get global() {\n    return getGlobal();\n  }\n\n  public static getRoomLastFocusTime(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)[chatId]?.lastFocusTime || 0 : 0;\n  }\n\n  public static getRoomLastSummaryId(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)[chatId]?.lastSummaryId || 0 : 0;\n  }\n\n  public static getRoomUnreadCount(chatId: string) {\n    const chat = selectChat(this.global, chatId);\n    return chat ? chat.unreadCount || 0 : 0;\n  }\n\n  public static getRoomAIUnreadCount(chatId: string) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    return roomAIData ? JSON.parse(roomAIData)?.[chatId]?.unreadCount || 0 : 0;\n  }\n\n  public static updateRoomAIData(chatId: string, type:string, value:any) {\n    const roomAIData = localStorage.getItem('room-ai-data');\n    const parsedData = roomAIData ? JSON.parse(roomAIData) : {};\n    const currentData = parsedData[chatId] || {};\n    currentData[type] = value;\n    parsedData[chatId] = currentData;\n    localStorage.setItem('room-ai-data', JSON.stringify(parsedData));\n    if (type === 'unreadCount') {\n      eventEmitter.emit(Actions.UpdateRoomAIUnreadCount, { chatId, count: value });\n    }\n  }\n\n  public static increaseUnreadCount(chatId: string) {\n    const count = this.getRoomAIUnreadCount(chatId) + 1;\n    this.updateRoomAIData(chatId, 'unreadCount', count);\n    eventEmitter.emit(Actions.UpdateRoomAIUnreadCount, { chatId, count });\n  }\n\n  public static async summary(chatId: string) {\n    const lastFocusTime = RoomAIAssistant.getRoomLastFocusTime(chatId);\n    const lastSummaryId = RoomAIAssistant.getRoomLastSummaryId(chatId);\n    const unreadCount = RoomAIAssistant.getRoomUnreadCount(chatId);\n    const lastMessageId = selectChatLastMessageId(this.global, chatId, 'all') || 0;\n    if (unreadCount > 5 && lastMessageId - lastSummaryId > 5 && lastFocusTime < Date.now() - 1000 * 60 * 5) {\n      // eslint-disable-next-line no-console\n      console.log('开始总结');\n      const chat = selectChat(this.global, chatId);\n      const summaryCount = Math.max(unreadCount, 20);\n      if (chat) {\n        const messages = await fetchChatMessageByOffsetId({\n          chat,\n          offsetId: lastMessageId,\n          addOffset: -1,\n          sliceSize: 20,\n          threadId: MAIN_THREAD_ID,\n          maxCount: summaryCount,\n        });\n        const formateMessages = formateMessage2Summary(messages);\n        if (!formateMessages.length) return;\n        const summaryInfo = {\n          summaryTime: new Date().getTime(),\n          messageCount: formateMessages.length,\n          userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n        };\n        summaryMessage({\n          messages: formateMessages,\n        }).then((res:any) => {\n          const content = {\n            ...res.data,\n            summaryInfo,\n          };\n          const newMessage = {\n            chatId,\n            timestamp: new Date().getTime(),\n            content: JSON.stringify(content),\n            id: uuidv4(),\n            createdAt: new Date(),\n            role: 'assistant',\n            annotations: [{\n              type: 'room-summary',\n            }],\n          };\n          ChataiStores.message?.storeMessage(newMessage as StoreMessage);\n          eventEmitter.emit(Actions.AddRoomAIMessage, newMessage);\n          this.increaseUnreadCount(chatId);\n        });\n      }\n    }\n    this.updateRoomAIData(chatId, 'lastFocusTime', new Date().getTime());\n  }\n}\n\nexport default RoomAIAssistant;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomAIAssistant from './room-ai-assistant';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport './room-ai.scss';\n\nimport SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIActionButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const onClick = useLastCallback(() => {\n    openChatAIWithInfo({ chatId });\n    RoomAIAssistant.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  });\n  const updateUnreadCount = useLastCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  });\n  useEffect(() => {\n    const count = RoomAIAssistant.getRoomAIUnreadCount(chatId);\n    setUnreadCount(count);\n    RoomAIAssistant.summary(chatId);\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    };\n  }, [chatId, updateUnreadCount]);\n  return (\n    <div className=\"room-ai-floating-button\">\n      <Button\n        color=\"translucent\"\n        round\n        onClick={onClick}\n      >\n        <img className=\"w-[60px] h-[60px]\" src={SerenaLogoPath} alt=\"\" />\n      </Button>\n      {unreadCount > 0 && (\n        <div className=\"room-ai-floating-button-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIActionButton;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { Button } from './component/button';\nimport { Textarea } from './component/textarea';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <Textarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { Form, Input, Switch } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport { ChataiStores } from '../store';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst { TextArea } = Input;\n\nconst AddTopicPanel = () => {\n  const [form] = Form.useForm();\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const initialValues:UrgentTopic = drawerParams || {\n    id: uuidv4(),\n    topicName: '',\n    topicDescription: '',\n    strongAlert: false,\n    phoneNumber: '',\n  };\n  const [strongAlert, setStrongAlert] = useState(drawerParams?.strongAlert || false);\n  const strongAlertChange = (checked:boolean) => {\n    setStrongAlert(checked);\n  };\n  const updateAllTopicPhoneNumber = async (phoneNumber:string) => {\n    const allTopics = await ChataiStores.urgentTopic?.getAllUrgentTopic();\n    allTopics?.map((topic) => {\n      if (topic.phoneNumber) {\n        topic.phoneNumber = phoneNumber;\n      }\n      return topic;\n    });\n    return ChataiStores.urgentTopic?.addUrgentTopics(allTopics || []);\n  };\n  const handleSave = useCallback(() => {\n    form.validateFields().then(async (values) => {\n      console.log('values', values);\n      const topicId = drawerParams?.id || uuidv4();\n      await ChataiStores.urgentTopic?.addUrgentTopic({ id: topicId, ...values });\n      if (values.phoneNumber) {\n        await updateAllTopicPhoneNumber(values.phoneNumber);\n        console.log(3333);\n      }\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: '2',\n      });\n    }).catch((errorInfo) => {\n      console.log('errorInfo', errorInfo);\n    });\n  }, [drawerParams?.id, form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: '2',\n    });\n  }, [openDrawer]);\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and content descriptions for which you need alerts. When a message contains these contents, an alert will be triggered.\n        </div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={initialValues}\n        >\n          <Form.Item label=\"Topic name\" name=\"topicName\" rules={[{ required: true, message: 'Please enter topic name' }]}>\n            <Input className=\"bg-[var(--color-chat-hover)]\" placeholder=\"Please enter the content topics\" />\n          </Form.Item>\n          <Form.Item label=\"Topic description\" name=\"topicDescription\" rules={[{ required: true, message: 'Please enter topic description' }]}>\n            <TextArea\n              className=\"bg-[var(--color-chat-hover)]\"\n              placeholder=\"Please describe the specific content or keywords that should trigger an alert. For example, if 'Vitalik' + 'ETH' + 'sell' appear, please notify me.\"\n            />\n          </Form.Item>\n          <div className=\"mb-[24px]\">\n            <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n              <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n              <Form.Item name=\"strongAlert\" valuePropName=\"checked\" noStyle>\n                <Switch onChange={strongAlertChange} />\n              </Form.Item>\n            </div>\n            <span className=\"text-[14px] text-[#767676]\">\n              Once enabled, these types of messages will trigger a phone alert.\n            </span>\n          </div>\n          {strongAlert && (\n            <Form.Item label=\"Phone number\" name=\"phoneNumber\" rules={[{ required: true, message: 'Please enter phone number' }]}>\n              <Input />\n            </Form.Item>\n          )}\n        </Form>\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const {\n    currentUserId,\n  } = global;\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n  const lang = useOldLang();\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <Checkbox value={id}>\n        <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n          <Avatar\n            peer={peer}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n          <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)]\">\n            <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n            <div>{subtitle}</div>\n          </div>\n        </div>\n      </Checkbox>\n    );\n  };\n  const onChange = useCallback((checkedValues: string[]) => {\n    console.log('checked = ', checkedValues);\n    setSelected(checkedValues);\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    drawerParams?.onCancel();\n  }, [drawerParams]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group onChange={onChange} value={selected}>\n          <div className=\"flex flex-col gap-[12px]\">\n            {ids.map((id) => renderChatItem(id))}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto pb-[24px] pt-[12px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { Form, Input } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ChataiStores } from '../store';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nconst { TextArea } = Input;\nconst CustomizationPromptPanel = () => {\n  const { openDrawer } = useDrawerStore();\n  const [form] = Form.useForm();\n  const handleSave = useCallback(() => {\n    form.validateFields().then(async (values) => {\n      await ChataiStores.summaryTemplate?.addSummaryTemplate({\n        id: uuidv4(),\n        ...values,\n      });\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: '1',\n      });\n    }).catch((errorInfo) => {\n      // eslint-disable-next-line no-console\n      console.log('errorInfo', errorInfo);\n    });\n  }, [form, openDrawer]);\n  const handleCancel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: '1',\n    });\n  }, [openDrawer]);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">Please enter the specific topic you want to summarize accurately and add a detailed description. The message summary service will show the content as per your needs.</p>\n      <Form\n        form={form}\n        layout=\"vertical\"\n      >\n        <Form.Item label=\"Topic name\" name=\"title\" rules={[{ required: true, message: 'Please enter topic name' }]}>\n          <Input className=\"bg-[var(--color-chat-hover)]\" placeholder=\"Primary Subject\" />\n        </Form.Item>\n        <Form.Item label=\"Topic description\" name=\"prompt\" rules={[{ required: true, message: 'Please enter topic description' }]}>\n          <TextArea\n            className=\"bg-[var(--color-chat-hover)]\"\n            placeholder=\"Content description\"\n          />\n        </Form.Item>\n      </Form>\n      <div className=\"flex flex-row justify-center gap-[14px] mt-auto mb-[24px]\">\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n          onClick={handleCancel}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n          onClick={handleSave}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const name = peer ? (peer?.firstName || '') + (peer?.lastName || '') : '';\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          <ChatAvatar chatId={chatId} size={34} />\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {name}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Serena AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\nconst defaultSummaryPrompt = `\n            你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n            总结规则:\n            # 格式要求\n                ## 去除所有换行符,确保 JSON 结构紧凑\n                ## 代码块应使用 Markdown 代码块包裹\n                ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n                ## 严格遵从JSON规范,确保所有的JSON数据正确\n                ## 示例格式:\n                    \\`\\`\\`json\n                        <!-- json-start: {模板类型} -->\n                             {JSON数据}\n                        <!-- json-end -->\n                    \\`\\`\\`\n            # 分类插入 JSON 数据\n                ## main-topic:填充主要讨论的话题\n                ## pending-matters:填充待处理事项\n                ## garbage-message:填充无用或垃圾消息\n            # 数据字段解析\n                ## chatId:房间的唯一标识符\n                ## chatTitle:房间的标题\n                ## senderName:消息发送者的名字\n                ## messageId:消息的唯一标识符\n                ## content:消息的内容\n            # 数据格式\n                ## main-topic(主要话题模板)\n                    [\n                        {\n                            \"title\": \"主话题\",\n                            \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                            \"summaryItems\": [\n                                {\n                                    \"subtitle\": \"子话题/讨论点\",\n                                    \"relevantMessages\": [\n                                        {\n                                            \"chatId\": \"房间ID\",\n                                            \"messageIds\": [消息ID1, 消息ID2, ...]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                ## pending-matters(待处理事项模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"待处理内容摘要\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n                ## garbage-message(垃圾消息模板)\n                    [\n                        {\n                            \"chatId\": \"房间ID\",\n                            \"chatTitle\": \"房间名称\",\n                            \"summary\": \"垃圾信息摘要\",\n                            \"level\": \"high/low\",\n                            \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                        }\n                    ]\n            # main-topic(主要话题)总结标准\n                ## 总结的JSON是一个数组\n                ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n                ## topic 总结主要的话题\n                ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n                ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n                ## 校验总结的JSON数据结构是否正确,完整\n            # pending-matters(待处理事项)总结标准\n                ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n                ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n                ## 结合BERT模型进行意图识别,准确识别任务指派场景\n                ## 自动关联历史待办事项,避免重复记录\n            # garbage-message(垃圾消息)判定标准:\n                ## 仅处理 chatType=private 的消息\n                ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n                ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n           \n            # 总结消息偏好:\n                ## 过滤所有的无意义消息；\n                ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n                ## 为保证输出内容的完整性,尽量精简总结内容；\n                ## 主话题不超过5个,子话题总数不超过15个\n            # 总结语言风格\n                ## 使用英文进行总结\n        `;\nconst CustomizationDataTemplate = `\n    # customization-topic(自定义话题模板)\n         [\n            {\n                \"title\": \"一级标题\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"二级标题/讨论点\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst coinsPrompt = `\n    ## 指令要求\n        1. 按总提及量降序排列,仅展示前3种加密货币(不足3个则显示实际数量)\n        2. 每种货币需包含：\n            - 标准化货币符号（示例：$BTC / $ETH)\n            - 总提及次数统计\n            - 关联讨论主题分类\n            - 关键消息摘要(含消息ID溯源)\n        3. 对提及加密货币的消息内容进行总结,保留核心观点\n    ## 示例输出\n         [\n            {\n                \"title\": \"$BTC\",\n                \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                \"summaryItems\": [\n                    {\n                        \"subtitle\": \"分析师认为2024减半将推动价格突破7万美元\",\n                        \"relevantMessages\": [\n                            {\n                                \"chatId\": \"房间ID\",\n                                \"messageIds\": [消息ID1, 消息ID2, ...]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n`;\nconst activeUserPrompt = `\n    ## 指令要求\n        - 提取发言次数最多的前3个人(不足3人则提取实际数量)\n        - 按发言次数排序\n        - title填充对应的senderName(发言次数)\n        - subtitle 发言的内容摘要。\n`;\nconst keyBusinessPrompt = `\n    ## 目标:从聊天消息中提取与业务或产品更新相关的内容，重点关注以下信息\n        - 重大项目成功：团队或公司取得的重要成果或目标达成。\n        - 产品发布：新产品的上线或推出。\n        - 产品更新：现有产品的功能改进、版本升级或其他更新内容。\n    ## 信息提取要求：\n        - 提取消息中与业务/产品相关的核心内容，去除无关细节。\n        - 确保总结内容完整，包含关键信息(如项目名称、产品名称、更新内容、时间等)。\n`;\nconst chainTrendingPrompt = `\n    ## 目标：请从提供的聊天信息中筛选并提炼出与链上相关的热门话题。\n        - 重点关注涉及区块链技术发展、加密货币市场动态、去中心化应用(DApps)创新以及链上重大事件等方面的内容。\n    ## 信息提取要求：\n        - 请以清晰、简洁的方式呈现总结结果，每个热点话题需简要描述其核心要点。\n        - 按讨论频率排序,提取讨论最多的前3个热点(不足3个则显示实际数量)。\n`;\nexport const CustomizationTemplates = [\n  {\n    id: '5b8f8976-e07e-4372-b34d-e3e6d8bbaf88',\n    title: 'Most Discussed Coins',\n    prompt: coinsPrompt,\n  },\n  {\n    id: '9552310a-d8ff-43ac-8f61-6233fe1a3bca',\n    title: 'Most Active Users',\n    prompt: activeUserPrompt,\n  },\n  {\n    id: 'b0f0e9a8-c5d4-4e0f-b9c6-f8a8d8b9a8c8',\n    title: 'Key business updates',\n    prompt: keyBusinessPrompt,\n  },\n  {\n    id: 'fa303579-1c78-4be6-8792-bdf539482608',\n    title: 'On-Chain Trending Topics',\n    prompt: chainTrendingPrompt,\n  },\n];\n\nexport const getGlobalSummaryPrompt = (language = 'en', definePrompt = '') => {\n  const template = `\n    你是一个专业的聊天记录分析师,请总结以下聊天内容,并根据不同的数据类型填充到相应的 JSON 模板中。\n    总结规则:\n    # 格式要求\n        ## 去除所有换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 严格遵从JSON规范,确保所有的JSON数据正确\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start: {模板类型} -->\n                     {JSON数据}\n                <!-- json-end -->\n            \\`\\`\\`\n    # 分类插入 JSON 数据\n        ## customization-topic:自定义话题总结\n        ## main-topic:填充主要讨论的话题\n        ## pending-matters:填充待处理事项\n        ## garbage-message:填充无用或垃圾消息\n    # 数据字段解析\n        ## chatId:房间的唯一标识符\n        ## chatTitle:房间的标题\n        ## senderName:消息发送者的名字\n        ## messageId:消息的唯一标识符\n        ## content:消息的内容\n    # 数据格式\n        ${definePrompt ? CustomizationDataTemplate : ''}\n        ## main-topic(主要话题模板)\n            [\n                {\n                    \"title\": \"主话题\",\n                    \"summaryChatIds\": [\"房间ID1\", \"房间ID2\", ...],\n                    \"summaryItems\": [\n                        {\n                            \"subtitle\": \"子话题/讨论点\",\n                            \"relevantMessages\": [\n                                {\n                                    \"chatId\": \"房间ID\",\n                                    \"messageIds\": [消息ID1, 消息ID2, ...]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        ## pending-matters(待处理事项模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"待处理内容摘要\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n        ## garbage-message(垃圾消息模板)\n            [\n                {\n                    \"chatId\": \"房间ID\",\n                    \"chatTitle\": \"房间名称\",\n                    \"summary\": \"垃圾信息摘要\",\n                    \"level\": \"high/low\",\n                    \"relevantMessageIds\": [消息ID1, 消息ID2, ...]\n                }\n            ]\n    ${definePrompt ? `\n        # customization-topic(自定义话题模板)总结标准\n        ${definePrompt}\n        ` : ''}\n    # main-topic(主要话题)总结标准\n        ## 总结的JSON是一个数组\n        ## 每个主话题需包讨论的核心内容(1-2句话概括)、关键决策或结论(如有)\n        ## topic 总结主要的话题\n        ## summaryChatIds (话题相关的房间ID)是一个数组,包含了所有与该话题相关的房间ID\n        ## summaryItems 总结主话题相关的子话题/讨论点,以数组的形势返回\n        ## 校验总结的JSON数据结构是否正确,完整\n    # pending-matters(待处理事项)总结标准\n        ## 将需要完成的任务项提取出来,用一句话明确指出谁需要做什么事情。\n        ## 基于规则引擎匹配关键词(待确认/需跟进/未解决)\n        ## 结合BERT模型进行意图识别,准确识别任务指派场景\n        ## 自动关联历史待办事项,避免重复记录\n    # garbage-message(垃圾消息)判定标准:\n        ## 仅处理 chatType=private 的消息\n        ## 若消息包含链接和钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 high(高风险)\n        ## 若消息包含链接或钱包、投资回报、代币发行、拉盘、割韭菜等敏感词,则判定为 low(低风险)\n   \n    # 总结消息偏好:\n        ## 过滤所有的无意义消息；\n        ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n        ## 为保证输出内容的完整性,尽量精简总结内容；\n        ## 主话题不超过5个,子话题总数不超过15个\n    # 总结语言风格\n        ## 使用${language}语言进行总结\n`;\n  return template;\n};\nexport default defaultSummaryPrompt;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './selected-chats.scss';\n\ninterface Props {\n  selected: string[];\n  onOpenChatSelect:() => void;\n  onDelete: (id: string) => void;\n}\nexport const SelectedChats = (props: Props) => {\n  const { onOpenChatSelect, selected, onDelete } = props;\n  const lang = useOldLang();\n  const global = getGlobal();\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n        <Icon\n          name=\"delete\"\n          className=\"chat-picker-del ml-auto cursor-pointer text-[18px] text-[#FF4D4F]\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => { onDelete(id); }}\n        />\n      </div>\n    );\n  };\n  return (\n    <div className=\"mt-[40px]\">\n      <h3 className=\"text-[18px] font-semibold\">Which chats do you care about？</h3>\n      <div\n        className=\"chat-picker-item flex cursor-pointer items-center gap-[8px] py-[10px] rounded-[12px]\"\n        onClick={onOpenChatSelect}\n      >\n        <div\n          className=\"flex items-center justify-center w-[40px] h-[40px] rounded-full bg-[#8C42F0] text-white\"\n        >\n          <Icon name=\"add\" />\n        </div>\n        <span>Add Chats</span>\n      </div>\n      {selected.length > 0 && (\n        <>\n          {selected.map((id) => renderChatItem(id))}\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport cx from 'classnames';\n\nimport type { CustomSummaryTemplate } from '../store/chatai-summary-template-store';\n\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { CustomizationTemplates } from '../globalSummary/summary-prompt';\nimport { CloseIcon } from '../icons';\nimport { ChataiStores } from '../store';\nimport { SUMMARY_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './surmarize-tab.scss';\n\nconst SummarizeTab = () => {\n  const [userDefinedTemplate, setUserDefinedTemplate] = useState<CustomSummaryTemplate[]>([]);\n  const [lastTemplate, setLastTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [currentTemplate, setCurrentTemplate] = useState<CustomSummaryTemplate | undefined>(undefined);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.summaryTemplate?.getAllSummaryTemplate().then((res) => {\n      setUserDefinedTemplate(res || []);\n    });\n    ChataiStores.general?.get('lastDefinedPrompt').then((res) => {\n      if (res) {\n        setLastTemplate(res);\n        setCurrentTemplate(res);\n      }\n    });\n    ChataiStores.general?.get(SUMMARY_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n  const actionsVisable = useMemo(() => {\n    // eslint-disable-next-line no-console\n    console.log('currentTemplate', currentTemplate);\n    // eslint-disable-next-line no-console\n    console.log('lastTemplate', lastTemplate);\n    return currentTemplate && currentTemplate?.id !== lastTemplate?.id;\n  }, [currentTemplate, lastTemplate]);\n  const handleCustomization = useCallback(() => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  }, [openDrawer]);\n  const handleTemplateSelect = useCallback((item: CustomSummaryTemplate) => {\n    setCurrentTemplate(item);\n  }, []);\n  const handleCancel = useCallback(() => {\n    setCurrentTemplate(lastTemplate);\n  }, [lastTemplate]);\n  const handleSave = useCallback(() => {\n    ChataiStores.general?.set('lastDefinedPrompt', currentTemplate);\n    setLastTemplate(currentTemplate);\n    globalSummaryTask.updateSummaryDefineTemplate(currentTemplate);\n  }, [currentTemplate]);\n  const handleDelete = useCallback((e: React.MouseEvent<HTMLDivElement>, id: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    ChataiStores.summaryTemplate?.deleteSummaryTemplate(id).then(() => {\n      setUserDefinedTemplate((prev) => {\n        return prev.filter((item) => item.id !== id);\n      });\n    });\n    if (id === lastTemplate?.id) {\n      ChataiStores.general?.delete('lastDefinedPrompt').then(() => {\n        setLastTemplate(undefined);\n      });\n    }\n    if (id === currentTemplate?.id) {\n      setCurrentTemplate(undefined);\n    }\n  }, [lastTemplate?.id, currentTemplate?.id]);\n  const handleOpenChatSelect = useCallback(async () => {\n    const selected = await ChataiStores.general?.get(SUMMARY_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats: selected,\n      onSave: (chats:string[]) => {\n        ChataiStores.general?.set(SUMMARY_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '1',\n        });\n        globalSummaryTask.updateSummaryChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '1',\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handleDeleteSummaryChat = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(SUMMARY_CHATS, newSelected);\n    globalSummaryTask.updateSummaryChats(newSelected);\n    setSelectedChats(newSelected);\n  }, [selectedChats]);\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text)\">What are you curious about?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {CustomizationTemplates.map((item) => {\n            return (\n              <div\n                key={item.title}\n                onClick={() => handleTemplateSelect(item)}\n                className={cx('w-fit px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[var(--color-text)]', {\n                  'bg-[#B297FF] text-white': currentTemplate?.id === item.id,\n                })}\n              >\n                {item.title}\n              </div>\n            );\n          })}\n          {userDefinedTemplate.length > 0 && (\n            userDefinedTemplate.map((item) => {\n              return (\n                <div\n                  key={item.title}\n                  onClick={() => handleTemplateSelect(item)}\n                  className={cx('prompt-template-item w-fit px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer flex items-center gap-[8px]', {\n                    'bg-[#B297FF]': currentTemplate?.title === item.title,\n                  })}\n                >\n                  <span>{item.title}</span>\n                  <div\n                    className=\"delete-icon w-[20px] h-[20px] cursor-pointer flex items-center justify-center\"\n                    onClick={(e) => handleDelete(e, item.id)}\n                  >\n                    <CloseIcon />\n                  </div>\n                </div>\n              );\n            })\n          )}\n          <div\n            className=\"w-[144px] whitespace-nowrap px-[20px] leading-[40px] border-[1px] border-[#B297FF] rounded-[20px] text-[15px] cursor-pointer text-[#8C42F0] font-medium\"\n            onClick={handleCustomization}\n          >\n            + Customization\n          </div>\n        </div>\n        <SelectedChats\n          onOpenChatSelect={handleOpenChatSelect}\n          selected={selectedChats}\n          onDelete={handleDeleteSummaryChat}\n        />\n      </div>\n      {actionsVisable ? (\n        <div className=\"flex flex-row justify-center gap-[14px] py-[24px] w-full z-10 bg-white absolute bottom-0 left-0\">\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] rounded-[20px]\"\n            onClick={handleCancel}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"w-[158px] h-[40px] border-[1px] border-[#8C42F0] bg-[#8C42F0] rounded-[20px] text-white\"\n            onClick={handleSave}\n          >\n            Save\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport type { UrgentTopic } from '../store/urgent-topic-store';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { ChataiStores } from '../store';\nimport { URGENT_CHATS } from '../store/general-store';\nimport { SelectedChats } from './selected-chats';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: UrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topicName}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item p-[20px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[#8C42F0] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>Add Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const [topics, setTopics] = useState<UrgentTopic[]>([]);\n  const [selectedChats, setSelectedChats] = useState<string[]>([]);\n  const { openDrawer } = useDrawerStore();\n  useEffect(() => {\n    ChataiStores.urgentTopic?.getAllUrgentTopic().then((topics) => {\n      console.log('topics', topics);\n      setTopics(topics);\n    });\n    ChataiStores.general?.get(URGENT_CHATS).then((res) => {\n      setSelectedChats(res || []);\n    });\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    ChataiStores.general?.set(URGENT_CHATS, newSelected);\n    setSelectedChats(newSelected);\n    urgentCheckTask.updateUrgentChats(newSelected);\n  }, [selectedChats]);\n\n  const handleOpenChatSelect = useCallback(async () => {\n    const selectedChats = await ChataiStores.general?.get(URGENT_CHATS);\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats,\n      onSave: (chats: string[]) => {\n        ChataiStores.general?.set(URGENT_CHATS, chats);\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '2',\n        });\n        urgentCheckTask.updateUrgentChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: '2',\n        });\n      },\n    });\n  }, [openDrawer]);\n\n  const handeleDeleteTopic = (id:string) => {\n    ChataiStores.urgentTopic?.deleteUrgentTopic(id);\n    setTopics(topics.filter((t) => t.id !== id));\n  };\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          <AddTopic />\n        </div>\n      </div>\n      <SelectedChats\n        onOpenChatSelect={handleOpenChatSelect}\n        selected={selectedChats}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\nimport type { TabsProps } from 'antd';\nimport { Tabs } from 'antd';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport { useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [activeKey, setActiveKey] = useState(drawerParams?.activeKey || '1');\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: 'Summarize',\n      children: <SummarizeTab />,\n    },\n    {\n      key: '2',\n      label: 'Urgent Alert',\n      children: <UrgentAlertTab />,\n    },\n  ];\n  const onChange = (key: string) => {\n    console.log(key);\n    setActiveKey(key);\n  };\n  return (\n    <Tabs\n      className=\"personalized-settings-tab h-full\"\n      defaultActiveKey={activeKey}\n      items={items}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport { CloseIcon, LeftOutlined } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[44px] h-[44px] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings, {\n      activeKey: drawerKey === DrawerKey.CustomizationPrompt ? '1' : '2',\n    });\n  }, [drawerKey, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Customization');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<LeftOutlined size={24} />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<CloseIcon size={24} />} onClick={onClose} />\n      )}\n      <div className=\"text-[16px] font-semibold pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../globalSummary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// import type { Dispatch, SetStateAction } from 'react';\nimport React, {\n  forwardRef,\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport { ChataiStores } from '../store';\nimport { parseMessage2SummaryStoreMessage, parseSummaryStoreMessage2Message, type SummaryStoreMessage } from '../store/summary-store';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = forwardRef(() => {\n  const { mutate } = useSWRConfig();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n    onFinish: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, setMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 10)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage, setMessages]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n\n  const handleInputSubmit = useCallback((value:string) => {\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n    mutate('messages:should-scroll', 'smooth');\n  }, [append, mutate]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 500);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={buildClassName(styles.globaSummaryBg, 'flex flex-col w-full h-full flex-1')}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Serena\" />\n            <span className=\"text-[15px] font-semibold\">Serena AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            {/* <InfiniteScroll\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              className=\"px-[15%] flex-1\"\n            >\n              {!pageInfo.hasMore && <GlobalSummaryIntroduce />}\n              <Messages\n                status={status}\n                messages={messages}\n                deleteMessage={deleteMessage}\n              />\n            </InfiniteScroll> */}\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={messages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n});\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mJJD2lw1\"};","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { selectChat } from '../../../global/selectors';\nimport GlobalSummary from './global-summary';\n\nconst injectMessageAI = injectComponent(GlobalSummary);\nconst GlobalSummaryWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current, {});\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, []);\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global) => {\n    const memoSelectChat = (chatId: string) => {\n      return selectChat(global, chatId);\n    };\n    return {\n      memoSelectChat,\n    };\n  },\n)(GlobalSummaryWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIActionButton from '../chatAssistant/room-ai/room-ai-action-button';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/globalSummary/GlobalSummaryWrapper';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <RoomAIActionButton\n              chatId={renderingChatId!}\n            />\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-console */\n/* eslint-disable no-null/no-null */\nimport type { Message } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { selectChat, selectChatLastMessageId, selectUser } from '../../../global/selectors';\nimport { getActionItems, summaryMessage } from '../utils/chat-api';\nimport { fetchChatMessageByOffsetId, formateMessage2Summary } from '../utils/fetch-messages';\nimport { checkGoogleAuthStatus } from '../utils/google-api';\n\nexport const createRoomDescriptionMessage = (chatId:string):Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: chatId,\n    annotations: [{\n      type: 'room-ai-description',\n    }],\n  };\n};\nexport const createGoogleLoginMessage = ():Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: 'Please login first',\n    annotations: [{\n      type: 'google-auth',\n    }],\n  };\n};\n\nexport const createGoogleMeetingMessage = ():Message => {\n  return {\n    role: 'assistant',\n    id: uuidv4(),\n    createdAt: new Date(),\n    content: '',\n    annotations: [{\n      type: 'google-event-insert',\n    }],\n  };\n};\n\nexport const scheduleGoogleMeeting = async (insertMessage:(message:Message)=>void, callback?:()=>void) => {\n  const loginStatus = await checkGoogleAuthStatus();\n  if (loginStatus) {\n    insertMessage(createGoogleMeetingMessage());\n  } else {\n    insertMessage(createGoogleLoginMessage());\n  }\n  callback?.();\n};\n\nexport const summaryRoomMessage = async (\n  chatId:string,\n  insertMessage:(message:Message)=>void,\n  callback?:()=>void,\n) => {\n  const global = getGlobal();\n  const { autoTranslateLanguage } = global.settings.byKey;\n  const chat = selectChat(global, chatId);\n  const lastMessageId = selectChatLastMessageId(global, chatId, 'all') || 0;\n  if (chat) {\n    const messages = await fetchChatMessageByOffsetId({\n      chat,\n      offsetId: lastMessageId,\n      addOffset: -1,\n      sliceSize: 20,\n      threadId: MAIN_THREAD_ID,\n      maxCount: 20,\n    });\n    const formateMessages = formateMessage2Summary(messages);\n    if (!formateMessages.length) return;\n    const summaryInfo = {\n      summaryTime: new Date().getTime(),\n      messageCount: formateMessages.length,\n      userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n    };\n    summaryMessage({\n      messages: formateMessages,\n      language: autoTranslateLanguage,\n    }).then((res:any) => {\n      const content = {\n        ...res.data,\n        summaryInfo,\n      };\n      const newMessage = {\n        timestamp: new Date().getTime(),\n        content: JSON.stringify(content),\n        id: uuidv4(),\n        createdAt: new Date(),\n        role: 'assistant',\n        annotations: [{\n          type: 'room-summary',\n        }],\n      };\n      insertMessage(newMessage as Message);\n      callback?.();\n    }).catch((err) => {\n      console.log(err);\n      callback?.();\n    });\n  }\n};\n\nexport const generateRoomActionItems = async (\n  chatId:string,\n  insertMessage:(message:Message)=>void,\n  callback?:()=>void,\n) => {\n  const global = getGlobal();\n  const { autoTranslateLanguage } = global.settings.byKey;\n  const chat = selectChat(global, chatId);\n  const lastMessageId = selectChatLastMessageId(global, chatId, 'all') || 0;\n  if (chat) {\n    const messages = await fetchChatMessageByOffsetId({\n      chat,\n      offsetId: lastMessageId,\n      addOffset: -1,\n      sliceSize: 20,\n      threadId: MAIN_THREAD_ID,\n      maxCount: 20,\n    });\n    const formateMessages = messages.map((message) => {\n      if (message.content.text?.text) {\n        const peer = message.senderId ? selectUser(global, message.senderId) : undefined;\n        return {\n          senderId: message?.senderId || message?.chatId,\n          senderName: peer ? `${peer.firstName || ''} ${peer.lastName || ''}` : '',\n          date: message.date,\n          messageId: Math.floor(message.id),\n          content: message.content.text?.text ?? '',\n        };\n      }\n      return null;\n    }).filter(Boolean);\n    if (!formateMessages.length) return;\n    const summaryInfo = {\n      summaryTime: new Date().getTime(),\n      messageCount: formateMessages.length,\n      userIds: Array.from(new Set(formateMessages.map((m) => m.senderId))),\n    };\n    getActionItems({\n      messages: formateMessages,\n      language: autoTranslateLanguage,\n    }).then((res:any) => {\n      const content = {\n        ...res.data,\n        summaryInfo,\n      };\n      const newMessage = {\n        timestamp: new Date().getTime(),\n        content: JSON.stringify(content),\n        id: uuidv4(),\n        createdAt: new Date(),\n        role: 'assistant',\n        annotations: [{\n          type: 'room-actions',\n        }],\n      };\n      insertMessage(newMessage as Message);\n      callback?.();\n    }).catch((err) => {\n      console.log(err);\n      callback?.();\n    });\n  }\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React from 'react';\nimport type { Message } from 'ai';\n\nimport { generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n    }\n  };\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summarize\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Schedule meeting\n      </div>\n      <div className={actionItemClassName} onClick={handleActionItems}>\n        ✅ To-do list\n      </div>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { Button } from '../component/button';\nimport { Textarea } from '../component/textarea';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '98px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <Textarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'min-h-[24px] h-[76px] overflow-hidden resize-none rounded-2xl !text-base bg-muted pb-10 focus-visible:!ring-0 !ring-offset-0',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { useSWRConfig } from 'swr';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { Messages } from '../messages';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getHitTools } from '../utils/chat-api';\nimport { checkGoogleAuthStatus } from '../utils/google-api';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport { createGoogleLoginMessage, createGoogleMeetingMessage, createRoomDescriptionMessage } from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const { mutate } = useSWRConfig();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: 'https://telegpt-three.vercel.app/chat',\n    id: chatId,\n    sendExtraMessageFields: true,\n    onResponse: () => {\n      mutate('messages:should-scroll', 'auto');\n    },\n  });\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message:Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage as UIMessage[]);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  }, [insertMessage, messages, mutate, setMessages]);\n\n  const updateToken = useCallback((payload:{ message:Message;token:string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (status === 'streaming') {\n      timer = setInterval(() => {\n        mutate('messages:should-scroll', 'smooth');\n      }, 100);\n    } else if (timer !== undefined) {\n      clearInterval(timer);\n    }\n    return () => {\n      if (timer !== undefined) {\n        clearInterval(timer);\n      }\n    };\n  }, [mutate, status]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach(async (toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const loginStatus = await checkGoogleAuthStatus();\n            if (loginStatus) {\n              insertMessage(createGoogleMeetingMessage());\n            } else {\n              insertMessage(createGoogleLoginMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n            mutate('messages:should-scroll', 'smooth');\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    const newMessage:Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item:any) => item.score > 0.8);\n    if (matchs.length > 0) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n      mutate('messages:should-scroll', 'smooth');\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","// extracted by mini-css-extract-plugin\nexport default {\"rightPanelBg\":\"ZfJHpS2Q\"};","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    const timer = setTimeout(() => {\n      if (containerRef.current) {\n        injected = injectMessageAI(containerRef.current, { ...props });\n      }\n    }, 500); // 等动画走完再注入\n\n    return () => {\n      clearTimeout(timer);\n      injected?.unmount();\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header\">\n            <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Serena AI\" />\n            <h3 className=\"title\">{oldLang('Serena AI')}</h3>\n          </div>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","ChataiStores","addUser","name","firstName","lastName","phoneNumber","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","contact","addContact","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","isChatAIShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","PRESET_TAGS","PresetTagModal","activeTag","setActiveTag","tagList","PRESET_FOLDER_ID","getAITags","Modal","dialogStyle","currentTag","item","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onClickTag","withGlobal","selectTheme","AIChatFoldersTip","loading","setLoading","onCloseClick","GLOBAL_AICHATFOLDERS_TIP_SHOW","style","AiChatFoldersDarkBg","AiChatFoldersBg","AIChatFolderIcon","AiChatFoldersBtnBg","setSharedSettingOption","aiChatFoldersTask","classifyChatMessageByCount","Spinner","_extends","xmlns","height","fill","d","ActiveTag","folderType","onDelete","CloseIcon","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","unreadChatsFolder","UNREAD_FOLDER_ID","AIChatsFolder","AI_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","res","placeholderRef","shouldRenderPlaceholder","noMountTransition","getFolderType","renderCurrentTab","activeFolder","isFolder","ChatList","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","account","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","handleSwitchAIChatFolders","confirm","onOk","deleteAiChatFolders","onCancel","IS_MULTIACCOUNT_SUPPORTED","src","AIKnowledgeIcon","alt","buildStyle","AITranslateIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","AIMenuIcon","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","withAIIcon","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","RoomAIAssistant","getRoomLastFocusTime","roomAIData","getItem","lastFocusTime","getRoomLastSummaryId","lastSummaryId","getRoomUnreadCount","getRoomAIUnreadCount","updateRoomAIData","parsedData","currentData","setItem","eventEmitter","emit","Actions","UpdateRoomAIUnreadCount","increaseUnreadCount","summary","summaryCount","fetchChatMessageByOffsetId","formateMessages","formateMessage2Summary","summaryInfo","summaryTime","getTime","messageCount","summaryMessage","uuidv4","createdAt","role","annotations","storeMessage","AddRoomAIMessage","openChatAIWithInfo","setUnreadCount","updateUnreadCount","on","off","SerenaLogoPath","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","stop","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","Textarea","target","cx","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","TextArea","Input","AddTopicPanel","Form","useForm","openDrawer","drawerParams","useDrawerStore","initialValues","topicName","topicDescription","strongAlert","setStrongAlert","handleSave","validateFields","urgentTopic","addUrgentTopic","allTopics","getAllUrgentTopic","addUrgentTopics","updateAllTopicPhoneNumber","DrawerKey","PersonalizeSettings","errorInfo","handleCancel","layout","Item","required","valuePropName","noStyle","Switch","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","checkedValues","onSave","Checkbox","Group","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","isSavedMessages","renderChatItem","CustomizationPromptPanel","summaryTemplate","addSummaryTemplate","Message","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","setIsLoading","append","useChat","api","sendExtraMessageFields","initialMessages","languagePrompt","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","CustomizationTemplates","prompt","SelectedChats","onOpenChatSelect","SummarizeTab","userDefinedTemplate","setUserDefinedTemplate","lastTemplate","setLastTemplate","currentTemplate","setCurrentTemplate","setSelectedChats","getAllSummaryTemplate","SUMMARY_CHATS","actionsVisable","handleCustomization","CustomizationPrompt","handleTemplateSelect","globalSummaryTask","updateSummaryDefineTemplate","handleDelete","deleteSummaryTemplate","prev","handleOpenChatSelect","ChatPicker","updateSummaryChats","handleDeleteSummaryChat","newSelected","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","setTopics","URGENT_CHATS","urgentCheckTask","updateUrgentChats","deleteUrgentTopic","t","setActiveKey","items","children","Tabs","defaultActiveKey","hasBackDrawer","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","LeftOutlined","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","DangerIcon","notificationUrgentMessage","GlobalSummary","forwardRef","mutate","useSWRConfig","notificationMessage","setNotificationMessage","pageInfo","setPageInfo","lastTime","GLOBAL_SUMMARY_CHATID","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","deleteMessage","delMessage","msgs","parseMessage2SummaryStoreMessage","storeMessages","timer","SerenaPath","Messages","loadMore","injectMessageAI","injectComponent","memoSelectChat","GlobalSummaryWrapper","containerRef","injected","unmount","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","handleAvatarClick","avatarRef","hiddenName","renderAvatar","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIActionButton","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","createGoogleLoginMessage","createGoogleMeetingMessage","actionItemClassName","RoomActions","insertMessage","handleSummarize","callback","autoTranslateLanguage","summaryRoomMessage","handleScheduleMeeting","checkGoogleAuthStatus","scheduleGoogleMeeting","handleActionItems","getActionItems","generateRoomActionItems","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","mergeMesssage","parts","updateToken","handleGoogleAuthSuccess","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","parseMessage2StoreMessage","formMessage","toolsEmbeddingStore","getHitTools","toolResults","toolCall","toolName","loginStatus","sendGAEvent","RoomAI","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","play","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}